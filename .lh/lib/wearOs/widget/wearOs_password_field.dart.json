{
    "sourceFile": "lib/wearOs/widget/wearOs_password_field.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1676024973085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1676024987277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n import 'package:foodex_app/app/utils/dimension.dart';\r\n \r\n import '../app/theme/constants.dart';\r\n \r\n-class PasswordField extends StatefulWidget {\r\n-  const PasswordField(\r\n+class WearOsPasswordField extends StatefulWidget {\r\n+  const WearOsPasswordField(\r\n       {Key? key,\r\n       this.hintText,\r\n       this.onChanged,\r\n       this.validator,\r\n@@ -22,12 +22,12 @@\n   final String? errorText;\r\n   final controller;\r\n \r\n   @override\r\n-  State<PasswordField> createState() => _PasswordFieldState();\r\n+  State<WearOsPasswordField> createState() => _WearOsPasswordFieldState();\r\n }\r\n \r\n-class _PasswordFieldState extends State<PasswordField> {\r\n+class _WearOsPasswordFieldState extends State<WearOsPasswordField> {\r\n   final TextEditingController controller = TextEditingController();\r\n   bool isHidden = true;\r\n   bool success = false;\r\n \r\n"
                },
                {
                    "date": 1676024995016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,7 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter/services.dart';\r\n import 'package:foodex_app/app/utils/dimension.dart';\r\n-\r\n-import '../app/theme/constants.dart';\r\n-\r\n class WearOsPasswordField extends StatefulWidget {\r\n   const WearOsPasswordField(\r\n       {Key? key,\r\n       this.hintText,\r\n"
                },
                {
                    "date": 1676025008500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter/services.dart';\r\n+import 'package:foodex_app/app/theme/constants.dart';\r\n import 'package:foodex_app/app/utils/dimension.dart';\r\n+\r\n class WearOsPasswordField extends StatefulWidget {\r\n   const WearOsPasswordField(\r\n       {Key? key,\r\n       this.hintText,\r\n"
                },
                {
                    "date": 1676025316710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     Size size = MediaQuery.of(context).size;\r\n     return Container(\r\n-      width: size.width * 0.8,\r\n+      width: size.width * 0.9,\r\n       decoration: BoxDecoration(\r\n         borderRadius: BorderRadius.circular(Dimensions.radius30),\r\n       ),\r\n       child: TextFormField(\r\n"
                },
                {
                    "date": 1676025322326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     Size size = MediaQuery.of(context).size;\r\n     return Container(\r\n       width: size.width * 0.9,\r\n       decoration: BoxDecoration(\r\n-        borderRadius: BorderRadius.circular(Dimensions.radius30),\r\n+        borderRadius: BorderRadius.circular(Dimensions30),\r\n       ),\r\n       child: TextFormField(\r\n         cursorColor: Colors.black12,\r\n         obscureText: isHidden,\r\n"
                },
                {
                    "date": 1676025334232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     Size size = MediaQuery.of(context).size;\r\n     return Container(\r\n       width: size.width * 0.9,\r\n       decoration: BoxDecoration(\r\n-        borderRadius: BorderRadius.circular(Dimensions30),\r\n+        borderRadius: BorderRadius.circular(30),\r\n       ),\r\n       child: TextFormField(\r\n         cursorColor: Colors.black12,\r\n         obscureText: isHidden,\r\n"
                },
                {
                    "date": 1676025341591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         decoration: InputDecoration(\r\n           contentPadding: EdgeInsets.symmetric(vertical: Dimensions.height22),\r\n           enabledBorder: OutlineInputBorder(\r\n             borderSide: const BorderSide(color: AppColor.bgFillColor, width: 2),\r\n-            borderRadius: BorderRadius.circular(Dimensions.radius30),\r\n+            borderRadius: BorderRadius.circular(30),\r\n           ),\r\n           filled: true,\r\n           fillColor: AppColor.bgFillColor,\r\n           focusedBorder: OutlineInputBorder(\r\n"
                },
                {
                    "date": 1676025348954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,15 +63,15 @@\n           fillColor: AppColor.bgFillColor,\r\n           focusedBorder: OutlineInputBorder(\r\n               borderSide:\r\n                   const BorderSide(color: AppColor.kPrimaryColor, width: 2),\r\n-              borderRadius: BorderRadius.circular(Dimensions.radius30)),\r\n+              borderRadius: BorderRadius.circular(30)),\r\n           errorText: widget.validator != null ? null : widget.errorText,\r\n           errorStyle: TextStyle(fontSize: Dimensions.font14),\r\n           errorBorder: OutlineInputBorder(\r\n               borderSide: const BorderSide(color: Colors.red),\r\n               borderRadius:\r\n-                  BorderRadius.all(Radius.circular(Dimensions.radius30))),\r\n+                  BorderRadius.all(Radius.circular(30))),\r\n           focusedErrorBorder: OutlineInputBorder(\r\n               borderSide: const BorderSide(color: Colors.red),\r\n               borderRadius:\r\n                   BorderRadius.all(Radius.circular(Dimensions.radius30))),\r\n"
                },
                {
                    "date": 1676025354919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,113 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:foodex_app/app/theme/constants.dart';\r\n+import 'package:foodex_app/app/utils/dimension.dart';\r\n+\r\n+class WearOsPasswordField extends StatefulWidget {\r\n+  const WearOsPasswordField(\r\n+      {Key? key,\r\n+      this.hintText,\r\n+      this.onChanged,\r\n+      this.validator,\r\n+      this.inputFormatter,\r\n+      this.errorText,\r\n+      this.controller})\r\n+      : super(key: key);\r\n+\r\n+  final String? hintText;\r\n+  final Function(String?)? onChanged;\r\n+  final String? Function(String?)? validator;\r\n+  final List<TextInputFormatter>? inputFormatter;\r\n+  final String? errorText;\r\n+  final controller;\r\n+\r\n+  @override\r\n+  State<WearOsPasswordField> createState() => _WearOsPasswordFieldState();\r\n+}\r\n+\r\n+class _WearOsPasswordFieldState extends State<WearOsPasswordField> {\r\n+  final TextEditingController controller = TextEditingController();\r\n+  bool isHidden = true;\r\n+  bool success = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    Size size = MediaQuery.of(context).size;\r\n+    return Container(\r\n+      width: size.width * 0.9,\r\n+      decoration: BoxDecoration(\r\n+        borderRadius: BorderRadius.circular(30),\r\n+      ),\r\n+      child: TextFormField(\r\n+        cursorColor: Colors.black12,\r\n+        obscureText: isHidden,\r\n+        controller: widget.controller,\r\n+        keyboardType: TextInputType.visiblePassword,\r\n+        validator: (value) {\r\n+          if (value == null || value.trim().isEmpty) {\r\n+            return 'Enter valid password';\r\n+          }\r\n+          if (value.trim().length < 8) {\r\n+            return 'Password must be at least 8 characters in length';\r\n+          }\r\n+          // Return null if the entered password is valid\r\n+          return null;\r\n+        },\r\n+        decoration: InputDecoration(\r\n+          contentPadding: EdgeInsets.symmetric(vertical: Dimensions.height22),\r\n+          enabledBorder: OutlineInputBorder(\r\n+            borderSide: const BorderSide(color: AppColor.bgFillColor, width: 2),\r\n+            borderRadius: BorderRadius.circular(30),\r\n+          ),\r\n+          filled: true,\r\n+          fillColor: AppColor.bgFillColor,\r\n+          focusedBorder: OutlineInputBorder(\r\n+              borderSide:\r\n+                  const BorderSide(color: AppColor.kPrimaryColor, width: 2),\r\n+              borderRadius: BorderRadius.circular(30)),\r\n+          errorText: widget.validator != null ? null : widget.errorText,\r\n+          errorStyle: TextStyle(fontSize: Dimensions.font14),\r\n+          errorBorder: OutlineInputBorder(\r\n+              borderSide: const BorderSide(color: Colors.red),\r\n+              borderRadius:\r\n+                  BorderRadius.all(Radius.circular(30))),\r\n+          focusedErrorBorder: OutlineInputBorder(\r\n+              borderSide: const BorderSide(color: Colors.red),\r\n+              borderRadius:\r\n+                  BorderRadius.all(Radius.circular(30))),\r\n+          prefixIcon: Padding(\r\n+            padding: EdgeInsets.only(left: 8),\r\n+            child: Icon(\r\n+              size: Dimensions.iconSize24,\r\n+              Icons.lock,\r\n+              color: Colors.black,\r\n+            ),\r\n+          ),\r\n+          hintText: 'password',\r\n+          hintStyle: const TextStyle(\r\n+              fontFamily: 'OpenSans', color: AppColor.textColor),\r\n+          suffixIcon: Padding(\r\n+            padding: EdgeInsets.only(right: Dimensions.height8),\r\n+            child: IconButton(\r\n+              icon: isHidden\r\n+                  ? Icon(\r\n+                      Icons.visibility_off,\r\n+                      size: Dimensions.iconSize24,\r\n+                      color: AppColor.textColor,\r\n+                    )\r\n+                  : Icon(Icons.visibility,\r\n+                      size: Dimensions.iconSize24, color: AppColor.textColor),\r\n+              onPressed: togglePasswordVisibility,\r\n+              // color: Colors.black,\r\n+            ),\r\n+          ),\r\n+          border: InputBorder.none,\r\n+        ),\r\n+        style:\r\n+            TextStyle(fontSize: Dimensions.font17, color: AppColor.textColor),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n+}\r\n"
                },
                {
                    "date": 1676025364023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,18 +77,18 @@\n                   BorderRadius.all(Radius.circular(30))),\r\n           prefixIcon: Padding(\r\n             padding: EdgeInsets.only(left: 8),\r\n             child: Icon(\r\n-              size: Dimensions.iconSize24,\r\n+              size: 24,\r\n               Icons.lock,\r\n               color: Colors.black,\r\n             ),\r\n           ),\r\n           hintText: 'password',\r\n           hintStyle: const TextStyle(\r\n               fontFamily: 'OpenSans', color: AppColor.textColor),\r\n           suffixIcon: Padding(\r\n-            padding: EdgeInsets.only(right: Dimensions.height8),\r\n+            padding: EdgeInsets.only(right8),\r\n             child: IconButton(\r\n               icon: isHidden\r\n                   ? Icon(\r\n                       Icons.visibility_off,\r\n@@ -110,117 +110,4 @@\n   }\r\n \r\n   void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n }\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:foodex_app/app/theme/constants.dart';\r\n-import 'package:foodex_app/app/utils/dimension.dart';\r\n-\r\n-class WearOsPasswordField extends StatefulWidget {\r\n-  const WearOsPasswordField(\r\n-      {Key? key,\r\n-      this.hintText,\r\n-      this.onChanged,\r\n-      this.validator,\r\n-      this.inputFormatter,\r\n-      this.errorText,\r\n-      this.controller})\r\n-      : super(key: key);\r\n-\r\n-  final String? hintText;\r\n-  final Function(String?)? onChanged;\r\n-  final String? Function(String?)? validator;\r\n-  final List<TextInputFormatter>? inputFormatter;\r\n-  final String? errorText;\r\n-  final controller;\r\n-\r\n-  @override\r\n-  State<WearOsPasswordField> createState() => _WearOsPasswordFieldState();\r\n-}\r\n-\r\n-class _WearOsPasswordFieldState extends State<WearOsPasswordField> {\r\n-  final TextEditingController controller = TextEditingController();\r\n-  bool isHidden = true;\r\n-  bool success = false;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    Size size = MediaQuery.of(context).size;\r\n-    return Container(\r\n-      width: size.width * 0.9,\r\n-      decoration: BoxDecoration(\r\n-        borderRadius: BorderRadius.circular(30),\r\n-      ),\r\n-      child: TextFormField(\r\n-        cursorColor: Colors.black12,\r\n-        obscureText: isHidden,\r\n-        controller: widget.controller,\r\n-        keyboardType: TextInputType.visiblePassword,\r\n-        validator: (value) {\r\n-          if (value == null || value.trim().isEmpty) {\r\n-            return 'Enter valid password';\r\n-          }\r\n-          if (value.trim().length < 8) {\r\n-            return 'Password must be at least 8 characters in length';\r\n-          }\r\n-          // Return null if the entered password is valid\r\n-          return null;\r\n-        },\r\n-        decoration: InputDecoration(\r\n-          contentPadding: EdgeInsets.symmetric(vertical: Dimensions.height22),\r\n-          enabledBorder: OutlineInputBorder(\r\n-            borderSide: const BorderSide(color: AppColor.bgFillColor, width: 2),\r\n-            borderRadius: BorderRadius.circular(30),\r\n-          ),\r\n-          filled: true,\r\n-          fillColor: AppColor.bgFillColor,\r\n-          focusedBorder: OutlineInputBorder(\r\n-              borderSide:\r\n-                  const BorderSide(color: AppColor.kPrimaryColor, width: 2),\r\n-              borderRadius: BorderRadius.circular(30)),\r\n-          errorText: widget.validator != null ? null : widget.errorText,\r\n-          errorStyle: TextStyle(fontSize: Dimensions.font14),\r\n-          errorBorder: OutlineInputBorder(\r\n-              borderSide: const BorderSide(color: Colors.red),\r\n-              borderRadius:\r\n-                  BorderRadius.all(Radius.circular(30))),\r\n-          focusedErrorBorder: OutlineInputBorder(\r\n-              borderSide: const BorderSide(color: Colors.red),\r\n-              borderRadius:\r\n-                  BorderRadius.all(Radius.circular(Dimensions.radius30))),\r\n-          prefixIcon: Padding(\r\n-            padding: EdgeInsets.only(left: Dimensions.height8),\r\n-            child: Icon(\r\n-              size: Dimensions.iconSize24,\r\n-              Icons.lock,\r\n-              color: Colors.black,\r\n-            ),\r\n-          ),\r\n-          hintText: 'password',\r\n-          hintStyle: const TextStyle(\r\n-              fontFamily: 'OpenSans', color: AppColor.textColor),\r\n-          suffixIcon: Padding(\r\n-            padding: EdgeInsets.only(right: Dimensions.height8),\r\n-            child: IconButton(\r\n-              icon: isHidden\r\n-                  ? Icon(\r\n-                      Icons.visibility_off,\r\n-                      size: Dimensions.iconSize24,\r\n-                      color: AppColor.textColor,\r\n-                    )\r\n-                  : Icon(Icons.visibility,\r\n-                      size: Dimensions.iconSize24, color: AppColor.textColor),\r\n-              onPressed: togglePasswordVisibility,\r\n-              // color: Colors.black,\r\n-            ),\r\n-          ),\r\n-          border: InputBorder.none,\r\n-        ),\r\n-        style:\r\n-            TextStyle(fontSize: Dimensions.font17, color: AppColor.textColor),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n-}\r\n"
                },
                {
                    "date": 1676025372234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,18 +86,18 @@\n           hintText: 'password',\r\n           hintStyle: const TextStyle(\r\n               fontFamily: 'OpenSans', color: AppColor.textColor),\r\n           suffixIcon: Padding(\r\n-            padding: EdgeInsets.only(right8),\r\n+            padding: EdgeInsets.only(right: 8),\r\n             child: IconButton(\r\n               icon: isHidden\r\n                   ? Icon(\r\n                       Icons.visibility_off,\r\n-                      size: Dimensions.iconSize24,\r\n+                      size: 24,\r\n                       color: AppColor.textColor,\r\n                     )\r\n                   : Icon(Icons.visibility,\r\n-                      size: Dimensions.iconSize24, color: AppColor.textColor),\r\n+                      size: 24, color: AppColor.textColor),\r\n               onPressed: togglePasswordVisibility,\r\n               // color: Colors.black,\r\n             ),\r\n           ),\r\n"
                },
                {
                    "date": 1676025377529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n           ),\r\n           border: InputBorder.none,\r\n         ),\r\n         style:\r\n-            TextStyle(fontSize: Dimensions.font17, color: AppColor.textColor),\r\n+            TextStyle(fontSize: 17, color: AppColor.textColor),\r\n       ),\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1676025398702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     Size size = MediaQuery.of(context).size;\r\n     return Container(\r\n       width: size.width * 0.9,\r\n       decoration: BoxDecoration(\r\n-        borderRadius: BorderRadius.circular(30),\r\n+        borderRadius: BorderRadius.circular(),\r\n       ),\r\n       child: TextFormField(\r\n         cursorColor: Colors.black12,\r\n         obscureText: isHidden,\r\n"
                },
                {
                    "date": 1676025424965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     Size size = MediaQuery.of(context).size;\r\n     return Container(\r\n       width: size.width * 0.9,\r\n       decoration: BoxDecoration(\r\n-        borderRadius: BorderRadius.circular(),\r\n+        borderRadius: BorderRadius.circular(15),\r\n       ),\r\n       child: TextFormField(\r\n         cursorColor: Colors.black12,\r\n         obscureText: isHidden,\r\n@@ -66,17 +66,15 @@\n                   const BorderSide(color: AppColor.kPrimaryColor, width: 2),\r\n               borderRadius: BorderRadius.circular(30)),\r\n           errorText: widget.validator != null ? null : widget.errorText,\r\n           errorStyle: TextStyle(fontSize: Dimensions.font14),\r\n-          errorBorder: OutlineInputBorder(\r\n-              borderSide: const BorderSide(color: Colors.red),\r\n-              borderRadius:\r\n-                  BorderRadius.all(Radius.circular(30))),\r\n-          focusedErrorBorder: OutlineInputBorder(\r\n-              borderSide: const BorderSide(color: Colors.red),\r\n-              borderRadius:\r\n-                  BorderRadius.all(Radius.circular(30))),\r\n-          prefixIcon: Padding(\r\n+          errorBorder: const OutlineInputBorder(\r\n+              borderSide: BorderSide(color: Colors.red),\r\n+              borderRadius: BorderRadius.all(Radius.circular(30))),\r\n+          focusedErrorBorder: const OutlineInputBorder(\r\n+              borderSide: BorderSide(color: Colors.red),\r\n+              borderRadius: BorderRadius.all(Radius.circular(30))),\r\n+          prefixIcon: const Padding(\r\n             padding: EdgeInsets.only(left: 8),\r\n             child: Icon(\r\n               size: 24,\r\n               Icons.lock,\r\n@@ -86,26 +84,25 @@\n           hintText: 'password',\r\n           hintStyle: const TextStyle(\r\n               fontFamily: 'OpenSans', color: AppColor.textColor),\r\n           suffixIcon: Padding(\r\n-            padding: EdgeInsets.only(right: 8),\r\n+            padding: const EdgeInsets.only(right: 8),\r\n             child: IconButton(\r\n               icon: isHidden\r\n-                  ? Icon(\r\n+                  ? const Icon(\r\n                       Icons.visibility_off,\r\n                       size: 24,\r\n                       color: AppColor.textColor,\r\n                     )\r\n-                  : Icon(Icons.visibility,\r\n+                  : const Icon(Icons.visibility,\r\n                       size: 24, color: AppColor.textColor),\r\n               onPressed: togglePasswordVisibility,\r\n               // color: Colors.black,\r\n             ),\r\n           ),\r\n           border: InputBorder.none,\r\n         ),\r\n-        style:\r\n-            TextStyle(fontSize: 17, color: AppColor.textColor),\r\n+        style: const TextStyle(fontSize: 17, color: AppColor.textColor),\r\n       ),\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1676025464676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n           // Return null if the entered password is valid\r\n           return null;\r\n         },\r\n         decoration: InputDecoration(\r\n-          contentPadding: EdgeInsets.symmetric(vertical: Dimensions.height22),\r\n+          contentPadding: EdgeInsets.symmetric(vertical: 22),\r\n           enabledBorder: OutlineInputBorder(\r\n             borderSide: const BorderSide(color: AppColor.bgFillColor, width: 2),\r\n             borderRadius: BorderRadius.circular(30),\r\n           ),\r\n"
                },
                {
                    "date": 1676025471656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,12 +53,12 @@\n           // Return null if the entered password is valid\r\n           return null;\r\n         },\r\n         decoration: InputDecoration(\r\n-          contentPadding: EdgeInsets.symmetric(vertical: 22),\r\n+          contentPadding: EdgeInsets.symmetric(vertical:11),\r\n           enabledBorder: OutlineInputBorder(\r\n             borderSide: const BorderSide(color: AppColor.bgFillColor, width: 2),\r\n-            borderRadius: BorderRadius.circular(30),\r\n+            borderRadius: BorderRadius.circular(15),\r\n           ),\r\n           filled: true,\r\n           fillColor: AppColor.bgFillColor,\r\n           focusedBorder: OutlineInputBorder(\r\n"
                },
                {
                    "date": 1676025477700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n           filled: true,\r\n           fillColor: AppColor.bgFillColor,\r\n           focusedBorder: OutlineInputBorder(\r\n               borderSide:\r\n-                  const BorderSide(color: AppColor.kPrimaryColor, width: 2),\r\n+                  const BorderSide(color: AppColor.kPrimaryColor, width: 1),\r\n               borderRadius: BorderRadius.circular(30)),\r\n           errorText: widget.validator != null ? null : widget.errorText,\r\n           errorStyle: TextStyle(fontSize: Dimensions.font14),\r\n           errorBorder: const OutlineInputBorder(\r\n"
                },
                {
                    "date": 1676025485770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,19 +55,19 @@\n         },\r\n         decoration: InputDecoration(\r\n           contentPadding: EdgeInsets.symmetric(vertical:11),\r\n           enabledBorder: OutlineInputBorder(\r\n-            borderSide: const BorderSide(color: AppColor.bgFillColor, width: 2),\r\n+            borderSide: const BorderSide(color: AppColor.bgFillColor, width: 1),\r\n             borderRadius: BorderRadius.circular(15),\r\n           ),\r\n           filled: true,\r\n           fillColor: AppColor.bgFillColor,\r\n           focusedBorder: OutlineInputBorder(\r\n               borderSide:\r\n                   const BorderSide(color: AppColor.kPrimaryColor, width: 1),\r\n-              borderRadius: BorderRadius.circular(30)),\r\n+              borderRadius: BorderRadius.circular(15)),\r\n           errorText: widget.validator != null ? null : widget.errorText,\r\n-          errorStyle: TextStyle(fontSize: Dimensions.font14),\r\n+          errorStyle: TextStyle(fontSize: 14),\r\n           errorBorder: const OutlineInputBorder(\r\n               borderSide: BorderSide(color: Colors.red),\r\n               borderRadius: BorderRadius.all(Radius.circular(30))),\r\n           focusedErrorBorder: const OutlineInputBorder(\r\n"
                },
                {
                    "date": 1676025494905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,12 +65,12 @@\n               borderSide:\r\n                   const BorderSide(color: AppColor.kPrimaryColor, width: 1),\r\n               borderRadius: BorderRadius.circular(15)),\r\n           errorText: widget.validator != null ? null : widget.errorText,\r\n-          errorStyle: TextStyle(fontSize: 14),\r\n+          errorStyle: TextStyle(fontSize:7),\r\n           errorBorder: const OutlineInputBorder(\r\n               borderSide: BorderSide(color: Colors.red),\r\n-              borderRadius: BorderRadius.all(Radius.circular(30))),\r\n+              borderRadius: BorderRadius.all(Radius.circular(15))),\r\n           focusedErrorBorder: const OutlineInputBorder(\r\n               borderSide: BorderSide(color: Colors.red),\r\n               borderRadius: BorderRadius.all(Radius.circular(30))),\r\n           prefixIcon: const Padding(\r\n"
                },
                {
                    "date": 1676025504081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:foodex_app/app/theme/constants.dart';\r\n+import 'package:foodex_app/app/utils/dimension.dart';\r\n+\r\n+class WearOsPasswordField extends StatefulWidget {\r\n+  const WearOsPasswordField(\r\n+      {Key? key,\r\n+      this.hintText,\r\n+      this.onChanged,\r\n+      this.validator,\r\n+      this.inputFormatter,\r\n+      this.errorText,\r\n+      this.controller})\r\n+      : super(key: key);\r\n+\r\n+  final String? hintText;\r\n+  final Function(String?)? onChanged;\r\n+  final String? Function(String?)? validator;\r\n+  final List<TextInputFormatter>? inputFormatter;\r\n+  final String? errorText;\r\n+  final controller;\r\n+\r\n+  @override\r\n+  State<WearOsPasswordField> createState() => _WearOsPasswordFieldState();\r\n+}\r\n+\r\n+class _WearOsPasswordFieldState extends State<WearOsPasswordField> {\r\n+  final TextEditingController controller = TextEditingController();\r\n+  bool isHidden = true;\r\n+  bool success = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    Size size = MediaQuery.of(context).size;\r\n+    return Container(\r\n+      width: size.width * 0.9,\r\n+      decoration: BoxDecoration(\r\n+        borderRadius: BorderRadius.circular(15),\r\n+      ),\r\n+      child: TextFormField(\r\n+        cursorColor: Colors.black12,\r\n+        obscureText: isHidden,\r\n+        controller: widget.controller,\r\n+        keyboardType: TextInputType.visiblePassword,\r\n+        validator: (value) {\r\n+          if (value == null || value.trim().isEmpty) {\r\n+            return 'Enter valid password';\r\n+          }\r\n+          if (value.trim().length < 8) {\r\n+            return 'Password must be at least 8 characters in length';\r\n+          }\r\n+          // Return null if the entered password is valid\r\n+          return null;\r\n+        },\r\n+        decoration: InputDecoration(\r\n+          contentPadding: EdgeInsets.symmetric(vertical:11),\r\n+          enabledBorder: OutlineInputBorder(\r\n+            borderSide: const BorderSide(color: AppColor.bgFillColor, width: 1),\r\n+            borderRadius: BorderRadius.circular(15),\r\n+          ),\r\n+          filled: true,\r\n+          fillColor: AppColor.bgFillColor,\r\n+          focusedBorder: OutlineInputBorder(\r\n+              borderSide:\r\n+                  const BorderSide(color: AppColor.kPrimaryColor, width: 1),\r\n+              borderRadius: BorderRadius.circular(15)),\r\n+          errorText: widget.validator != null ? null : widget.errorText,\r\n+          errorStyle: TextStyle(fontSize:7),\r\n+          errorBorder: const OutlineInputBorder(\r\n+              borderSide: BorderSide(color: Colors.red),\r\n+              borderRadius: BorderRadius.all(Radius.circular(15))),\r\n+          focusedErrorBorder: const OutlineInputBorder(\r\n+              borderSide: BorderSide(color: Colors.red),\r\n+              borderRadius: BorderRadius.all(Radius.circular(15))),\r\n+          prefixIcon: const Padding(\r\n+            padding: EdgeInsets.only(left:4),\r\n+            child: Icon(\r\n+              size: 24,\r\n+              Icons.lock,\r\n+              color: Colors.black,\r\n+            ),\r\n+          ),\r\n+          hintText: 'password',\r\n+          hintStyle: const TextStyle(\r\n+              fontFamily: 'OpenSans', color: AppColor.textColor),\r\n+          suffixIcon: Padding(\r\n+            padding: const EdgeInsets.only(right: 8),\r\n+            child: IconButton(\r\n+              icon: isHidden\r\n+                  ? const Icon(\r\n+                      Icons.visibility_off,\r\n+                      size: 24,\r\n+                      color: AppColor.textColor,\r\n+                    )\r\n+                  : const Icon(Icons.visibility,\r\n+                      size: 24, color: AppColor.textColor),\r\n+              onPressed: togglePasswordVisibility,\r\n+              // color: Colors.black,\r\n+            ),\r\n+          ),\r\n+          border: InputBorder.none,\r\n+        ),\r\n+        style: const TextStyle(fontSize: 17, color: AppColor.textColor),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n+}\r\n"
                },
                {
                    "date": 1676025511605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n           hintText: 'password',\r\n           hintStyle: const TextStyle(\r\n               fontFamily: 'OpenSans', color: AppColor.textColor),\r\n           suffixIcon: Padding(\r\n-            padding: const EdgeInsets.only(right: 8),\r\n+            padding: const EdgeInsets.only(right: ),\r\n             child: IconButton(\r\n               icon: isHidden\r\n                   ? const Icon(\r\n                       Icons.visibility_off,\r\n"
                },
                {
                    "date": 1676025517879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,23 +75,23 @@\n               borderRadius: BorderRadius.all(Radius.circular(15))),\r\n           prefixIcon: const Padding(\r\n             padding: EdgeInsets.only(left:4),\r\n             child: Icon(\r\n-              size: 24,\r\n+              size: 15,\r\n               Icons.lock,\r\n               color: Colors.black,\r\n             ),\r\n           ),\r\n           hintText: 'password',\r\n           hintStyle: const TextStyle(\r\n               fontFamily: 'OpenSans', color: AppColor.textColor),\r\n           suffixIcon: Padding(\r\n-            padding: const EdgeInsets.only(right: ),\r\n+            padding: const EdgeInsets.only(right: 4),\r\n             child: IconButton(\r\n               icon: isHidden\r\n                   ? const Icon(\r\n                       Icons.visibility_off,\r\n-                      size: 24,\r\n+                      size: ,\r\n                       color: AppColor.textColor,\r\n                     )\r\n                   : const Icon(Icons.visibility,\r\n                       size: 24, color: AppColor.textColor),\r\n@@ -107,114 +107,4 @@\n   }\r\n \r\n   void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n }\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:foodex_app/app/theme/constants.dart';\r\n-import 'package:foodex_app/app/utils/dimension.dart';\r\n-\r\n-class WearOsPasswordField extends StatefulWidget {\r\n-  const WearOsPasswordField(\r\n-      {Key? key,\r\n-      this.hintText,\r\n-      this.onChanged,\r\n-      this.validator,\r\n-      this.inputFormatter,\r\n-      this.errorText,\r\n-      this.controller})\r\n-      : super(key: key);\r\n-\r\n-  final String? hintText;\r\n-  final Function(String?)? onChanged;\r\n-  final String? Function(String?)? validator;\r\n-  final List<TextInputFormatter>? inputFormatter;\r\n-  final String? errorText;\r\n-  final controller;\r\n-\r\n-  @override\r\n-  State<WearOsPasswordField> createState() => _WearOsPasswordFieldState();\r\n-}\r\n-\r\n-class _WearOsPasswordFieldState extends State<WearOsPasswordField> {\r\n-  final TextEditingController controller = TextEditingController();\r\n-  bool isHidden = true;\r\n-  bool success = false;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    Size size = MediaQuery.of(context).size;\r\n-    return Container(\r\n-      width: size.width * 0.9,\r\n-      decoration: BoxDecoration(\r\n-        borderRadius: BorderRadius.circular(15),\r\n-      ),\r\n-      child: TextFormField(\r\n-        cursorColor: Colors.black12,\r\n-        obscureText: isHidden,\r\n-        controller: widget.controller,\r\n-        keyboardType: TextInputType.visiblePassword,\r\n-        validator: (value) {\r\n-          if (value == null || value.trim().isEmpty) {\r\n-            return 'Enter valid password';\r\n-          }\r\n-          if (value.trim().length < 8) {\r\n-            return 'Password must be at least 8 characters in length';\r\n-          }\r\n-          // Return null if the entered password is valid\r\n-          return null;\r\n-        },\r\n-        decoration: InputDecoration(\r\n-          contentPadding: EdgeInsets.symmetric(vertical:11),\r\n-          enabledBorder: OutlineInputBorder(\r\n-            borderSide: const BorderSide(color: AppColor.bgFillColor, width: 1),\r\n-            borderRadius: BorderRadius.circular(15),\r\n-          ),\r\n-          filled: true,\r\n-          fillColor: AppColor.bgFillColor,\r\n-          focusedBorder: OutlineInputBorder(\r\n-              borderSide:\r\n-                  const BorderSide(color: AppColor.kPrimaryColor, width: 1),\r\n-              borderRadius: BorderRadius.circular(15)),\r\n-          errorText: widget.validator != null ? null : widget.errorText,\r\n-          errorStyle: TextStyle(fontSize:7),\r\n-          errorBorder: const OutlineInputBorder(\r\n-              borderSide: BorderSide(color: Colors.red),\r\n-              borderRadius: BorderRadius.all(Radius.circular(15))),\r\n-          focusedErrorBorder: const OutlineInputBorder(\r\n-              borderSide: BorderSide(color: Colors.red),\r\n-              borderRadius: BorderRadius.all(Radius.circular(30))),\r\n-          prefixIcon: const Padding(\r\n-            padding: EdgeInsets.only(left: 8),\r\n-            child: Icon(\r\n-              size: 24,\r\n-              Icons.lock,\r\n-              color: Colors.black,\r\n-            ),\r\n-          ),\r\n-          hintText: 'password',\r\n-          hintStyle: const TextStyle(\r\n-              fontFamily: 'OpenSans', color: AppColor.textColor),\r\n-          suffixIcon: Padding(\r\n-            padding: const EdgeInsets.only(right: 8),\r\n-            child: IconButton(\r\n-              icon: isHidden\r\n-                  ? const Icon(\r\n-                      Icons.visibility_off,\r\n-                      size: 24,\r\n-                      color: AppColor.textColor,\r\n-                    )\r\n-                  : const Icon(Icons.visibility,\r\n-                      size: 24, color: AppColor.textColor),\r\n-              onPressed: togglePasswordVisibility,\r\n-              // color: Colors.black,\r\n-            ),\r\n-          ),\r\n-          border: InputBorder.none,\r\n-        ),\r\n-        style: const TextStyle(fontSize: 17, color: AppColor.textColor),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n-}\r\n"
                },
                {
                    "date": 1676025524670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,110 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+import 'package:foodex_app/app/theme/constants.dart';\r\n+import 'package:foodex_app/app/utils/dimension.dart';\r\n+\r\n+class WearOsPasswordField extends StatefulWidget {\r\n+  const WearOsPasswordField(\r\n+      {Key? key,\r\n+      this.hintText,\r\n+      this.onChanged,\r\n+      this.validator,\r\n+      this.inputFormatter,\r\n+      this.errorText,\r\n+      this.controller})\r\n+      : super(key: key);\r\n+\r\n+  final String? hintText;\r\n+  final Function(String?)? onChanged;\r\n+  final String? Function(String?)? validator;\r\n+  final List<TextInputFormatter>? inputFormatter;\r\n+  final String? errorText;\r\n+  final controller;\r\n+\r\n+  @override\r\n+  State<WearOsPasswordField> createState() => _WearOsPasswordFieldState();\r\n+}\r\n+\r\n+class _WearOsPasswordFieldState extends State<WearOsPasswordField> {\r\n+  final TextEditingController controller = TextEditingController();\r\n+  bool isHidden = true;\r\n+  bool success = false;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    Size size = MediaQuery.of(context).size;\r\n+    return Container(\r\n+      width: size.width * 0.9,\r\n+      decoration: BoxDecoration(\r\n+        borderRadius: BorderRadius.circular(15),\r\n+      ),\r\n+      child: TextFormField(\r\n+        cursorColor: Colors.black12,\r\n+        obscureText: isHidden,\r\n+        controller: widget.controller,\r\n+        keyboardType: TextInputType.visiblePassword,\r\n+        validator: (value) {\r\n+          if (value == null || value.trim().isEmpty) {\r\n+            return 'Enter valid password';\r\n+          }\r\n+          if (value.trim().length < 8) {\r\n+            return 'Password must be at least 8 characters in length';\r\n+          }\r\n+          // Return null if the entered password is valid\r\n+          return null;\r\n+        },\r\n+        decoration: InputDecoration(\r\n+          contentPadding: EdgeInsets.symmetric(vertical:11),\r\n+          enabledBorder: OutlineInputBorder(\r\n+            borderSide: const BorderSide(color: AppColor.bgFillColor, width: 1),\r\n+            borderRadius: BorderRadius.circular(15),\r\n+          ),\r\n+          filled: true,\r\n+          fillColor: AppColor.bgFillColor,\r\n+          focusedBorder: OutlineInputBorder(\r\n+              borderSide:\r\n+                  const BorderSide(color: AppColor.kPrimaryColor, width: 1),\r\n+              borderRadius: BorderRadius.circular(15)),\r\n+          errorText: widget.validator != null ? null : widget.errorText,\r\n+          errorStyle: TextStyle(fontSize:7),\r\n+          errorBorder: const OutlineInputBorder(\r\n+              borderSide: BorderSide(color: Colors.red),\r\n+              borderRadius: BorderRadius.all(Radius.circular(15))),\r\n+          focusedErrorBorder: const OutlineInputBorder(\r\n+              borderSide: BorderSide(color: Colors.red),\r\n+              borderRadius: BorderRadius.all(Radius.circular(15))),\r\n+          prefixIcon: const Padding(\r\n+            padding: EdgeInsets.only(left:4),\r\n+            child: Icon(\r\n+              size: 15,\r\n+              Icons.lock,\r\n+              color: Colors.black,\r\n+            ),\r\n+          ),\r\n+          hintText: 'password',\r\n+          hintStyle: const TextStyle(\r\n+              fontFamily: 'OpenSans', color: AppColor.textColor),\r\n+          suffixIcon: Padding(\r\n+            padding: const EdgeInsets.only(right: 4),\r\n+            child: IconButton(\r\n+              icon: isHidden\r\n+                  ? const Icon(\r\n+                      Icons.visibility_off,\r\n+                      size: 15,\r\n+                      color: AppColor.textColor,\r\n+                    )\r\n+                  : const Icon(Icons.visibility,\r\n+                      size: 15, color: AppColor.textColor),\r\n+              onPressed: togglePasswordVisibility,\r\n+              // color: Colors.black,\r\n+            ),\r\n+          ),\r\n+          border: InputBorder.none,\r\n+        ),\r\n+        style: const TextStyle(fontSize: 17, color: AppColor.textColor),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n+}\r\n"
                },
                {
                    "date": 1676025543390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n           hintText: 'password',\r\n           hintStyle: const TextStyle(\r\n               fontFamily: 'OpenSans', color: AppColor.textColor),\r\n           suffixIcon: Padding(\r\n-            padding: const EdgeInsets.only(right: 4),\r\n+            padding: const EdgeInsets.only(right: 2),\r\n             child: IconButton(\r\n               icon: isHidden\r\n                   ? const Icon(\r\n                       Icons.visibility_off,\r\n"
                },
                {
                    "date": 1676025579253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'package:flutter/material.dart';\r\n import 'package:flutter/services.dart';\r\n import 'package:foodex_app/app/theme/constants.dart';\r\n-import 'package:foodex_app/app/utils/dimension.dart';\r\n \r\n class WearOsPasswordField extends StatefulWidget {\r\n   const WearOsPasswordField(\r\n       {Key? key,\r\n@@ -35,9 +34,9 @@\n     Size size = MediaQuery.of(context).size;\r\n     return Container(\r\n       width: size.width * 0.9,\r\n       decoration: BoxDecoration(\r\n-        borderRadius: BorderRadius.circular(15),\r\n+        borderRadius: BorderRadius.circular(10),\r\n       ),\r\n       child: TextFormField(\r\n         cursorColor: Colors.black12,\r\n         obscureText: isHidden,\r\n@@ -53,9 +52,9 @@\n           // Return null if the entered password is valid\r\n           return null;\r\n         },\r\n         decoration: InputDecoration(\r\n-          contentPadding: EdgeInsets.symmetric(vertical:11),\r\n+          contentPadding: const EdgeInsets.symmetric(vertical: 11),\r\n           enabledBorder: OutlineInputBorder(\r\n             borderSide: const BorderSide(color: AppColor.bgFillColor, width: 1),\r\n             borderRadius: BorderRadius.circular(15),\r\n           ),\r\n@@ -65,17 +64,17 @@\n               borderSide:\r\n                   const BorderSide(color: AppColor.kPrimaryColor, width: 1),\r\n               borderRadius: BorderRadius.circular(15)),\r\n           errorText: widget.validator != null ? null : widget.errorText,\r\n-          errorStyle: TextStyle(fontSize:7),\r\n+          errorStyle: const TextStyle(fontSize: 7),\r\n           errorBorder: const OutlineInputBorder(\r\n               borderSide: BorderSide(color: Colors.red),\r\n               borderRadius: BorderRadius.all(Radius.circular(15))),\r\n           focusedErrorBorder: const OutlineInputBorder(\r\n               borderSide: BorderSide(color: Colors.red),\r\n               borderRadius: BorderRadius.all(Radius.circular(15))),\r\n           prefixIcon: const Padding(\r\n-            padding: EdgeInsets.only(left:4),\r\n+            padding: EdgeInsets.only(left: 4),\r\n             child: Icon(\r\n               size: 15,\r\n               Icons.lock,\r\n               color: Colors.black,\r\n@@ -107,114 +106,4 @@\n   }\r\n \r\n   void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n }\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-import 'package:foodex_app/app/theme/constants.dart';\r\n-import 'package:foodex_app/app/utils/dimension.dart';\r\n-\r\n-class WearOsPasswordField extends StatefulWidget {\r\n-  const WearOsPasswordField(\r\n-      {Key? key,\r\n-      this.hintText,\r\n-      this.onChanged,\r\n-      this.validator,\r\n-      this.inputFormatter,\r\n-      this.errorText,\r\n-      this.controller})\r\n-      : super(key: key);\r\n-\r\n-  final String? hintText;\r\n-  final Function(String?)? onChanged;\r\n-  final String? Function(String?)? validator;\r\n-  final List<TextInputFormatter>? inputFormatter;\r\n-  final String? errorText;\r\n-  final controller;\r\n-\r\n-  @override\r\n-  State<WearOsPasswordField> createState() => _WearOsPasswordFieldState();\r\n-}\r\n-\r\n-class _WearOsPasswordFieldState extends State<WearOsPasswordField> {\r\n-  final TextEditingController controller = TextEditingController();\r\n-  bool isHidden = true;\r\n-  bool success = false;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    Size size = MediaQuery.of(context).size;\r\n-    return Container(\r\n-      width: size.width * 0.9,\r\n-      decoration: BoxDecoration(\r\n-        borderRadius: BorderRadius.circular(15),\r\n-      ),\r\n-      child: TextFormField(\r\n-        cursorColor: Colors.black12,\r\n-        obscureText: isHidden,\r\n-        controller: widget.controller,\r\n-        keyboardType: TextInputType.visiblePassword,\r\n-        validator: (value) {\r\n-          if (value == null || value.trim().isEmpty) {\r\n-            return 'Enter valid password';\r\n-          }\r\n-          if (value.trim().length < 8) {\r\n-            return 'Password must be at least 8 characters in length';\r\n-          }\r\n-          // Return null if the entered password is valid\r\n-          return null;\r\n-        },\r\n-        decoration: InputDecoration(\r\n-          contentPadding: EdgeInsets.symmetric(vertical:11),\r\n-          enabledBorder: OutlineInputBorder(\r\n-            borderSide: const BorderSide(color: AppColor.bgFillColor, width: 1),\r\n-            borderRadius: BorderRadius.circular(15),\r\n-          ),\r\n-          filled: true,\r\n-          fillColor: AppColor.bgFillColor,\r\n-          focusedBorder: OutlineInputBorder(\r\n-              borderSide:\r\n-                  const BorderSide(color: AppColor.kPrimaryColor, width: 1),\r\n-              borderRadius: BorderRadius.circular(15)),\r\n-          errorText: widget.validator != null ? null : widget.errorText,\r\n-          errorStyle: TextStyle(fontSize:7),\r\n-          errorBorder: const OutlineInputBorder(\r\n-              borderSide: BorderSide(color: Colors.red),\r\n-              borderRadius: BorderRadius.all(Radius.circular(15))),\r\n-          focusedErrorBorder: const OutlineInputBorder(\r\n-              borderSide: BorderSide(color: Colors.red),\r\n-              borderRadius: BorderRadius.all(Radius.circular(15))),\r\n-          prefixIcon: const Padding(\r\n-            padding: EdgeInsets.only(left:4),\r\n-            child: Icon(\r\n-              size: 15,\r\n-              Icons.lock,\r\n-              color: Colors.black,\r\n-            ),\r\n-          ),\r\n-          hintText: 'password',\r\n-          hintStyle: const TextStyle(\r\n-              fontFamily: 'OpenSans', color: AppColor.textColor),\r\n-          suffixIcon: Padding(\r\n-            padding: const EdgeInsets.only(right: 4),\r\n-            child: IconButton(\r\n-              icon: isHidden\r\n-                  ? const Icon(\r\n-                      Icons.visibility_off,\r\n-                      size: ,\r\n-                      color: AppColor.textColor,\r\n-                    )\r\n-                  : const Icon(Icons.visibility,\r\n-                      size: 24, color: AppColor.textColor),\r\n-              onPressed: togglePasswordVisibility,\r\n-              // color: Colors.black,\r\n-            ),\r\n-          ),\r\n-          border: InputBorder.none,\r\n-        ),\r\n-        style: const TextStyle(fontSize: 17, color: AppColor.textColor),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n-}\r\n"
                },
                {
                    "date": 1676025592360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n           // Return null if the entered password is valid\r\n           return null;\r\n         },\r\n         decoration: InputDecoration(\r\n-          contentPadding: const EdgeInsets.symmetric(vertical: 1),\r\n+          contentPadding: const EdgeInsets.symmetric(vertical: 10),\r\n           enabledBorder: OutlineInputBorder(\r\n             borderSide: const BorderSide(color: AppColor.bgFillColor, width: 1),\r\n             borderRadius: BorderRadius.circular(15),\r\n           ),\r\n"
                },
                {
                    "date": 1676025603583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n           fillColor: AppColor.bgFillColor,\r\n           focusedBorder: OutlineInputBorder(\r\n               borderSide:\r\n                   const BorderSide(color: AppColor.kPrimaryColor, width: 1),\r\n-              borderRadius: BorderRadius.circular(15)),\r\n+              borderRadius: BorderRadius.circular(10)),\r\n           errorText: widget.validator != null ? null : widget.errorText,\r\n           errorStyle: const TextStyle(fontSize: 7),\r\n           errorBorder: const OutlineInputBorder(\r\n               borderSide: BorderSide(color: Colors.red),\r\n"
                }
            ],
            "date": 1676024973085,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:foodex_app/app/utils/dimension.dart';\r\n\r\nimport '../app/theme/constants.dart';\r\n\r\nclass PasswordField extends StatefulWidget {\r\n  const PasswordField(\r\n      {Key? key,\r\n      this.hintText,\r\n      this.onChanged,\r\n      this.validator,\r\n      this.inputFormatter,\r\n      this.errorText,\r\n      this.controller})\r\n      : super(key: key);\r\n\r\n  final String? hintText;\r\n  final Function(String?)? onChanged;\r\n  final String? Function(String?)? validator;\r\n  final List<TextInputFormatter>? inputFormatter;\r\n  final String? errorText;\r\n  final controller;\r\n\r\n  @override\r\n  State<PasswordField> createState() => _PasswordFieldState();\r\n}\r\n\r\nclass _PasswordFieldState extends State<PasswordField> {\r\n  final TextEditingController controller = TextEditingController();\r\n  bool isHidden = true;\r\n  bool success = false;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    Size size = MediaQuery.of(context).size;\r\n    return Container(\r\n      width: size.width * 0.8,\r\n      decoration: BoxDecoration(\r\n        borderRadius: BorderRadius.circular(Dimensions.radius30),\r\n      ),\r\n      child: TextFormField(\r\n        cursorColor: Colors.black12,\r\n        obscureText: isHidden,\r\n        controller: widget.controller,\r\n        keyboardType: TextInputType.visiblePassword,\r\n        validator: (value) {\r\n          if (value == null || value.trim().isEmpty) {\r\n            return 'Enter valid password';\r\n          }\r\n          if (value.trim().length < 8) {\r\n            return 'Password must be at least 8 characters in length';\r\n          }\r\n          // Return null if the entered password is valid\r\n          return null;\r\n        },\r\n        decoration: InputDecoration(\r\n          contentPadding: EdgeInsets.symmetric(vertical: Dimensions.height22),\r\n          enabledBorder: OutlineInputBorder(\r\n            borderSide: const BorderSide(color: AppColor.bgFillColor, width: 2),\r\n            borderRadius: BorderRadius.circular(Dimensions.radius30),\r\n          ),\r\n          filled: true,\r\n          fillColor: AppColor.bgFillColor,\r\n          focusedBorder: OutlineInputBorder(\r\n              borderSide:\r\n                  const BorderSide(color: AppColor.kPrimaryColor, width: 2),\r\n              borderRadius: BorderRadius.circular(Dimensions.radius30)),\r\n          errorText: widget.validator != null ? null : widget.errorText,\r\n          errorStyle: TextStyle(fontSize: Dimensions.font14),\r\n          errorBorder: OutlineInputBorder(\r\n              borderSide: const BorderSide(color: Colors.red),\r\n              borderRadius:\r\n                  BorderRadius.all(Radius.circular(Dimensions.radius30))),\r\n          focusedErrorBorder: OutlineInputBorder(\r\n              borderSide: const BorderSide(color: Colors.red),\r\n              borderRadius:\r\n                  BorderRadius.all(Radius.circular(Dimensions.radius30))),\r\n          prefixIcon: Padding(\r\n            padding: EdgeInsets.only(left: Dimensions.height8),\r\n            child: Icon(\r\n              size: Dimensions.iconSize24,\r\n              Icons.lock,\r\n              color: Colors.black,\r\n            ),\r\n          ),\r\n          hintText: 'password',\r\n          hintStyle: const TextStyle(\r\n              fontFamily: 'OpenSans', color: AppColor.textColor),\r\n          suffixIcon: Padding(\r\n            padding: EdgeInsets.only(right: Dimensions.height8),\r\n            child: IconButton(\r\n              icon: isHidden\r\n                  ? Icon(\r\n                      Icons.visibility_off,\r\n                      size: Dimensions.iconSize24,\r\n                      color: AppColor.textColor,\r\n                    )\r\n                  : Icon(Icons.visibility,\r\n                      size: Dimensions.iconSize24, color: AppColor.textColor),\r\n              onPressed: togglePasswordVisibility,\r\n              // color: Colors.black,\r\n            ),\r\n          ),\r\n          border: InputBorder.none,\r\n        ),\r\n        style:\r\n            TextStyle(fontSize: Dimensions.font17, color: AppColor.textColor),\r\n      ),\r\n    );\r\n  }\r\n\r\n  void togglePasswordVisibility() => setState(() => isHidden = !isHidden);\r\n}\r\n"
        }
    ]
}