{
    "sourceFile": "lib/data/remote_data_source/api/food_api.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1675871722674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1675874971720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,5 +95,18 @@\n       print(exception);\r\n     }\r\n     return foodResponse;\r\n   }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+  \r\n }\r\n"
                },
                {
                    "date": 1675874977511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/app/constraints/api_url.dart';\r\n+import 'package:foodex_app/app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n+import 'package:foodex_app/response/food_response.dart';\r\n+import 'package:foodex_app/response/single_food_response.dart';\r\n+import 'package:http_parser/http_parser.dart';\r\n+import 'package:mime/mime.dart';\r\n+\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    MultipartFile? foodFinalImageFile;\r\n+    if (file != null) {\r\n+      var filePath = file.path;\r\n+\r\n+      // it is used to check only for images like: jpg, png, jpeg\r\n+      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n+      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n+      var mimeType = lookupMimeType(filePath);\r\n+\r\n+      // image path: -->I:\\final_api\\images\\\r\n+      // file name: --> chat.png\r\n+      // absolute path: --> image path + file name\r\n+      // absolute path:--> I:\\final_api\\images\\chat.png\r\n+      var image = await MultipartFile.fromFile(filePath,\r\n+          filename: filePath.split(\"/\").last,\r\n+          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n+      foodFinalImageFile = image;\r\n+    }\r\n+    try {\r\n+      // dio ko response\r\n+      Map<String, dynamic> foodMap = {\r\n+        \"name\": food.title,\r\n+        \"description\": food.description,\r\n+        \"image\": foodFinalImageFile,\r\n+        \"price\": food.price,\r\n+      };\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n+          options: Options(headers: {\r\n+            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n+          }));\r\n+\r\n+      final FoodResponse foodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (foodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return isFoodAdded;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(foodUrl);\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n+    SingleFoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n+      // response.data\r\n+      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+    Future<ProductResponse?> getAllCategoryProduct(String categoryId) async {\r\n+    ProductResponse? productResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n+      // response.data\r\n+      productResponse = ProductResponse.fromJson(response.data);\r\n+      if (productResponse.success == true) {\r\n+        return productResponse;\r\n+      } else {\r\n+        productResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return productResponse;\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1675874984850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/app/constraints/api_url.dart';\r\n+import 'package:foodex_app/app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n+import 'package:foodex_app/response/food_response.dart';\r\n+import 'package:foodex_app/response/single_food_response.dart';\r\n+import 'package:http_parser/http_parser.dart';\r\n+import 'package:mime/mime.dart';\r\n+\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    MultipartFile? foodFinalImageFile;\r\n+    if (file != null) {\r\n+      var filePath = file.path;\r\n+\r\n+      // it is used to check only for images like: jpg, png, jpeg\r\n+      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n+      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n+      var mimeType = lookupMimeType(filePath);\r\n+\r\n+      // image path: -->I:\\final_api\\images\\\r\n+      // file name: --> chat.png\r\n+      // absolute path: --> image path + file name\r\n+      // absolute path:--> I:\\final_api\\images\\chat.png\r\n+      var image = await MultipartFile.fromFile(filePath,\r\n+          filename: filePath.split(\"/\").last,\r\n+          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n+      foodFinalImageFile = image;\r\n+    }\r\n+    try {\r\n+      // dio ko response\r\n+      Map<String, dynamic> foodMap = {\r\n+        \"name\": food.title,\r\n+        \"description\": food.description,\r\n+        \"image\": foodFinalImageFile,\r\n+        \"price\": food.price,\r\n+      };\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n+          options: Options(headers: {\r\n+            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n+          }));\r\n+\r\n+      final FoodResponse foodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (foodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return isFoodAdded;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(foodUrl);\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n+    SingleFoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n+      // response.data\r\n+      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+    Future<FoodResponse?> getAllCategoryProduct(String categoryId) async {\r\n+    ProductResponse? productResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n+      // response.data\r\n+      productResponse = ProductResponse.fromJson(response.data);\r\n+      if (productResponse.success == true) {\r\n+        return productResponse;\r\n+      } else {\r\n+        productResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return productResponse;\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1675874991192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/app/constraints/api_url.dart';\r\n+import 'package:foodex_app/app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n+import 'package:foodex_app/response/food_response.dart';\r\n+import 'package:foodex_app/response/single_food_response.dart';\r\n+import 'package:http_parser/http_parser.dart';\r\n+import 'package:mime/mime.dart';\r\n+\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    MultipartFile? foodFinalImageFile;\r\n+    if (file != null) {\r\n+      var filePath = file.path;\r\n+\r\n+      // it is used to check only for images like: jpg, png, jpeg\r\n+      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n+      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n+      var mimeType = lookupMimeType(filePath);\r\n+\r\n+      // image path: -->I:\\final_api\\images\\\r\n+      // file name: --> chat.png\r\n+      // absolute path: --> image path + file name\r\n+      // absolute path:--> I:\\final_api\\images\\chat.png\r\n+      var image = await MultipartFile.fromFile(filePath,\r\n+          filename: filePath.split(\"/\").last,\r\n+          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n+      foodFinalImageFile = image;\r\n+    }\r\n+    try {\r\n+      // dio ko response\r\n+      Map<String, dynamic> foodMap = {\r\n+        \"name\": food.title,\r\n+        \"description\": food.description,\r\n+        \"image\": foodFinalImageFile,\r\n+        \"price\": food.price,\r\n+      };\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n+          options: Options(headers: {\r\n+            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n+          }));\r\n+\r\n+      final FoodResponse foodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (foodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return isFoodAdded;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(foodUrl);\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n+    SingleFoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n+      // response.data\r\n+      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+    Future<FoodResponse?> getAllCategoryProduct(String categoryId) async {\r\n+    FoodResponse? productResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n+      // response.data\r\n+      productResponse = ProductResponse.fromJson(response.data);\r\n+      if (productResponse.success == true) {\r\n+        return productResponse;\r\n+      } else {\r\n+        productResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return productResponse;\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1675875000230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/app/constraints/api_url.dart';\r\n+import 'package:foodex_app/app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n+import 'package:foodex_app/response/food_response.dart';\r\n+import 'package:foodex_app/response/single_food_response.dart';\r\n+import 'package:http_parser/http_parser.dart';\r\n+import 'package:mime/mime.dart';\r\n+\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    MultipartFile? foodFinalImageFile;\r\n+    if (file != null) {\r\n+      var filePath = file.path;\r\n+\r\n+      // it is used to check only for images like: jpg, png, jpeg\r\n+      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n+      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n+      var mimeType = lookupMimeType(filePath);\r\n+\r\n+      // image path: -->I:\\final_api\\images\\\r\n+      // file name: --> chat.png\r\n+      // absolute path: --> image path + file name\r\n+      // absolute path:--> I:\\final_api\\images\\chat.png\r\n+      var image = await MultipartFile.fromFile(filePath,\r\n+          filename: filePath.split(\"/\").last,\r\n+          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n+      foodFinalImageFile = image;\r\n+    }\r\n+    try {\r\n+      // dio ko response\r\n+      Map<String, dynamic> foodMap = {\r\n+        \"name\": food.title,\r\n+        \"description\": food.description,\r\n+        \"image\": foodFinalImageFile,\r\n+        \"price\": food.price,\r\n+      };\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n+          options: Options(headers: {\r\n+            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n+          }));\r\n+\r\n+      final FoodResponse foodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (foodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return isFoodAdded;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(foodUrl);\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n+    SingleFoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n+      // response.data\r\n+      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+    Future<FoodResponse?> getAllCategory(String categoryId) async {\r\n+    FoodResponse? productResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n+      // response.data\r\n+      productResponse = ProductResponse.fromJson(response.data);\r\n+      if (productResponse.success == true) {\r\n+        return productResponse;\r\n+      } else {\r\n+        productResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return productResponse;\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1675875020666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/app/constraints/api_url.dart';\r\n+import 'package:foodex_app/app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n+import 'package:foodex_app/response/food_response.dart';\r\n+import 'package:foodex_app/response/single_food_response.dart';\r\n+import 'package:http_parser/http_parser.dart';\r\n+import 'package:mime/mime.dart';\r\n+\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    MultipartFile? foodFinalImageFile;\r\n+    if (file != null) {\r\n+      var filePath = file.path;\r\n+\r\n+      // it is used to check only for images like: jpg, png, jpeg\r\n+      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n+      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n+      var mimeType = lookupMimeType(filePath);\r\n+\r\n+      // image path: -->I:\\final_api\\images\\\r\n+      // file name: --> chat.png\r\n+      // absolute path: --> image path + file name\r\n+      // absolute path:--> I:\\final_api\\images\\chat.png\r\n+      var image = await MultipartFile.fromFile(filePath,\r\n+          filename: filePath.split(\"/\").last,\r\n+          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n+      foodFinalImageFile = image;\r\n+    }\r\n+    try {\r\n+      // dio ko response\r\n+      Map<String, dynamic> foodMap = {\r\n+        \"name\": food.title,\r\n+        \"description\": food.description,\r\n+        \"image\": foodFinalImageFile,\r\n+        \"price\": food.price,\r\n+      };\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n+          options: Options(headers: {\r\n+            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n+          }));\r\n+\r\n+      final FoodResponse foodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (foodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return isFoodAdded;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(foodUrl);\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n+    SingleFoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n+      // response.data\r\n+      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+    Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n+      // response.data\r\n+      foodResponse = ProductResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1675875087500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/app/constraints/api_url.dart';\r\n+import 'package:foodex_app/app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n+import 'package:foodex_app/response/food_response.dart';\r\n+import 'package:foodex_app/response/single_food_response.dart';\r\n+import 'package:http_parser/http_parser.dart';\r\n+import 'package:mime/mime.dart';\r\n+\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    MultipartFile? foodFinalImageFile;\r\n+    if (file != null) {\r\n+      var filePath = file.path;\r\n+\r\n+      // it is used to check only for images like: jpg, png, jpeg\r\n+      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n+      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n+      var mimeType = lookupMimeType(filePath);\r\n+\r\n+      // image path: -->I:\\final_api\\images\\\r\n+      // file name: --> chat.png\r\n+      // absolute path: --> image path + file name\r\n+      // absolute path:--> I:\\final_api\\images\\chat.png\r\n+      var image = await MultipartFile.fromFile(filePath,\r\n+          filename: filePath.split(\"/\").last,\r\n+          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n+      foodFinalImageFile = image;\r\n+    }\r\n+    try {\r\n+      // dio ko response\r\n+      Map<String, dynamic> foodMap = {\r\n+        \"name\": food.title,\r\n+        \"description\": food.description,\r\n+        \"image\": foodFinalImageFile,\r\n+        \"price\": food.price,\r\n+      };\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n+          options: Options(headers: {\r\n+            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n+          }));\r\n+\r\n+      final FoodResponse foodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (foodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return isFoodAdded;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(foodUrl);\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n+    SingleFoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n+      // response.data\r\n+      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+    Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodCategoryUrl/getSingle/$categoryId\");\r\n+      // response.data\r\n+      foodResponse = ProductResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1675875102222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/app/constraints/api_url.dart';\r\n+import 'package:foodex_app/app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n+import 'package:foodex_app/response/food_response.dart';\r\n+import 'package:foodex_app/response/single_food_response.dart';\r\n+import 'package:http_parser/http_parser.dart';\r\n+import 'package:mime/mime.dart';\r\n+\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    MultipartFile? foodFinalImageFile;\r\n+    if (file != null) {\r\n+      var filePath = file.path;\r\n+\r\n+      // it is used to check only for images like: jpg, png, jpeg\r\n+      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n+      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n+      var mimeType = lookupMimeType(filePath);\r\n+\r\n+      // image path: -->I:\\final_api\\images\\\r\n+      // file name: --> chat.png\r\n+      // absolute path: --> image path + file name\r\n+      // absolute path:--> I:\\final_api\\images\\chat.png\r\n+      var image = await MultipartFile.fromFile(filePath,\r\n+          filename: filePath.split(\"/\").last,\r\n+          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n+      foodFinalImageFile = image;\r\n+    }\r\n+    try {\r\n+      // dio ko response\r\n+      Map<String, dynamic> foodMap = {\r\n+        \"name\": food.title,\r\n+        \"description\": food.description,\r\n+        \"image\": foodFinalImageFile,\r\n+        \"price\": food.price,\r\n+      };\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n+          options: Options(headers: {\r\n+            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n+          }));\r\n+\r\n+      final FoodResponse foodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (foodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return isFoodAdded;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(foodUrl);\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n+    SingleFoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n+      // response.data\r\n+      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+    Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodCategoryUrl/getSingle/$categoryId\");\r\n+      // response.data\r\n+      foodResponse = .fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1675875108575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n     try {\r\n       // dio ko response --> server le dine\r\n       Response response = await dio.get(\"$foodCategoryUrl/getSingle/$categoryId\");\r\n       // response.data\r\n-      foodResponse = .fromJson(response.data);\r\n+      foodResponse = Food.fromJson(response.data);\r\n       if (foodResponse.success == true) {\r\n         return foodResponse;\r\n       } else {\r\n         foodResponse = null;\r\n@@ -121,860 +121,4 @@\n \r\n \r\n \r\n }\r\n-import 'dart:io';\r\n-import 'package:dio/dio.dart';\r\n-import 'package:foodex_app/app/constraints/api_url.dart';\r\n-import 'package:foodex_app/app/constraints/http_services.dart';\r\n-import 'package:foodex_app/model/food.dart';\r\n-import 'package:foodex_app/response/food_response.dart';\r\n-import 'package:foodex_app/response/single_food_response.dart';\r\n-import 'package:http_parser/http_parser.dart';\r\n-import 'package:mime/mime.dart';\r\n-\r\n-class FoodAPI {\r\n-  Future<bool> addFood(File? file, Food food) async {\r\n-    bool isFoodAdded = false;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? foodFinalImageFile;\r\n-    if (file != null) {\r\n-      var filePath = file.path;\r\n-\r\n-      // it is used to check only for images like: jpg, png, jpeg\r\n-      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n-      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n-      var mimeType = lookupMimeType(filePath);\r\n-\r\n-      // image path: -->I:\\final_api\\images\\\r\n-      // file name: --> chat.png\r\n-      // absolute path: --> image path + file name\r\n-      // absolute path:--> I:\\final_api\\images\\chat.png\r\n-      var image = await MultipartFile.fromFile(filePath,\r\n-          filename: filePath.split(\"/\").last,\r\n-          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      foodFinalImageFile = image;\r\n-    }\r\n-    try {\r\n-      // dio ko response\r\n-      Map<String, dynamic> foodMap = {\r\n-        \"name\": food.title,\r\n-        \"description\": food.description,\r\n-        \"image\": foodFinalImageFile,\r\n-        \"price\": food.price,\r\n-      };\r\n-      var foodFormData = FormData.fromMap(foodMap);\r\n-      Response response = await dio.post(foodUrl,\r\n-          data: foodFormData,\r\n-          options: Options(headers: {\r\n-            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n-          }));\r\n-\r\n-      final FoodResponse foodResponseData =\r\n-          FoodResponse.fromJson(response.data);\r\n-      if (foodResponseData.success == true) {\r\n-        isFoodAdded = true;\r\n-        return isFoodAdded;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return isFoodAdded;\r\n-  }\r\n-\r\n-  Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(foodUrl);\r\n-      // response.data\r\n-      foodResponse = FoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n-    SingleFoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n-      // response.data\r\n-      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-    Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodCategoryUrl/getSingle/$categoryId\");\r\n-      // response.data\r\n-      foodResponse = ProductResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n-import 'dart:io';\r\n-import 'package:dio/dio.dart';\r\n-import 'package:foodex_app/app/constraints/api_url.dart';\r\n-import 'package:foodex_app/app/constraints/http_services.dart';\r\n-import 'package:foodex_app/model/food.dart';\r\n-import 'package:foodex_app/response/food_response.dart';\r\n-import 'package:foodex_app/response/single_food_response.dart';\r\n-import 'package:http_parser/http_parser.dart';\r\n-import 'package:mime/mime.dart';\r\n-\r\n-class FoodAPI {\r\n-  Future<bool> addFood(File? file, Food food) async {\r\n-    bool isFoodAdded = false;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? foodFinalImageFile;\r\n-    if (file != null) {\r\n-      var filePath = file.path;\r\n-\r\n-      // it is used to check only for images like: jpg, png, jpeg\r\n-      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n-      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n-      var mimeType = lookupMimeType(filePath);\r\n-\r\n-      // image path: -->I:\\final_api\\images\\\r\n-      // file name: --> chat.png\r\n-      // absolute path: --> image path + file name\r\n-      // absolute path:--> I:\\final_api\\images\\chat.png\r\n-      var image = await MultipartFile.fromFile(filePath,\r\n-          filename: filePath.split(\"/\").last,\r\n-          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      foodFinalImageFile = image;\r\n-    }\r\n-    try {\r\n-      // dio ko response\r\n-      Map<String, dynamic> foodMap = {\r\n-        \"name\": food.title,\r\n-        \"description\": food.description,\r\n-        \"image\": foodFinalImageFile,\r\n-        \"price\": food.price,\r\n-      };\r\n-      var foodFormData = FormData.fromMap(foodMap);\r\n-      Response response = await dio.post(foodUrl,\r\n-          data: foodFormData,\r\n-          options: Options(headers: {\r\n-            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n-          }));\r\n-\r\n-      final FoodResponse foodResponseData =\r\n-          FoodResponse.fromJson(response.data);\r\n-      if (foodResponseData.success == true) {\r\n-        isFoodAdded = true;\r\n-        return isFoodAdded;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return isFoodAdded;\r\n-  }\r\n-\r\n-  Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(foodUrl);\r\n-      // response.data\r\n-      foodResponse = FoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n-    SingleFoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n-      // response.data\r\n-      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-    Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n-      // response.data\r\n-      foodResponse = ProductResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n-import 'dart:io';\r\n-import 'package:dio/dio.dart';\r\n-import 'package:foodex_app/app/constraints/api_url.dart';\r\n-import 'package:foodex_app/app/constraints/http_services.dart';\r\n-import 'package:foodex_app/model/food.dart';\r\n-import 'package:foodex_app/response/food_response.dart';\r\n-import 'package:foodex_app/response/single_food_response.dart';\r\n-import 'package:http_parser/http_parser.dart';\r\n-import 'package:mime/mime.dart';\r\n-\r\n-class FoodAPI {\r\n-  Future<bool> addFood(File? file, Food food) async {\r\n-    bool isFoodAdded = false;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? foodFinalImageFile;\r\n-    if (file != null) {\r\n-      var filePath = file.path;\r\n-\r\n-      // it is used to check only for images like: jpg, png, jpeg\r\n-      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n-      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n-      var mimeType = lookupMimeType(filePath);\r\n-\r\n-      // image path: -->I:\\final_api\\images\\\r\n-      // file name: --> chat.png\r\n-      // absolute path: --> image path + file name\r\n-      // absolute path:--> I:\\final_api\\images\\chat.png\r\n-      var image = await MultipartFile.fromFile(filePath,\r\n-          filename: filePath.split(\"/\").last,\r\n-          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      foodFinalImageFile = image;\r\n-    }\r\n-    try {\r\n-      // dio ko response\r\n-      Map<String, dynamic> foodMap = {\r\n-        \"name\": food.title,\r\n-        \"description\": food.description,\r\n-        \"image\": foodFinalImageFile,\r\n-        \"price\": food.price,\r\n-      };\r\n-      var foodFormData = FormData.fromMap(foodMap);\r\n-      Response response = await dio.post(foodUrl,\r\n-          data: foodFormData,\r\n-          options: Options(headers: {\r\n-            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n-          }));\r\n-\r\n-      final FoodResponse foodResponseData =\r\n-          FoodResponse.fromJson(response.data);\r\n-      if (foodResponseData.success == true) {\r\n-        isFoodAdded = true;\r\n-        return isFoodAdded;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return isFoodAdded;\r\n-  }\r\n-\r\n-  Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(foodUrl);\r\n-      // response.data\r\n-      foodResponse = FoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n-    SingleFoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n-      // response.data\r\n-      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-    Future<FoodResponse?> getAllCategory(String categoryId) async {\r\n-    FoodResponse? productResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n-      // response.data\r\n-      productResponse = ProductResponse.fromJson(response.data);\r\n-      if (productResponse.success == true) {\r\n-        return productResponse;\r\n-      } else {\r\n-        productResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return productResponse;\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n-import 'dart:io';\r\n-import 'package:dio/dio.dart';\r\n-import 'package:foodex_app/app/constraints/api_url.dart';\r\n-import 'package:foodex_app/app/constraints/http_services.dart';\r\n-import 'package:foodex_app/model/food.dart';\r\n-import 'package:foodex_app/response/food_response.dart';\r\n-import 'package:foodex_app/response/single_food_response.dart';\r\n-import 'package:http_parser/http_parser.dart';\r\n-import 'package:mime/mime.dart';\r\n-\r\n-class FoodAPI {\r\n-  Future<bool> addFood(File? file, Food food) async {\r\n-    bool isFoodAdded = false;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? foodFinalImageFile;\r\n-    if (file != null) {\r\n-      var filePath = file.path;\r\n-\r\n-      // it is used to check only for images like: jpg, png, jpeg\r\n-      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n-      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n-      var mimeType = lookupMimeType(filePath);\r\n-\r\n-      // image path: -->I:\\final_api\\images\\\r\n-      // file name: --> chat.png\r\n-      // absolute path: --> image path + file name\r\n-      // absolute path:--> I:\\final_api\\images\\chat.png\r\n-      var image = await MultipartFile.fromFile(filePath,\r\n-          filename: filePath.split(\"/\").last,\r\n-          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      foodFinalImageFile = image;\r\n-    }\r\n-    try {\r\n-      // dio ko response\r\n-      Map<String, dynamic> foodMap = {\r\n-        \"name\": food.title,\r\n-        \"description\": food.description,\r\n-        \"image\": foodFinalImageFile,\r\n-        \"price\": food.price,\r\n-      };\r\n-      var foodFormData = FormData.fromMap(foodMap);\r\n-      Response response = await dio.post(foodUrl,\r\n-          data: foodFormData,\r\n-          options: Options(headers: {\r\n-            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n-          }));\r\n-\r\n-      final FoodResponse foodResponseData =\r\n-          FoodResponse.fromJson(response.data);\r\n-      if (foodResponseData.success == true) {\r\n-        isFoodAdded = true;\r\n-        return isFoodAdded;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return isFoodAdded;\r\n-  }\r\n-\r\n-  Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(foodUrl);\r\n-      // response.data\r\n-      foodResponse = FoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n-    SingleFoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n-      // response.data\r\n-      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-    Future<FoodResponse?> getAllCategoryProduct(String categoryId) async {\r\n-    FoodResponse? productResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n-      // response.data\r\n-      productResponse = ProductResponse.fromJson(response.data);\r\n-      if (productResponse.success == true) {\r\n-        return productResponse;\r\n-      } else {\r\n-        productResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return productResponse;\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n-import 'dart:io';\r\n-import 'package:dio/dio.dart';\r\n-import 'package:foodex_app/app/constraints/api_url.dart';\r\n-import 'package:foodex_app/app/constraints/http_services.dart';\r\n-import 'package:foodex_app/model/food.dart';\r\n-import 'package:foodex_app/response/food_response.dart';\r\n-import 'package:foodex_app/response/single_food_response.dart';\r\n-import 'package:http_parser/http_parser.dart';\r\n-import 'package:mime/mime.dart';\r\n-\r\n-class FoodAPI {\r\n-  Future<bool> addFood(File? file, Food food) async {\r\n-    bool isFoodAdded = false;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? foodFinalImageFile;\r\n-    if (file != null) {\r\n-      var filePath = file.path;\r\n-\r\n-      // it is used to check only for images like: jpg, png, jpeg\r\n-      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n-      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n-      var mimeType = lookupMimeType(filePath);\r\n-\r\n-      // image path: -->I:\\final_api\\images\\\r\n-      // file name: --> chat.png\r\n-      // absolute path: --> image path + file name\r\n-      // absolute path:--> I:\\final_api\\images\\chat.png\r\n-      var image = await MultipartFile.fromFile(filePath,\r\n-          filename: filePath.split(\"/\").last,\r\n-          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      foodFinalImageFile = image;\r\n-    }\r\n-    try {\r\n-      // dio ko response\r\n-      Map<String, dynamic> foodMap = {\r\n-        \"name\": food.title,\r\n-        \"description\": food.description,\r\n-        \"image\": foodFinalImageFile,\r\n-        \"price\": food.price,\r\n-      };\r\n-      var foodFormData = FormData.fromMap(foodMap);\r\n-      Response response = await dio.post(foodUrl,\r\n-          data: foodFormData,\r\n-          options: Options(headers: {\r\n-            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n-          }));\r\n-\r\n-      final FoodResponse foodResponseData =\r\n-          FoodResponse.fromJson(response.data);\r\n-      if (foodResponseData.success == true) {\r\n-        isFoodAdded = true;\r\n-        return isFoodAdded;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return isFoodAdded;\r\n-  }\r\n-\r\n-  Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(foodUrl);\r\n-      // response.data\r\n-      foodResponse = FoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n-    SingleFoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n-      // response.data\r\n-      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-    Future<FoodResponse?> getAllCategoryProduct(String categoryId) async {\r\n-    ProductResponse? productResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n-      // response.data\r\n-      productResponse = ProductResponse.fromJson(response.data);\r\n-      if (productResponse.success == true) {\r\n-        return productResponse;\r\n-      } else {\r\n-        productResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return productResponse;\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n-import 'dart:io';\r\n-import 'package:dio/dio.dart';\r\n-import 'package:foodex_app/app/constraints/api_url.dart';\r\n-import 'package:foodex_app/app/constraints/http_services.dart';\r\n-import 'package:foodex_app/model/food.dart';\r\n-import 'package:foodex_app/response/food_response.dart';\r\n-import 'package:foodex_app/response/single_food_response.dart';\r\n-import 'package:http_parser/http_parser.dart';\r\n-import 'package:mime/mime.dart';\r\n-\r\n-class FoodAPI {\r\n-  Future<bool> addFood(File? file, Food food) async {\r\n-    bool isFoodAdded = false;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? foodFinalImageFile;\r\n-    if (file != null) {\r\n-      var filePath = file.path;\r\n-\r\n-      // it is used to check only for images like: jpg, png, jpeg\r\n-      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n-      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n-      var mimeType = lookupMimeType(filePath);\r\n-\r\n-      // image path: -->I:\\final_api\\images\\\r\n-      // file name: --> chat.png\r\n-      // absolute path: --> image path + file name\r\n-      // absolute path:--> I:\\final_api\\images\\chat.png\r\n-      var image = await MultipartFile.fromFile(filePath,\r\n-          filename: filePath.split(\"/\").last,\r\n-          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      foodFinalImageFile = image;\r\n-    }\r\n-    try {\r\n-      // dio ko response\r\n-      Map<String, dynamic> foodMap = {\r\n-        \"name\": food.title,\r\n-        \"description\": food.description,\r\n-        \"image\": foodFinalImageFile,\r\n-        \"price\": food.price,\r\n-      };\r\n-      var foodFormData = FormData.fromMap(foodMap);\r\n-      Response response = await dio.post(foodUrl,\r\n-          data: foodFormData,\r\n-          options: Options(headers: {\r\n-            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n-          }));\r\n-\r\n-      final FoodResponse foodResponseData =\r\n-          FoodResponse.fromJson(response.data);\r\n-      if (foodResponseData.success == true) {\r\n-        isFoodAdded = true;\r\n-        return isFoodAdded;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return isFoodAdded;\r\n-  }\r\n-\r\n-  Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(foodUrl);\r\n-      // response.data\r\n-      foodResponse = FoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n-    SingleFoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n-      // response.data\r\n-      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-    Future<ProductResponse?> getAllCategoryProduct(String categoryId) async {\r\n-    ProductResponse? productResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$categoryUrl/$categoryId\");\r\n-      // response.data\r\n-      productResponse = ProductResponse.fromJson(response.data);\r\n-      if (productResponse.success == true) {\r\n-        return productResponse;\r\n-      } else {\r\n-        productResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return productResponse;\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n-import 'dart:io';\r\n-import 'package:dio/dio.dart';\r\n-import 'package:foodex_app/app/constraints/api_url.dart';\r\n-import 'package:foodex_app/app/constraints/http_services.dart';\r\n-import 'package:foodex_app/model/food.dart';\r\n-import 'package:foodex_app/response/food_response.dart';\r\n-import 'package:foodex_app/response/single_food_response.dart';\r\n-import 'package:http_parser/http_parser.dart';\r\n-import 'package:mime/mime.dart';\r\n-\r\n-class FoodAPI {\r\n-  Future<bool> addFood(File? file, Food food) async {\r\n-    bool isFoodAdded = false;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? foodFinalImageFile;\r\n-    if (file != null) {\r\n-      var filePath = file.path;\r\n-\r\n-      // it is used to check only for images like: jpg, png, jpeg\r\n-      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n-      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n-      var mimeType = lookupMimeType(filePath);\r\n-\r\n-      // image path: -->I:\\final_api\\images\\\r\n-      // file name: --> chat.png\r\n-      // absolute path: --> image path + file name\r\n-      // absolute path:--> I:\\final_api\\images\\chat.png\r\n-      var image = await MultipartFile.fromFile(filePath,\r\n-          filename: filePath.split(\"/\").last,\r\n-          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      foodFinalImageFile = image;\r\n-    }\r\n-    try {\r\n-      // dio ko response\r\n-      Map<String, dynamic> foodMap = {\r\n-        \"name\": food.title,\r\n-        \"description\": food.description,\r\n-        \"image\": foodFinalImageFile,\r\n-        \"price\": food.price,\r\n-      };\r\n-      var foodFormData = FormData.fromMap(foodMap);\r\n-      Response response = await dio.post(foodUrl,\r\n-          data: foodFormData,\r\n-          options: Options(headers: {\r\n-            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n-          }));\r\n-\r\n-      final FoodResponse foodResponseData =\r\n-          FoodResponse.fromJson(response.data);\r\n-      if (foodResponseData.success == true) {\r\n-        isFoodAdded = true;\r\n-        return isFoodAdded;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return isFoodAdded;\r\n-  }\r\n-\r\n-  Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(foodUrl);\r\n-      // response.data\r\n-      foodResponse = FoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n-    SingleFoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n-      // response.data\r\n-      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-  \r\n-}\r\n"
                },
                {
                    "date": 1675875538510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/app/constraints/api_url.dart';\r\n+import 'package:foodex_app/app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n+import 'package:foodex_app/response/food_response.dart';\r\n+import 'package:foodex_app/response/single_food_response.dart';\r\n+import 'package:http_parser/http_parser.dart';\r\n+import 'package:mime/mime.dart';\r\n+\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    MultipartFile? foodFinalImageFile;\r\n+    if (file != null) {\r\n+      var filePath = file.path;\r\n+\r\n+      // it is used to check only for images like: jpg, png, jpeg\r\n+      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n+      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n+      var mimeType = lookupMimeType(filePath);\r\n+\r\n+      // image path: -->I:\\final_api\\images\\\r\n+      // file name: --> chat.png\r\n+      // absolute path: --> image path + file name\r\n+      // absolute path:--> I:\\final_api\\images\\chat.png\r\n+      var image = await MultipartFile.fromFile(filePath,\r\n+          filename: filePath.split(\"/\").last,\r\n+          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n+      foodFinalImageFile = image;\r\n+    }\r\n+    try {\r\n+      // dio ko response\r\n+      Map<String, dynamic> foodMap = {\r\n+        \"name\": food.title,\r\n+        \"description\": food.description,\r\n+        \"image\": foodFinalImageFile,\r\n+        \"price\": food.price,\r\n+      };\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n+          options: Options(headers: {\r\n+            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n+          }));\r\n+\r\n+      final FoodResponse foodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (foodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return isFoodAdded;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(foodUrl);\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n+    SingleFoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n+      // response.data\r\n+      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        print(\"The food response is: --> ${foodResponse.data}\");\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+    Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodCategoryUrl/$categoryId\");\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+}\r\n"
                },
                {
                    "date": 1675878247327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,128 +121,4 @@\n \r\n \r\n \r\n }\r\n-import 'dart:io';\r\n-import 'package:dio/dio.dart';\r\n-import 'package:foodex_app/app/constraints/api_url.dart';\r\n-import 'package:foodex_app/app/constraints/http_services.dart';\r\n-import 'package:foodex_app/model/food.dart';\r\n-import 'package:foodex_app/response/food_response.dart';\r\n-import 'package:foodex_app/response/single_food_response.dart';\r\n-import 'package:http_parser/http_parser.dart';\r\n-import 'package:mime/mime.dart';\r\n-\r\n-class FoodAPI {\r\n-  Future<bool> addFood(File? file, Food food) async {\r\n-    bool isFoodAdded = false;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? foodFinalImageFile;\r\n-    if (file != null) {\r\n-      var filePath = file.path;\r\n-\r\n-      // it is used to check only for images like: jpg, png, jpeg\r\n-      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n-      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n-      var mimeType = lookupMimeType(filePath);\r\n-\r\n-      // image path: -->I:\\final_api\\images\\\r\n-      // file name: --> chat.png\r\n-      // absolute path: --> image path + file name\r\n-      // absolute path:--> I:\\final_api\\images\\chat.png\r\n-      var image = await MultipartFile.fromFile(filePath,\r\n-          filename: filePath.split(\"/\").last,\r\n-          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      foodFinalImageFile = image;\r\n-    }\r\n-    try {\r\n-      // dio ko response\r\n-      Map<String, dynamic> foodMap = {\r\n-        \"name\": food.title,\r\n-        \"description\": food.description,\r\n-        \"image\": foodFinalImageFile,\r\n-        \"price\": food.price,\r\n-      };\r\n-      var foodFormData = FormData.fromMap(foodMap);\r\n-      Response response = await dio.post(foodUrl,\r\n-          data: foodFormData,\r\n-          options: Options(headers: {\r\n-            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n-          }));\r\n-\r\n-      final FoodResponse foodResponseData =\r\n-          FoodResponse.fromJson(response.data);\r\n-      if (foodResponseData.success == true) {\r\n-        isFoodAdded = true;\r\n-        return isFoodAdded;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return isFoodAdded;\r\n-  }\r\n-\r\n-  Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(foodUrl);\r\n-      // response.data\r\n-      foodResponse = FoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n-    SingleFoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n-      // response.data\r\n-      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-    Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodCategoryUrl/getSingle/$categoryId\");\r\n-      // response.data\r\n-      foodResponse = Food.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-}\r\n"
                },
                {
                    "date": 1675879683172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,29 +96,23 @@\n     }\r\n     return foodResponse;\r\n   }\r\n \r\n-\r\n-    Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n-    FoodResponse? foodResponse;\r\n-    Dio dio = HttpServices().getDioInstance();\r\n-    try {\r\n-      // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodCategoryUrl/$categoryId\");\r\n-      // response.data\r\n-      foodResponse = FoodResponse.fromJson(response.data);\r\n-      if (foodResponse.success == true) {\r\n-        return foodResponse;\r\n-      } else {\r\n-        foodResponse = null;\r\n-      }\r\n-    } catch (exception) {\r\n-      print(exception);\r\n-    }\r\n-    return foodResponse;\r\n-  }\r\n-\r\n-\r\n-\r\n-\r\n-\r\n+  // Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n+  //   FoodResponse? foodResponse;\r\n+  //   Dio dio = HttpServices().getDioInstance();\r\n+  //   try {\r\n+  //     // dio ko response --> server le dine\r\n+  //     Response response = await dio.get(\"$foodCategoryUrl/$categoryId\");\r\n+  //     // response.data\r\n+  //     foodResponse = FoodResponse.fromJson(response.data);\r\n+  //     if (foodResponse.success == true) {\r\n+  //       return foodResponse;\r\n+  //     } else {\r\n+  //       foodResponse = null;\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     print(exception);\r\n+  //   }\r\n+  //   return foodResponse;\r\n+  // }\r\n }\r\n"
                },
                {
                    "date": 1675881708673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,23 +96,23 @@\n     }\r\n     return foodResponse;\r\n   }\r\n \r\n-  // Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n-  //   FoodResponse? foodResponse;\r\n-  //   Dio dio = HttpServices().getDioInstance();\r\n-  //   try {\r\n-  //     // dio ko response --> server le dine\r\n-  //     Response response = await dio.get(\"$foodCategoryUrl/$categoryId\");\r\n-  //     // response.data\r\n-  //     foodResponse = FoodResponse.fromJson(response.data);\r\n-  //     if (foodResponse.success == true) {\r\n-  //       return foodResponse;\r\n-  //     } else {\r\n-  //       foodResponse = null;\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     print(exception);\r\n-  //   }\r\n-  //   return foodResponse;\r\n-  // }\r\n+  Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodCategoryUrl/$categoryId\");\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1676724252598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,13 +19,8 @@\n       // it is used to check only for images like: jpg, png, jpeg\r\n       // if we won't check then, user may upload other file type such as: pdf, docx.\r\n       // so, mimeType is used to check for the extension or file type of uploaded file;\r\n       var mimeType = lookupMimeType(filePath);\r\n-\r\n-      // image path: -->I:\\final_api\\images\\\r\n-      // file name: --> chat.png\r\n-      // absolute path: --> image path + file name\r\n-      // absolute path:--> I:\\final_api\\images\\chat.png\r\n       var image = await MultipartFile.fromFile(filePath,\r\n           filename: filePath.split(\"/\").last,\r\n           contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n       foodFinalImageFile = image;\r\n@@ -65,9 +60,8 @@\n       Response response = await dio.get(foodUrl);\r\n       // response.data\r\n       foodResponse = FoodResponse.fromJson(response.data);\r\n       if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n         return foodResponse;\r\n       } else {\r\n         foodResponse = null;\r\n       }\r\n@@ -85,9 +79,8 @@\n       Response response = await dio.get(\"$foodUrl/$foodId\");\r\n       // response.data\r\n       foodResponse = SingleFoodResponse.fromJson(response.data);\r\n       if (foodResponse.success == true) {\r\n-        print(\"The food response is: --> ${foodResponse.data}\");\r\n         return foodResponse;\r\n       } else {\r\n         foodResponse = null;\r\n       }\r\n@@ -101,9 +94,9 @@\n     FoodResponse? foodResponse;\r\n     Dio dio = HttpServices().getDioInstance();\r\n     try {\r\n       // dio ko response --> server le dine\r\n-      Response response = await dio.get(\"$foodCategoryUrl/$categoryId\");\r\n+      Response response = await dio.get(\"$foodUrl/category/$categoryId\");\r\n       // response.data\r\n       foodResponse = FoodResponse.fromJson(response.data);\r\n       if (foodResponse.success == true) {\r\n         return foodResponse;\r\n"
                },
                {
                    "date": 1676724264555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,109 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/app/constraints/api_url.dart';\r\n+import 'package:foodex_app/app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n+import 'package:foodex_app/response/food_response.dart';\r\n+import 'package:foodex_app/response/single_food_response.dart';\r\n+import 'package:http_parser/http_parser.dart';\r\n+import 'package:mime/mime.dart';\r\n+\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    MultipartFile? foodFinalImageFile;\r\n+    if (file != null) {\r\n+      var filePath = file.path;\r\n+      \r\n+      var mimeType = lookupMimeType(filePath);\r\n+\r\n+      var image = await MultipartFile.fromFile(filePath,\r\n+          filename: filePath.split(\"/\").last,\r\n+          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n+      foodFinalImageFile = image;\r\n+    }\r\n+    try {\r\n+      // dio ko response\r\n+      Map<String, dynamic> foodMap = {\r\n+        \"name\": food.title,\r\n+        \"description\": food.description,\r\n+        \"image\": foodFinalImageFile,\r\n+        \"price\": food.price,\r\n+      };\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n+          options: Options(headers: {\r\n+            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n+          }));\r\n+\r\n+      final FoodResponse foodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (foodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return isFoodAdded;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(foodUrl);\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n+    SingleFoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n+      // response.data\r\n+      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+\r\n+  Future<FoodResponse?> getAllFoodCategory(String categoryId) async {\r\n+    FoodResponse? foodResponse;\r\n+    Dio dio = HttpServices().getDioInstance();\r\n+    try {\r\n+      // dio ko response --> server le dine\r\n+      Response response = await dio.get(\"$foodUrl/category/$categoryId\");\r\n+      // response.data\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        return foodResponse;\r\n+      } else {\r\n+        foodResponse = null;\r\n+      }\r\n+    } catch (exception) {\r\n+      print(exception);\r\n+    }\r\n+    return foodResponse;\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1675871722674,
            "name": "Commit-0",
            "content": "import 'dart:io';\r\nimport 'package:dio/dio.dart';\r\nimport 'package:foodex_app/app/constraints/api_url.dart';\r\nimport 'package:foodex_app/app/constraints/http_services.dart';\r\nimport 'package:foodex_app/model/food.dart';\r\nimport 'package:foodex_app/response/food_response.dart';\r\nimport 'package:foodex_app/response/single_food_response.dart';\r\nimport 'package:http_parser/http_parser.dart';\r\nimport 'package:mime/mime.dart';\r\n\r\nclass FoodAPI {\r\n  Future<bool> addFood(File? file, Food food) async {\r\n    bool isFoodAdded = false;\r\n    Dio dio = HttpServices().getDioInstance();\r\n    MultipartFile? foodFinalImageFile;\r\n    if (file != null) {\r\n      var filePath = file.path;\r\n\r\n      // it is used to check only for images like: jpg, png, jpeg\r\n      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n      var mimeType = lookupMimeType(filePath);\r\n\r\n      // image path: -->I:\\final_api\\images\\\r\n      // file name: --> chat.png\r\n      // absolute path: --> image path + file name\r\n      // absolute path:--> I:\\final_api\\images\\chat.png\r\n      var image = await MultipartFile.fromFile(filePath,\r\n          filename: filePath.split(\"/\").last,\r\n          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n      foodFinalImageFile = image;\r\n    }\r\n    try {\r\n      // dio ko response\r\n      Map<String, dynamic> foodMap = {\r\n        \"name\": food.title,\r\n        \"description\": food.description,\r\n        \"image\": foodFinalImageFile,\r\n        \"price\": food.price,\r\n      };\r\n      var foodFormData = FormData.fromMap(foodMap);\r\n      Response response = await dio.post(foodUrl,\r\n          data: foodFormData,\r\n          options: Options(headers: {\r\n            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n          }));\r\n\r\n      final FoodResponse foodResponseData =\r\n          FoodResponse.fromJson(response.data);\r\n      if (foodResponseData.success == true) {\r\n        isFoodAdded = true;\r\n        return isFoodAdded;\r\n      }\r\n    } catch (exception) {\r\n      print(exception);\r\n    }\r\n    return isFoodAdded;\r\n  }\r\n\r\n  Future<FoodResponse?> getAllFood() async {\r\n    FoodResponse? foodResponse;\r\n    Dio dio = HttpServices().getDioInstance();\r\n    try {\r\n      // dio ko response --> server le dine\r\n      Response response = await dio.get(foodUrl);\r\n      // response.data\r\n      foodResponse = FoodResponse.fromJson(response.data);\r\n      if (foodResponse.success == true) {\r\n        print(\"The food response is: --> ${foodResponse.data}\");\r\n        return foodResponse;\r\n      } else {\r\n        foodResponse = null;\r\n      }\r\n    } catch (exception) {\r\n      print(exception);\r\n    }\r\n    return foodResponse;\r\n  }\r\n\r\n  Future<SingleFoodResponse?> getSingleFood(String foodId) async {\r\n    SingleFoodResponse? foodResponse;\r\n    Dio dio = HttpServices().getDioInstance();\r\n    try {\r\n      // dio ko response --> server le dine\r\n      Response response = await dio.get(\"$foodUrl/$foodId\");\r\n      // response.data\r\n      foodResponse = SingleFoodResponse.fromJson(response.data);\r\n      if (foodResponse.success == true) {\r\n        print(\"The food response is: --> ${foodResponse.data}\");\r\n        return foodResponse;\r\n      } else {\r\n        foodResponse = null;\r\n      }\r\n    } catch (exception) {\r\n      print(exception);\r\n    }\r\n    return foodResponse;\r\n  }\r\n}\r\n"
        }
    ]
}