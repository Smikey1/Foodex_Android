{
    "sourceFile": "lib/api/product_api.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1674561185297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1674561190399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import 'dart:io';\r\n \r\n import 'package:dio/dio.dart';\r\n+import 'package:foodex_app/constraints/http_services.dart';\r\n import 'package:http_parser/http_parser.dart';\r\n import 'package:mime/mime.dart';\r\n \r\n class ProductAPI {\r\n"
                },
                {
                    "date": 1674561205817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import 'package:http_parser/http_parser.dart';\r\n import 'package:mime/mime.dart';\r\n \r\n class ProductAPI {\r\n-  Future<bool> addProduct(File? file, Product product) async {\r\n+  Future<bool> addProduct(File? file, Product food) async {\r\n     bool isProductAdded = false;\r\n     Dio dio = HttpServices().getDioInstance();\r\n     MultipartFile? productFinalImageFile;\r\n     if (file != null) {\r\n@@ -29,16 +29,16 @@\n     }\r\n     try {\r\n       // dio ko response\r\n       Map<String, dynamic> productMap = {\r\n-        \"name\": product.name,\r\n-        \"description\": product.description,\r\n+        \"name\": food.name,\r\n+        \"description\": food.description,\r\n         \"image\": productFinalImageFile,\r\n-        \"price\": product.price,\r\n-        \"category\": product.category!.name,\r\n-        \"countInStock\": product.countInStock,\r\n-        \"rating\": product.rating,\r\n-        \"numReviews\": product.numReviews\r\n+        \"price\": food.price,\r\n+        \"category\": food.category!.name,\r\n+        \"countInStock\": food.countInStock,\r\n+        \"rating\": food.rating,\r\n+        \"numReviews\": food.numReviews\r\n       };\r\n       var productFormData = FormData.fromMap(productMap);\r\n       Response response = await dio.post(productUrl,\r\n           data: productFormData,\r\n"
                },
                {
                    "date": 1674561498973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,13 @@\n import 'package:foodex_app/constraints/http_services.dart';\r\n import 'package:http_parser/http_parser.dart';\r\n import 'package:mime/mime.dart';\r\n \r\n-class ProductAPI {\r\n-  Future<bool> addProduct(File? file, Product food) async {\r\n-    bool isProductAdded = false;\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n     Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? productFinalImageFile;\r\n+    MultipartFile? FoodFinalImageFile;\r\n     if (file != null) {\r\n       var filePath = file.path;\r\n \r\n       // it is used to check only for images like: jpg, png, jpeg\r\n@@ -24,56 +24,56 @@\n       // absolute path:--> I:\\final_api\\images\\chat.png\r\n       var image = await MultipartFile.fromFile(filePath,\r\n           filename: filePath.split(\"/\").last,\r\n           contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      productFinalImageFile = image;\r\n+      FoodFinalImageFile = image;\r\n     }\r\n     try {\r\n       // dio ko response\r\n-      Map<String, dynamic> productMap = {\r\n+      Map<String, dynamic> FoodMap = {\r\n         \"name\": food.name,\r\n         \"description\": food.description,\r\n-        \"image\": productFinalImageFile,\r\n+        \"image\": FoodFinalImageFile,\r\n         \"price\": food.price,\r\n         \"category\": food.category!.name,\r\n         \"countInStock\": food.countInStock,\r\n         \"rating\": food.rating,\r\n         \"numReviews\": food.numReviews\r\n       };\r\n-      var productFormData = FormData.fromMap(productMap);\r\n-      Response response = await dio.post(productUrl,\r\n-          data: productFormData,\r\n+      var FoodFormData = FormData.fromMap(FoodMap);\r\n+      Response response = await dio.post(FoodUrl,\r\n+          data: FoodFormData,\r\n           options: Options(headers: {\r\n             HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n           }));\r\n \r\n-      final ProductResponse productResponseData =\r\n-          ProductResponse.fromJson(response.data);\r\n-      if (productResponseData.success == true) {\r\n-        isProductAdded = true;\r\n-        return isProductAdded;\r\n+      final FoodResponse FoodResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n+      if (FoodResponseData.success == true) {\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n       }\r\n     } catch (exception) {\r\n       print(exception);\r\n     }\r\n-    return isProductAdded;\r\n+    return isFoodAdded;\r\n   }\r\n \r\n-  Future<ProductResponse?> getAllProduct() async {\r\n-    ProductResponse? productResponse;\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? FoodResponse;\r\n     Dio dio = HttpServices().getDioInstance();\r\n     try {\r\n       // dio ko response --> server le dine\r\n-      Response response = await dio.get(productUrl);\r\n+      Response response = await dio.get(FoodUrl);\r\n       // response.data\r\n-      productResponse = ProductResponse.fromJson(response.data);\r\n-      if (productResponse.success == true) {\r\n-        return productResponse;\r\n+      FoodResponse = FoodResponse.fromJson(response.data);\r\n+      if (FoodResponse.success == true) {\r\n+        return FoodResponse;\r\n       } else {\r\n-        productResponse = null;\r\n+        FoodResponse = null;\r\n       }\r\n     } catch (exception) {\r\n       print(exception);\r\n     }\r\n-    return productResponse;\r\n+    return FoodResponse;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1674561512131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,13 @@\n import 'package:foodex_app/constraints/http_services.dart';\r\n import 'package:http_parser/http_parser.dart';\r\n import 'package:mime/mime.dart';\r\n \r\n-class FoodAPI {\r\n-  Future<bool> addFood(File? file, Food food) async {\r\n-    bool isFoodAdded = false;\r\n+class ProductAPI {\r\n+  Future<bool> addProduct(File? file, Food food) async {\r\n+    bool isProductAdded = false;\r\n     Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? FoodFinalImageFile;\r\n+    MultipartFile? productFinalImageFile;\r\n     if (file != null) {\r\n       var filePath = file.path;\r\n \r\n       // it is used to check only for images like: jpg, png, jpeg\r\n@@ -24,56 +24,56 @@\n       // absolute path:--> I:\\final_api\\images\\chat.png\r\n       var image = await MultipartFile.fromFile(filePath,\r\n           filename: filePath.split(\"/\").last,\r\n           contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      FoodFinalImageFile = image;\r\n+      productFinalImageFile = image;\r\n     }\r\n     try {\r\n       // dio ko response\r\n-      Map<String, dynamic> FoodMap = {\r\n+      Map<String, dynamic> productMap = {\r\n         \"name\": food.name,\r\n         \"description\": food.description,\r\n-        \"image\": FoodFinalImageFile,\r\n+        \"image\": productFinalImageFile,\r\n         \"price\": food.price,\r\n         \"category\": food.category!.name,\r\n         \"countInStock\": food.countInStock,\r\n         \"rating\": food.rating,\r\n         \"numReviews\": food.numReviews\r\n       };\r\n-      var FoodFormData = FormData.fromMap(FoodMap);\r\n-      Response response = await dio.post(FoodUrl,\r\n-          data: FoodFormData,\r\n+      var productFormData = FormData.fromMap(productMap);\r\n+      Response response = await dio.post(productUrl,\r\n+          data: productFormData,\r\n           options: Options(headers: {\r\n             HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n           }));\r\n \r\n-      final FoodResponse FoodResponseData =\r\n-          FoodResponse.fromJson(response.data);\r\n-      if (FoodResponseData.success == true) {\r\n-        isFoodAdded = true;\r\n-        return isFoodAdded;\r\n+      final ProductResponse productResponseData =\r\n+          ProductResponse.fromJson(response.data);\r\n+      if (productResponseData.success == true) {\r\n+        isProductAdded = true;\r\n+        return isProductAdded;\r\n       }\r\n     } catch (exception) {\r\n       print(exception);\r\n     }\r\n-    return isFoodAdded;\r\n+    return isProductAdded;\r\n   }\r\n \r\n-  Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? FoodResponse;\r\n+  Future<ProductResponse?> getAllProduct() async {\r\n+    ProductResponse? productResponse;\r\n     Dio dio = HttpServices().getDioInstance();\r\n     try {\r\n       // dio ko response --> server le dine\r\n-      Response response = await dio.get(FoodUrl);\r\n+      Response response = await dio.get(productUrl);\r\n       // response.data\r\n-      FoodResponse = FoodResponse.fromJson(response.data);\r\n-      if (FoodResponse.success == true) {\r\n-        return FoodResponse;\r\n+      productResponse = ProductResponse.fromJson(response.data);\r\n+      if (productResponse.success == true) {\r\n+        return productResponse;\r\n       } else {\r\n-        FoodResponse = null;\r\n+        productResponse = null;\r\n       }\r\n     } catch (exception) {\r\n       print(exception);\r\n     }\r\n-    return FoodResponse;\r\n+    return productResponse;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1674561518677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,11 @@\n import 'package:foodex_app/constraints/http_services.dart';\r\n import 'package:http_parser/http_parser.dart';\r\n import 'package:mime/mime.dart';\r\n \r\n-class ProductAPI {\r\n-  Future<bool> addProduct(File? file, Food food) async {\r\n-    bool isProductAdded = false;\r\n+class FoodAPI {\r\n+  Future<bool> addFood(File? file, Food food) async {\r\n+    bool isFoodAdded = false;\r\n     Dio dio = HttpServices().getDioInstance();\r\n     MultipartFile? productFinalImageFile;\r\n     if (file != null) {\r\n       var filePath = file.path;\r\n@@ -45,28 +45,28 @@\n           options: Options(headers: {\r\n             HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n           }));\r\n \r\n-      final ProductResponse productResponseData =\r\n-          ProductResponse.fromJson(response.data);\r\n+      final FoodResponse productResponseData =\r\n+          FoodResponse.fromJson(response.data);\r\n       if (productResponseData.success == true) {\r\n-        isProductAdded = true;\r\n-        return isProductAdded;\r\n+        isFoodAdded = true;\r\n+        return isFoodAdded;\r\n       }\r\n     } catch (exception) {\r\n       print(exception);\r\n     }\r\n-    return isProductAdded;\r\n+    return isFoodAdded;\r\n   }\r\n \r\n-  Future<ProductResponse?> getAllProduct() async {\r\n-    ProductResponse? productResponse;\r\n+  Future<FoodResponse?> getAllFood() async {\r\n+    FoodResponse? productResponse;\r\n     Dio dio = HttpServices().getDioInstance();\r\n     try {\r\n       // dio ko response --> server le dine\r\n       Response response = await dio.get(productUrl);\r\n       // response.data\r\n-      productResponse = ProductResponse.fromJson(response.data);\r\n+      productResponse = FoodResponse.fromJson(response.data);\r\n       if (productResponse.success == true) {\r\n         return productResponse;\r\n       } else {\r\n         productResponse = null;\r\n"
                },
                {
                    "date": 1674561530288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class FoodAPI {\r\n   Future<bool> addFood(File? file, Food food) async {\r\n     bool isFoodAdded = false;\r\n     Dio dio = HttpServices().getDioInstance();\r\n-    MultipartFile? productFinalImageFile;\r\n+    MultipartFile? foodFinalImageFile;\r\n     if (file != null) {\r\n       var filePath = file.path;\r\n \r\n       // it is used to check only for images like: jpg, png, jpeg\r\n@@ -24,32 +24,32 @@\n       // absolute path:--> I:\\final_api\\images\\chat.png\r\n       var image = await MultipartFile.fromFile(filePath,\r\n           filename: filePath.split(\"/\").last,\r\n           contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n-      productFinalImageFile = image;\r\n+      foodFinalImageFile = image;\r\n     }\r\n     try {\r\n       // dio ko response\r\n-      Map<String, dynamic> productMap = {\r\n+      Map<String, dynamic> foodMap = {\r\n         \"name\": food.name,\r\n         \"description\": food.description,\r\n-        \"image\": productFinalImageFile,\r\n+        \"image\": foodFinalImageFile,\r\n         \"price\": food.price,\r\n         \"category\": food.category!.name,\r\n         \"countInStock\": food.countInStock,\r\n         \"rating\": food.rating,\r\n         \"numReviews\": food.numReviews\r\n       };\r\n-      var productFormData = FormData.fromMap(productMap);\r\n-      Response response = await dio.post(productUrl,\r\n-          data: productFormData,\r\n+      var foodFormData = FormData.fromMap(foodMap);\r\n+      Response response = await dio.post(foodUrl,\r\n+          data: foodFormData,\r\n           options: Options(headers: {\r\n             HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n           }));\r\n \r\n-      final FoodResponse productResponseData =\r\n+      final FoodResponse foodResponseData =\r\n           FoodResponse.fromJson(response.data);\r\n-      if (productResponseData.success == true) {\r\n+      if (foodResponseData.success == true) {\r\n         isFoodAdded = true;\r\n         return isFoodAdded;\r\n       }\r\n     } catch (exception) {\r\n@@ -58,22 +58,22 @@\n     return isFoodAdded;\r\n   }\r\n \r\n   Future<FoodResponse?> getAllFood() async {\r\n-    FoodResponse? productResponse;\r\n+    FoodResponse? foodResponse;\r\n     Dio dio = HttpServices().getDioInstance();\r\n     try {\r\n       // dio ko response --> server le dine\r\n-      Response response = await dio.get(productUrl);\r\n+      Response response = await dio.get(foodUrl);\r\n       // response.data\r\n-      productResponse = FoodResponse.fromJson(response.data);\r\n-      if (productResponse.success == true) {\r\n-        return productResponse;\r\n+      foodResponse = FoodResponse.fromJson(response.data);\r\n+      if (foodResponse.success == true) {\r\n+        return foodResponse;\r\n       } else {\r\n-        productResponse = null;\r\n+        foodResponse = null;\r\n       }\r\n     } catch (exception) {\r\n       print(exception);\r\n     }\r\n-    return productResponse;\r\n+    return foodResponse;\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1674561556425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import 'dart:io';\r\n \r\n import 'package:dio/dio.dart';\r\n import 'package:foodex_app/constraints/http_services.dart';\r\n+import 'package:foodex_app/model/food.dart';\r\n import 'package:http_parser/http_parser.dart';\r\n import 'package:mime/mime.dart';\r\n \r\n class FoodAPI {\r\n"
                },
                {
                    "date": 1674561561934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import 'dart:io';\r\n-\r\n import 'package:dio/dio.dart';\r\n import 'package:foodex_app/constraints/http_services.dart';\r\n import 'package:foodex_app/model/food.dart';\r\n import 'package:http_parser/http_parser.dart';\r\n"
                },
                {
                    "date": 1674561578407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     }\r\n     try {\r\n       // dio ko response\r\n       Map<String, dynamic> foodMap = {\r\n-        \"name\": food.name,\r\n+        \"name\": food.title,\r\n         \"description\": food.description,\r\n         \"image\": foodFinalImageFile,\r\n         \"price\": food.price,\r\n         \"category\": food.category!.name,\r\n"
                },
                {
                    "date": 1674561597618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n       Map<String, dynamic> foodMap = {\r\n         \"name\": food.title,\r\n         \"description\": food.description,\r\n         \"image\": foodFinalImageFile,\r\n-        \"price\": food.price,\r\n+        \"price\": food.,\r\n         \"category\": food.category!.name,\r\n         \"countInStock\": food.countInStock,\r\n         \"rating\": food.rating,\r\n         \"numReviews\": food.numReviews\r\n"
                },
                {
                    "date": 1674561605609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         \"name\": food.title,\r\n         \"description\": food.description,\r\n         \"image\": foodFinalImageFile,\r\n         \"price\": food.price,\r\n-        \"category\": food.category.,\r\n+        \"category\": food.category,\r\n         \"countInStock\": food.countInStock,\r\n         \"rating\": food.rating,\r\n         \"numReviews\": food.numReviews\r\n       };\r\n"
                },
                {
                    "date": 1674561615519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         \"name\": food.title,\r\n         \"description\": food.description,\r\n         \"image\": foodFinalImageFile,\r\n         \"price\": food.price,\r\n-        \"category\": food.category!.ti,\r\n+        \"category\": food.category!.t,\r\n         \"countInStock\": food.countInStock,\r\n         \"rating\": food.rating,\r\n         \"numReviews\": food.numReviews\r\n       };\r\n"
                }
            ],
            "date": 1674561185297,
            "name": "Commit-0",
            "content": "import 'dart:io';\r\n\r\nimport 'package:dio/dio.dart';\r\nimport 'package:http_parser/http_parser.dart';\r\nimport 'package:mime/mime.dart';\r\n\r\nclass ProductAPI {\r\n  Future<bool> addProduct(File? file, Product product) async {\r\n    bool isProductAdded = false;\r\n    Dio dio = HttpServices().getDioInstance();\r\n    MultipartFile? productFinalImageFile;\r\n    if (file != null) {\r\n      var filePath = file.path;\r\n\r\n      // it is used to check only for images like: jpg, png, jpeg\r\n      // if we won't check then, user may upload other file type such as: pdf, docx.\r\n      // so, mimeType is used to check for the extension or file type of uploaded file;\r\n      var mimeType = lookupMimeType(filePath);\r\n\r\n      // image path: -->I:\\final_api\\images\\\r\n      // file name: --> chat.png\r\n      // absolute path: --> image path + file name\r\n      // absolute path:--> I:\\final_api\\images\\chat.png\r\n      var image = await MultipartFile.fromFile(filePath,\r\n          filename: filePath.split(\"/\").last,\r\n          contentType: MediaType(\"image\", mimeType!.split(\"/\").last));\r\n      productFinalImageFile = image;\r\n    }\r\n    try {\r\n      // dio ko response\r\n      Map<String, dynamic> productMap = {\r\n        \"name\": product.name,\r\n        \"description\": product.description,\r\n        \"image\": productFinalImageFile,\r\n        \"price\": product.price,\r\n        \"category\": product.category!.name,\r\n        \"countInStock\": product.countInStock,\r\n        \"rating\": product.rating,\r\n        \"numReviews\": product.numReviews\r\n      };\r\n      var productFormData = FormData.fromMap(productMap);\r\n      Response response = await dio.post(productUrl,\r\n          data: productFormData,\r\n          options: Options(headers: {\r\n            HttpHeaders.authorizationHeader: \"Bearer $tokenConstant\",\r\n          }));\r\n\r\n      final ProductResponse productResponseData =\r\n          ProductResponse.fromJson(response.data);\r\n      if (productResponseData.success == true) {\r\n        isProductAdded = true;\r\n        return isProductAdded;\r\n      }\r\n    } catch (exception) {\r\n      print(exception);\r\n    }\r\n    return isProductAdded;\r\n  }\r\n\r\n  Future<ProductResponse?> getAllProduct() async {\r\n    ProductResponse? productResponse;\r\n    Dio dio = HttpServices().getDioInstance();\r\n    try {\r\n      // dio ko response --> server le dine\r\n      Response response = await dio.get(productUrl);\r\n      // response.data\r\n      productResponse = ProductResponse.fromJson(response.data);\r\n      if (productResponse.success == true) {\r\n        return productResponse;\r\n      } else {\r\n        productResponse = null;\r\n      }\r\n    } catch (exception) {\r\n      print(exception);\r\n    }\r\n    return productResponse;\r\n  }\r\n}\r\n"
        }
    ]
}