{
    "sourceFile": "lib/screen/food/category/searchBar.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1675886243759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1675886268434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'package:flutter/material.dart';\r\n-import 'package:fluttership/Constants/Constants.dart';\r\n-import 'package:fluttership/Widgets/Widgets.dart';\r\n \r\n+\r\n ///An animated search bar which will shrink and expand itself on clicking\r\n class SearchBar extends StatefulWidget {\r\n   ///Function to be executed when something is typed\r\n   final Function(String z) onChanged;\r\n"
                },
                {
                    "date": 1675886283181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n   ///The variable to decide if the search field is to be shown or not\r\n   bool showSearchField = false;\r\n \r\n   ///Color of the search button\r\n-  static final Color searchButtonColor = Colorz.accountPurple;\r\n+  static final Color searchButtonColor = Colors;\r\n \r\n   ///Color of the clear button\r\n   static final Color clearButtonColor = Colors.black;\r\n \r\n"
                },
                {
                    "date": 1675886288282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+import 'package:flutter/material.dart';\r\n+\r\n+\r\n+///An animated search bar which will shrink and expand itself on clicking\r\n+class SearchBar extends StatefulWidget {\r\n+  ///Function to be executed when something is typed\r\n+  final Function(String z) onChanged;\r\n+\r\n+  ///Constructor\r\n+  SearchBar({Key? key, required this.onChanged}) : super(key: key);\r\n+\r\n+  @override\r\n+  State<SearchBar> createState() => _SearchBarState();\r\n+}\r\n+\r\n+class _SearchBarState extends State<SearchBar> {\r\n+  ///The variable to decide if the search field is to be shown or not\r\n+  bool showSearchField = false;\r\n+\r\n+  ///Color of the search button\r\n+  static final Color searchButtonColor = Colors.light;\r\n+\r\n+  ///Color of the clear button\r\n+  static final Color clearButtonColor = Colors.black;\r\n+\r\n+  Color get primaryColor => Colorz.accountPurple;\r\n+\r\n+  Color get textColor => Colors.white;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return AnimatedContainer(\r\n+      alignment: showSearchField ? Alignment.center : Alignment.centerRight,\r\n+      duration: Widgets.duration1Sec,\r\n+      padding: EdgeInsets.only(\r\n+        top: showSearchField ? 60 : 50,\r\n+        bottom: showSearchField ? 30 : 20,\r\n+        left: showSearchField ? 12 : 8,\r\n+        right: showSearchField ? 12 : 12,\r\n+      ),\r\n+      child: Material(\r\n+        elevation: showSearchField ? 12 : 4,\r\n+        shadowColor: primaryColor,\r\n+        borderRadius: BorderRadius.circular(360),\r\n+        child: AnimatedContainer(\r\n+            duration: Widgets.duration1Sec,\r\n+            decoration: BoxDecoration(\r\n+              color: showSearchField ? primaryColor : searchButtonColor,\r\n+              ////[Not satisfied]\r\n+              // boxShadow: [\r\n+              //   if(showSearchField) BoxShadow(\r\n+              //     color: searchButtonColor,\r\n+              //     blurRadius: 1.1,\r\n+              //     spreadRadius: 1.5,\r\n+              //   )\r\n+              // ],\r\n+              ///If to show search box, we will use a little curved border,\r\n+              ///otherwise the whole box will become a [circle]\r\n+              borderRadius: BorderRadius.circular(360),\r\n+            ),\r\n+\r\n+            ///If [true], show [searchField()] otherwise simply show the [icon]\r\n+            child: CrossFade(\r\n+              show: showSearchField,\r\n+              child: searchBar(),\r\n+              hiddenChild: searchButton(),\r\n+            )),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///The [TextField & ClearButton] widgets will be placed in this row\r\n+  Widget searchBar() {\r\n+    ///[Not fit]\r\n+    ///This setup is messing with the design we thought\r\n+    // return Container(\r\n+    //   child: TextField(\r\n+    //     decoration: InputDecoration(\r\n+    //       hintText: 'Search',\r\n+    //       suffixIcon: clearButton(),\r\n+    //     ),\r\n+    //   ),\r\n+    // );\r\n+    ///[Not fit]\r\n+    // return ListTile(\r\n+    //   contentPadding: EdgeInsets.only(left: 18),\r\n+    //   title: TextField(\r\n+    //     decoration: InputDecoration(\r\n+    //       hintText: 'Search...',\r\n+    //       border: InputBorder.none,\r\n+    //     ),\r\n+    //   ),\r\n+    //   trailing: clearButton(),\r\n+    // );\r\n+    ///This one works fine\r\n+    return Row(\r\n+      children: [\r\n+        if (showSearchField)\r\n+          opacity(\r\n+            duration: Duration(seconds: 5),\r\n+            child: searchButton(enabled: false),\r\n+          ),\r\n+\r\n+        ///For beauty purpose only, this is non functional\r\n+        searchField(),\r\n+        clearButton(),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget searchField() {\r\n+    return Expanded(\r\n+      child: opacity(\r\n+        child: TextField(\r\n+          ///Helps to focus immediately\r\n+          autofocus: true,\r\n+          onChanged: widget.onChanged,\r\n+          style: textStyle(),\r\n+          cursorColor: textColor,\r\n+          decoration: InputDecoration(\r\n+            hintText: 'Search...',\r\n+            hintStyle: textStyle(),\r\n+            border: InputBorder.none,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  TextStyle textStyle() => TextStyle(\r\n+        color: textColor,\r\n+      );\r\n+\r\n+  ///Search Button\r\n+  ///By default, this is functional, but if you need to disable it,\r\n+  ///pass the value as [false]\r\n+  Widget searchButton({bool enabled = true}) {\r\n+    return IconButton(\r\n+      tooltip: enabled ? 'Search' : null,\r\n+      icon: Icon(\r\n+        Icons.search,\r\n+        color: Colors.white,\r\n+      ),\r\n+      onPressed: enabled == false\r\n+          ? null\r\n+          : () {\r\n+              if (mounted) setState(() => showSearchField = true);\r\n+            },\r\n+    );\r\n+  }\r\n+\r\n+  ///Clear Button to hide the search bar\r\n+  Widget clearButton() {\r\n+    return opacity(\r\n+      duration: Duration(seconds: 4),\r\n+      child: DecoratedBox(\r\n+        decoration: BoxDecoration(\r\n+          color: clearButtonColor,\r\n+          borderRadius: BorderRadius.circular(360),\r\n+        ),\r\n+        child: IconButton(\r\n+          tooltip: 'Clear',\r\n+          icon: Icon(\r\n+            Icons.close,\r\n+            color: Colors.white,\r\n+          ),\r\n+          onPressed: () {\r\n+            if (mounted) setState(() => showSearchField = false);\r\n+\r\n+            ///This will clear up the query\r\n+            widget.onChanged('');\r\n+\r\n+            ///If keyboard is open, this will close it automaitcally\r\n+            FocusScope.of(context).unfocus();\r\n+          },\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///A widget which shows the given child in a specific time period with optional duration\r\n+  Widget opacity({required Widget child, Duration? duration}) {\r\n+    return AnimatedOpacity(\r\n+      opacity: showSearchField ? 1 : 0,\r\n+      duration: duration ?? Widgets.duration2Sec,\r\n+      child: child,\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886300805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+import 'package:flutter/material.dart';\r\n+\r\n+///An animated search bar which will shrink and expand itself on clicking\r\n+class SearchBar extends StatefulWidget {\r\n+  ///Function to be executed when something is typed\r\n+  final Function(String z) onChanged;\r\n+\r\n+  ///Constructor\r\n+  const SearchBar({Key? key, required this.onChanged}) : super(key: key);\r\n+\r\n+  @override\r\n+  State<SearchBar> createState() => _SearchBarState();\r\n+}\r\n+\r\n+class _SearchBarState extends State<SearchBar> {\r\n+  ///The variable to decide if the search field is to be shown or not\r\n+  bool showSearchField = false;\r\n+\r\n+  ///Color of the search button\r\n+  static const Color searchButtonColor = Colors.lightGreen;\r\n+\r\n+  ///Color of the clear button\r\n+  static const Color clearButtonColor = Colors.black;\r\n+\r\n+  Color get primaryColor => Colors.lightGreen;\r\n+\r\n+  Color get textColor => Colors.white;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return AnimatedContainer(\r\n+      alignment: showSearchField ? Alignment.center : Alignment.centerRight,\r\n+      duration: Widgets.duration1Sec,\r\n+      padding: EdgeInsets.only(\r\n+        top: showSearchField ? 60 : 50,\r\n+        bottom: showSearchField ? 30 : 20,\r\n+        left: showSearchField ? 12 : 8,\r\n+        right: showSearchField ? 12 : 12,\r\n+      ),\r\n+      child: Material(\r\n+        elevation: showSearchField ? 12 : 4,\r\n+        shadowColor: primaryColor,\r\n+        borderRadius: BorderRadius.circular(360),\r\n+        child: AnimatedContainer(\r\n+            duration: Widgets.duration1Sec,\r\n+            decoration: BoxDecoration(\r\n+              color: showSearchField ? primaryColor : searchButtonColor,\r\n+              ////[Not satisfied]\r\n+              // boxShadow: [\r\n+              //   if(showSearchField) BoxShadow(\r\n+              //     color: searchButtonColor,\r\n+              //     blurRadius: 1.1,\r\n+              //     spreadRadius: 1.5,\r\n+              //   )\r\n+              // ],\r\n+              ///If to show search box, we will use a little curved border,\r\n+              ///otherwise the whole box will become a [circle]\r\n+              borderRadius: BorderRadius.circular(360),\r\n+            ),\r\n+\r\n+            ///If [true], show [searchField()] otherwise simply show the [icon]\r\n+            child: CrossFade(\r\n+              show: showSearchField,\r\n+              child: searchBar(),\r\n+              hiddenChild: searchButton(),\r\n+            )),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///The [TextField & ClearButton] widgets will be placed in this row\r\n+  Widget searchBar() {\r\n+    ///[Not fit]\r\n+    ///This setup is messing with the design we thought\r\n+    // return Container(\r\n+    //   child: TextField(\r\n+    //     decoration: InputDecoration(\r\n+    //       hintText: 'Search',\r\n+    //       suffixIcon: clearButton(),\r\n+    //     ),\r\n+    //   ),\r\n+    // );\r\n+    ///[Not fit]\r\n+    // return ListTile(\r\n+    //   contentPadding: EdgeInsets.only(left: 18),\r\n+    //   title: TextField(\r\n+    //     decoration: InputDecoration(\r\n+    //       hintText: 'Search...',\r\n+    //       border: InputBorder.none,\r\n+    //     ),\r\n+    //   ),\r\n+    //   trailing: clearButton(),\r\n+    // );\r\n+    ///This one works fine\r\n+    return Row(\r\n+      children: [\r\n+        if (showSearchField)\r\n+          opacity(\r\n+            duration: const Duration(seconds: 5),\r\n+            child: searchButton(enabled: false),\r\n+          ),\r\n+\r\n+        ///For beauty purpose only, this is non functional\r\n+        searchField(),\r\n+        clearButton(),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget searchField() {\r\n+    return Expanded(\r\n+      child: opacity(\r\n+        child: TextField(\r\n+          ///Helps to focus immediately\r\n+          autofocus: true,\r\n+          onChanged: widget.onChanged,\r\n+          style: textStyle(),\r\n+          cursorColor: textColor,\r\n+          decoration: InputDecoration(\r\n+            hintText: 'Search...',\r\n+            hintStyle: textStyle(),\r\n+            border: InputBorder.none,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  TextStyle textStyle() => TextStyle(\r\n+        color: textColor,\r\n+      );\r\n+\r\n+  ///Search Button\r\n+  ///By default, this is functional, but if you need to disable it,\r\n+  ///pass the value as [false]\r\n+  Widget searchButton({bool enabled = true}) {\r\n+    return IconButton(\r\n+      tooltip: enabled ? 'Search' : null,\r\n+      icon: const Icon(\r\n+        Icons.search,\r\n+        color: Colors.white,\r\n+      ),\r\n+      onPressed: enabled == false\r\n+          ? null\r\n+          : () {\r\n+              if (mounted) setState(() => showSearchField = true);\r\n+            },\r\n+    );\r\n+  }\r\n+\r\n+  ///Clear Button to hide the search bar\r\n+  Widget clearButton() {\r\n+    return opacity(\r\n+      duration: const Duration(seconds: 4),\r\n+      child: DecoratedBox(\r\n+        decoration: BoxDecoration(\r\n+          color: clearButtonColor,\r\n+          borderRadius: BorderRadius.circular(360),\r\n+        ),\r\n+        child: IconButton(\r\n+          tooltip: 'Clear',\r\n+          icon: const Icon(\r\n+            Icons.close,\r\n+            color: Colors.white,\r\n+          ),\r\n+          onPressed: () {\r\n+            if (mounted) setState(() => showSearchField = false);\r\n+\r\n+            ///This will clear up the query\r\n+            widget.onChanged('');\r\n+\r\n+            ///If keyboard is open, this will close it automaitcally\r\n+            FocusScope.of(context).unfocus();\r\n+          },\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///A widget which shows the given child in a specific time period with optional duration\r\n+  Widget opacity({required Widget child, Duration? duration}) {\r\n+    return AnimatedOpacity(\r\n+      opacity: showSearchField ? 1 : 0,\r\n+      duration: duration ?? Widgets.duration2Sec,\r\n+      child: child,\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886410712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,188 @@\n+import 'package:flutter/material.dart';\r\n+\r\n+///An animated search bar which will shrink and expand itself on clicking\r\n+class SearchBar extends StatefulWidget {\r\n+  ///Function to be executed when something is typed\r\n+  final Function(String z) onChanged;\r\n+\r\n+  ///Constructor\r\n+  const SearchBar({Key? key, required this.onChanged}) : super(key: key);\r\n+\r\n+  @override\r\n+  State<SearchBar> createState() => _SearchBarState();\r\n+}\r\n+\r\n+class _SearchBarState extends State<SearchBar> {\r\n+  ///The variable to decide if the search field is to be shown or not\r\n+  bool showSearchField = false;\r\n+\r\n+  ///Color of the search button\r\n+  static const Color searchButtonColor = Colors.lightGreen;\r\n+\r\n+  ///Color of the clear button\r\n+  static const Color clearButtonColor = Colors.black;\r\n+\r\n+  Color get primaryColor => Colors.lightGreen;\r\n+\r\n+  Color get textColor => Colors.white;\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return AnimatedContainer(\r\n+      alignment: showSearchField ? Alignment.center : Alignment.centerRight,\r\n+      // duration: Widgets.duration1Sec,\r\n+      padding: EdgeInsets.only(\r\n+        top: showSearchField ? 60 : 50,\r\n+        bottom: showSearchField ? 30 : 20,\r\n+        left: showSearchField ? 12 : 8,\r\n+        right: showSearchField ? 12 : 12,\r\n+      ),\r\n+      child: Material(\r\n+        elevation: showSearchField ? 12 : 4,\r\n+        shadowColor: primaryColor,\r\n+        borderRadius: BorderRadius.circular(360),\r\n+        child: AnimatedContainer(\r\n+            duration: Widgets.duration1Sec,\r\n+            decoration: BoxDecoration(\r\n+              color: showSearchField ? primaryColor : searchButtonColor,\r\n+              ////[Not satisfied]\r\n+              // boxShadow: [\r\n+              //   if(showSearchField) BoxShadow(\r\n+              //     color: searchButtonColor,\r\n+              //     blurRadius: 1.1,\r\n+              //     spreadRadius: 1.5,\r\n+              //   )\r\n+              // ],\r\n+              ///If to show search box, we will use a little curved border,\r\n+              ///otherwise the whole box will become a [circle]\r\n+              borderRadius: BorderRadius.circular(360),\r\n+            ),\r\n+\r\n+            ///If [true], show [searchField()] otherwise simply show the [icon]\r\n+            child: CrossFade(\r\n+              show: showSearchField,\r\n+              child: searchBar(),\r\n+              hiddenChild: searchButton(),\r\n+            )),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///The [TextField & ClearButton] widgets will be placed in this row\r\n+  Widget searchBar() {\r\n+    ///[Not fit]\r\n+    ///This setup is messing with the design we thought\r\n+    // return Container(\r\n+    //   child: TextField(\r\n+    //     decoration: InputDecoration(\r\n+    //       hintText: 'Search',\r\n+    //       suffixIcon: clearButton(),\r\n+    //     ),\r\n+    //   ),\r\n+    // );\r\n+    ///[Not fit]\r\n+    // return ListTile(\r\n+    //   contentPadding: EdgeInsets.only(left: 18),\r\n+    //   title: TextField(\r\n+    //     decoration: InputDecoration(\r\n+    //       hintText: 'Search...',\r\n+    //       border: InputBorder.none,\r\n+    //     ),\r\n+    //   ),\r\n+    //   trailing: clearButton(),\r\n+    // );\r\n+    ///This one works fine\r\n+    return Row(\r\n+      children: [\r\n+        if (showSearchField)\r\n+          opacity(\r\n+            duration: const Duration(seconds: 5),\r\n+            child: searchButton(enabled: false),\r\n+          ),\r\n+\r\n+        ///For beauty purpose only, this is non functional\r\n+        searchField(),\r\n+        clearButton(),\r\n+      ],\r\n+    );\r\n+  }\r\n+\r\n+  Widget searchField() {\r\n+    return Expanded(\r\n+      child: opacity(\r\n+        child: TextField(\r\n+          ///Helps to focus immediately\r\n+          autofocus: true,\r\n+          onChanged: widget.onChanged,\r\n+          style: textStyle(),\r\n+          cursorColor: textColor,\r\n+          decoration: InputDecoration(\r\n+            hintText: 'Search...',\r\n+            hintStyle: textStyle(),\r\n+            border: InputBorder.none,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  TextStyle textStyle() => TextStyle(\r\n+        color: textColor,\r\n+      );\r\n+\r\n+  ///Search Button\r\n+  ///By default, this is functional, but if you need to disable it,\r\n+  ///pass the value as [false]\r\n+  Widget searchButton({bool enabled = true}) {\r\n+    return IconButton(\r\n+      tooltip: enabled ? 'Search' : null,\r\n+      icon: const Icon(\r\n+        Icons.search,\r\n+        color: Colors.white,\r\n+      ),\r\n+      onPressed: enabled == false\r\n+          ? null\r\n+          : () {\r\n+              if (mounted) setState(() => showSearchField = true);\r\n+            },\r\n+    );\r\n+  }\r\n+\r\n+  ///Clear Button to hide the search bar\r\n+  Widget clearButton() {\r\n+    return opacity(\r\n+      duration: const Duration(seconds: 4),\r\n+      child: DecoratedBox(\r\n+        decoration: BoxDecoration(\r\n+          color: clearButtonColor,\r\n+          borderRadius: BorderRadius.circular(360),\r\n+        ),\r\n+        child: IconButton(\r\n+          tooltip: 'Clear',\r\n+          icon: const Icon(\r\n+            Icons.close,\r\n+            color: Colors.white,\r\n+          ),\r\n+          onPressed: () {\r\n+            if (mounted) setState(() => showSearchField = false);\r\n+\r\n+            ///This will clear up the query\r\n+            widget.onChanged('');\r\n+\r\n+            ///If keyboard is open, this will close it automaitcally\r\n+            FocusScope.of(context).unfocus();\r\n+          },\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///A widget which shows the given child in a specific time period with optional duration\r\n+  Widget opacity({required Widget child, Duration? duration}) {\r\n+    return AnimatedOpacity(\r\n+      opacity: showSearchField ? 1 : 0,\r\n+      duration: duration ?? Widgets.duration2Sec,\r\n+      child: child,\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886432690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,196 +29,8 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     return AnimatedContainer(\r\n       alignment: showSearchField ? Alignment.center : Alignment.centerRight,\r\n-      // duration: Widgets.duration1Sec,\r\n-      padding: EdgeInsets.only(\r\n-        top: showSearchField ? 60 : 50,\r\n-        bottom: showSearchField ? 30 : 20,\r\n-        left: showSearchField ? 12 : 8,\r\n-        right: showSearchField ? 12 : 12,\r\n-      ),\r\n-      child: Material(\r\n-        elevation: showSearchField ? 12 : 4,\r\n-        shadowColor: primaryColor,\r\n-        borderRadius: BorderRadius.circular(360),\r\n-        child: AnimatedContainer(\r\n-            duration: Widgets.duration1Sec,\r\n-            decoration: BoxDecoration(\r\n-              color: showSearchField ? primaryColor : searchButtonColor,\r\n-              ////[Not satisfied]\r\n-              // boxShadow: [\r\n-              //   if(showSearchField) BoxShadow(\r\n-              //     color: searchButtonColor,\r\n-              //     blurRadius: 1.1,\r\n-              //     spreadRadius: 1.5,\r\n-              //   )\r\n-              // ],\r\n-              ///If to show search box, we will use a little curved border,\r\n-              ///otherwise the whole box will become a [circle]\r\n-              borderRadius: BorderRadius.circular(360),\r\n-            ),\r\n-\r\n-            ///If [true], show [searchField()] otherwise simply show the [icon]\r\n-            child: CrossFade(\r\n-              show: showSearchField,\r\n-              child: searchBar(),\r\n-              hiddenChild: searchButton(),\r\n-            )),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///The [TextField & ClearButton] widgets will be placed in this row\r\n-  Widget searchBar() {\r\n-    ///[Not fit]\r\n-    ///This setup is messing with the design we thought\r\n-    // return Container(\r\n-    //   child: TextField(\r\n-    //     decoration: InputDecoration(\r\n-    //       hintText: 'Search',\r\n-    //       suffixIcon: clearButton(),\r\n-    //     ),\r\n-    //   ),\r\n-    // );\r\n-    ///[Not fit]\r\n-    // return ListTile(\r\n-    //   contentPadding: EdgeInsets.only(left: 18),\r\n-    //   title: TextField(\r\n-    //     decoration: InputDecoration(\r\n-    //       hintText: 'Search...',\r\n-    //       border: InputBorder.none,\r\n-    //     ),\r\n-    //   ),\r\n-    //   trailing: clearButton(),\r\n-    // );\r\n-    ///This one works fine\r\n-    return Row(\r\n-      children: [\r\n-        if (showSearchField)\r\n-          opacity(\r\n-            duration: const Duration(seconds: 5),\r\n-            child: searchButton(enabled: false),\r\n-          ),\r\n-\r\n-        ///For beauty purpose only, this is non functional\r\n-        searchField(),\r\n-        clearButton(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget searchField() {\r\n-    return Expanded(\r\n-      child: opacity(\r\n-        child: TextField(\r\n-          ///Helps to focus immediately\r\n-          autofocus: true,\r\n-          onChanged: widget.onChanged,\r\n-          style: textStyle(),\r\n-          cursorColor: textColor,\r\n-          decoration: InputDecoration(\r\n-            hintText: 'Search...',\r\n-            hintStyle: textStyle(),\r\n-            border: InputBorder.none,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  TextStyle textStyle() => TextStyle(\r\n-        color: textColor,\r\n-      );\r\n-\r\n-  ///Search Button\r\n-  ///By default, this is functional, but if you need to disable it,\r\n-  ///pass the value as [false]\r\n-  Widget searchButton({bool enabled = true}) {\r\n-    return IconButton(\r\n-      tooltip: enabled ? 'Search' : null,\r\n-      icon: const Icon(\r\n-        Icons.search,\r\n-        color: Colors.white,\r\n-      ),\r\n-      onPressed: enabled == false\r\n-          ? null\r\n-          : () {\r\n-              if (mounted) setState(() => showSearchField = true);\r\n-            },\r\n-    );\r\n-  }\r\n-\r\n-  ///Clear Button to hide the search bar\r\n-  Widget clearButton() {\r\n-    return opacity(\r\n-      duration: const Duration(seconds: 4),\r\n-      child: DecoratedBox(\r\n-        decoration: BoxDecoration(\r\n-          color: clearButtonColor,\r\n-          borderRadius: BorderRadius.circular(360),\r\n-        ),\r\n-        child: IconButton(\r\n-          tooltip: 'Clear',\r\n-          icon: const Icon(\r\n-            Icons.close,\r\n-            color: Colors.white,\r\n-          ),\r\n-          onPressed: () {\r\n-            if (mounted) setState(() => showSearchField = false);\r\n-\r\n-            ///This will clear up the query\r\n-            widget.onChanged('');\r\n-\r\n-            ///If keyboard is open, this will close it automaitcally\r\n-            FocusScope.of(context).unfocus();\r\n-          },\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///A widget which shows the given child in a specific time period with optional duration\r\n-  Widget opacity({required Widget child, Duration? duration}) {\r\n-    return AnimatedOpacity(\r\n-      opacity: showSearchField ? 1 : 0,\r\n-      duration: duration ?? Widgets.duration2Sec,\r\n-      child: child,\r\n-    );\r\n-  }\r\n-}\r\n-import 'package:flutter/material.dart';\r\n-\r\n-///An animated search bar which will shrink and expand itself on clicking\r\n-class SearchBar extends StatefulWidget {\r\n-  ///Function to be executed when something is typed\r\n-  final Function(String z) onChanged;\r\n-\r\n-  ///Constructor\r\n-  const SearchBar({Key? key, required this.onChanged}) : super(key: key);\r\n-\r\n-  @override\r\n-  State<SearchBar> createState() => _SearchBarState();\r\n-}\r\n-\r\n-class _SearchBarState extends State<SearchBar> {\r\n-  ///The variable to decide if the search field is to be shown or not\r\n-  bool showSearchField = false;\r\n-\r\n-  ///Color of the search button\r\n-  static const Color searchButtonColor = Colors.lightGreen;\r\n-\r\n-  ///Color of the clear button\r\n-  static const Color clearButtonColor = Colors.black;\r\n-\r\n-  Color get primaryColor => Colors.lightGreen;\r\n-\r\n-  Color get textColor => Colors.white;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return AnimatedContainer(\r\n-      alignment: showSearchField ? Alignment.center : Alignment.centerRight,\r\n       duration: Widgets.duration1Sec,\r\n       padding: EdgeInsets.only(\r\n         top: showSearchField ? 60 : 50,\r\n         bottom: showSearchField ? 30 : 20,\r\n@@ -373,382 +185,4 @@\n       child: child,\r\n     );\r\n   }\r\n }\r\n-import 'package:flutter/material.dart';\r\n-\r\n-\r\n-///An animated search bar which will shrink and expand itself on clicking\r\n-class SearchBar extends StatefulWidget {\r\n-  ///Function to be executed when something is typed\r\n-  final Function(String z) onChanged;\r\n-\r\n-  ///Constructor\r\n-  SearchBar({Key? key, required this.onChanged}) : super(key: key);\r\n-\r\n-  @override\r\n-  State<SearchBar> createState() => _SearchBarState();\r\n-}\r\n-\r\n-class _SearchBarState extends State<SearchBar> {\r\n-  ///The variable to decide if the search field is to be shown or not\r\n-  bool showSearchField = false;\r\n-\r\n-  ///Color of the search button\r\n-  static final Color searchButtonColor = Colors.light;\r\n-\r\n-  ///Color of the clear button\r\n-  static final Color clearButtonColor = Colors.black;\r\n-\r\n-  Color get primaryColor => Colorz.accountPurple;\r\n-\r\n-  Color get textColor => Colors.white;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return AnimatedContainer(\r\n-      alignment: showSearchField ? Alignment.center : Alignment.centerRight,\r\n-      duration: Widgets.duration1Sec,\r\n-      padding: EdgeInsets.only(\r\n-        top: showSearchField ? 60 : 50,\r\n-        bottom: showSearchField ? 30 : 20,\r\n-        left: showSearchField ? 12 : 8,\r\n-        right: showSearchField ? 12 : 12,\r\n-      ),\r\n-      child: Material(\r\n-        elevation: showSearchField ? 12 : 4,\r\n-        shadowColor: primaryColor,\r\n-        borderRadius: BorderRadius.circular(360),\r\n-        child: AnimatedContainer(\r\n-            duration: Widgets.duration1Sec,\r\n-            decoration: BoxDecoration(\r\n-              color: showSearchField ? primaryColor : searchButtonColor,\r\n-              ////[Not satisfied]\r\n-              // boxShadow: [\r\n-              //   if(showSearchField) BoxShadow(\r\n-              //     color: searchButtonColor,\r\n-              //     blurRadius: 1.1,\r\n-              //     spreadRadius: 1.5,\r\n-              //   )\r\n-              // ],\r\n-              ///If to show search box, we will use a little curved border,\r\n-              ///otherwise the whole box will become a [circle]\r\n-              borderRadius: BorderRadius.circular(360),\r\n-            ),\r\n-\r\n-            ///If [true], show [searchField()] otherwise simply show the [icon]\r\n-            child: CrossFade(\r\n-              show: showSearchField,\r\n-              child: searchBar(),\r\n-              hiddenChild: searchButton(),\r\n-            )),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///The [TextField & ClearButton] widgets will be placed in this row\r\n-  Widget searchBar() {\r\n-    ///[Not fit]\r\n-    ///This setup is messing with the design we thought\r\n-    // return Container(\r\n-    //   child: TextField(\r\n-    //     decoration: InputDecoration(\r\n-    //       hintText: 'Search',\r\n-    //       suffixIcon: clearButton(),\r\n-    //     ),\r\n-    //   ),\r\n-    // );\r\n-    ///[Not fit]\r\n-    // return ListTile(\r\n-    //   contentPadding: EdgeInsets.only(left: 18),\r\n-    //   title: TextField(\r\n-    //     decoration: InputDecoration(\r\n-    //       hintText: 'Search...',\r\n-    //       border: InputBorder.none,\r\n-    //     ),\r\n-    //   ),\r\n-    //   trailing: clearButton(),\r\n-    // );\r\n-    ///This one works fine\r\n-    return Row(\r\n-      children: [\r\n-        if (showSearchField)\r\n-          opacity(\r\n-            duration: Duration(seconds: 5),\r\n-            child: searchButton(enabled: false),\r\n-          ),\r\n-\r\n-        ///For beauty purpose only, this is non functional\r\n-        searchField(),\r\n-        clearButton(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget searchField() {\r\n-    return Expanded(\r\n-      child: opacity(\r\n-        child: TextField(\r\n-          ///Helps to focus immediately\r\n-          autofocus: true,\r\n-          onChanged: widget.onChanged,\r\n-          style: textStyle(),\r\n-          cursorColor: textColor,\r\n-          decoration: InputDecoration(\r\n-            hintText: 'Search...',\r\n-            hintStyle: textStyle(),\r\n-            border: InputBorder.none,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  TextStyle textStyle() => TextStyle(\r\n-        color: textColor,\r\n-      );\r\n-\r\n-  ///Search Button\r\n-  ///By default, this is functional, but if you need to disable it,\r\n-  ///pass the value as [false]\r\n-  Widget searchButton({bool enabled = true}) {\r\n-    return IconButton(\r\n-      tooltip: enabled ? 'Search' : null,\r\n-      icon: Icon(\r\n-        Icons.search,\r\n-        color: Colors.white,\r\n-      ),\r\n-      onPressed: enabled == false\r\n-          ? null\r\n-          : () {\r\n-              if (mounted) setState(() => showSearchField = true);\r\n-            },\r\n-    );\r\n-  }\r\n-\r\n-  ///Clear Button to hide the search bar\r\n-  Widget clearButton() {\r\n-    return opacity(\r\n-      duration: Duration(seconds: 4),\r\n-      child: DecoratedBox(\r\n-        decoration: BoxDecoration(\r\n-          color: clearButtonColor,\r\n-          borderRadius: BorderRadius.circular(360),\r\n-        ),\r\n-        child: IconButton(\r\n-          tooltip: 'Clear',\r\n-          icon: Icon(\r\n-            Icons.close,\r\n-            color: Colors.white,\r\n-          ),\r\n-          onPressed: () {\r\n-            if (mounted) setState(() => showSearchField = false);\r\n-\r\n-            ///This will clear up the query\r\n-            widget.onChanged('');\r\n-\r\n-            ///If keyboard is open, this will close it automaitcally\r\n-            FocusScope.of(context).unfocus();\r\n-          },\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///A widget which shows the given child in a specific time period with optional duration\r\n-  Widget opacity({required Widget child, Duration? duration}) {\r\n-    return AnimatedOpacity(\r\n-      opacity: showSearchField ? 1 : 0,\r\n-      duration: duration ?? Widgets.duration2Sec,\r\n-      child: child,\r\n-    );\r\n-  }\r\n-}\r\n-import 'package:flutter/material.dart';\r\n-\r\n-\r\n-///An animated search bar which will shrink and expand itself on clicking\r\n-class SearchBar extends StatefulWidget {\r\n-  ///Function to be executed when something is typed\r\n-  final Function(String z) onChanged;\r\n-\r\n-  ///Constructor\r\n-  SearchBar({Key? key, required this.onChanged}) : super(key: key);\r\n-\r\n-  @override\r\n-  State<SearchBar> createState() => _SearchBarState();\r\n-}\r\n-\r\n-class _SearchBarState extends State<SearchBar> {\r\n-  ///The variable to decide if the search field is to be shown or not\r\n-  bool showSearchField = false;\r\n-\r\n-  ///Color of the search button\r\n-  static final Color searchButtonColor = Colors;\r\n-\r\n-  ///Color of the clear button\r\n-  static final Color clearButtonColor = Colors.black;\r\n-\r\n-  Color get primaryColor => Colorz.accountPurple;\r\n-\r\n-  Color get textColor => Colors.white;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return AnimatedContainer(\r\n-      alignment: showSearchField ? Alignment.center : Alignment.centerRight,\r\n-      duration: Widgets.duration1Sec,\r\n-      padding: EdgeInsets.only(\r\n-        top: showSearchField ? 60 : 50,\r\n-        bottom: showSearchField ? 30 : 20,\r\n-        left: showSearchField ? 12 : 8,\r\n-        right: showSearchField ? 12 : 12,\r\n-      ),\r\n-      child: Material(\r\n-        elevation: showSearchField ? 12 : 4,\r\n-        shadowColor: primaryColor,\r\n-        borderRadius: BorderRadius.circular(360),\r\n-        child: AnimatedContainer(\r\n-            duration: Widgets.duration1Sec,\r\n-            decoration: BoxDecoration(\r\n-              color: showSearchField ? primaryColor : searchButtonColor,\r\n-              ////[Not satisfied]\r\n-              // boxShadow: [\r\n-              //   if(showSearchField) BoxShadow(\r\n-              //     color: searchButtonColor,\r\n-              //     blurRadius: 1.1,\r\n-              //     spreadRadius: 1.5,\r\n-              //   )\r\n-              // ],\r\n-              ///If to show search box, we will use a little curved border,\r\n-              ///otherwise the whole box will become a [circle]\r\n-              borderRadius: BorderRadius.circular(360),\r\n-            ),\r\n-\r\n-            ///If [true], show [searchField()] otherwise simply show the [icon]\r\n-            child: CrossFade(\r\n-              show: showSearchField,\r\n-              child: searchBar(),\r\n-              hiddenChild: searchButton(),\r\n-            )),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///The [TextField & ClearButton] widgets will be placed in this row\r\n-  Widget searchBar() {\r\n-    ///[Not fit]\r\n-    ///This setup is messing with the design we thought\r\n-    // return Container(\r\n-    //   child: TextField(\r\n-    //     decoration: InputDecoration(\r\n-    //       hintText: 'Search',\r\n-    //       suffixIcon: clearButton(),\r\n-    //     ),\r\n-    //   ),\r\n-    // );\r\n-    ///[Not fit]\r\n-    // return ListTile(\r\n-    //   contentPadding: EdgeInsets.only(left: 18),\r\n-    //   title: TextField(\r\n-    //     decoration: InputDecoration(\r\n-    //       hintText: 'Search...',\r\n-    //       border: InputBorder.none,\r\n-    //     ),\r\n-    //   ),\r\n-    //   trailing: clearButton(),\r\n-    // );\r\n-    ///This one works fine\r\n-    return Row(\r\n-      children: [\r\n-        if (showSearchField)\r\n-          opacity(\r\n-            duration: Duration(seconds: 5),\r\n-            child: searchButton(enabled: false),\r\n-          ),\r\n-\r\n-        ///For beauty purpose only, this is non functional\r\n-        searchField(),\r\n-        clearButton(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget searchField() {\r\n-    return Expanded(\r\n-      child: opacity(\r\n-        child: TextField(\r\n-          ///Helps to focus immediately\r\n-          autofocus: true,\r\n-          onChanged: widget.onChanged,\r\n-          style: textStyle(),\r\n-          cursorColor: textColor,\r\n-          decoration: InputDecoration(\r\n-            hintText: 'Search...',\r\n-            hintStyle: textStyle(),\r\n-            border: InputBorder.none,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  TextStyle textStyle() => TextStyle(\r\n-        color: textColor,\r\n-      );\r\n-\r\n-  ///Search Button\r\n-  ///By default, this is functional, but if you need to disable it,\r\n-  ///pass the value as [false]\r\n-  Widget searchButton({bool enabled = true}) {\r\n-    return IconButton(\r\n-      tooltip: enabled ? 'Search' : null,\r\n-      icon: Icon(\r\n-        Icons.search,\r\n-        color: Colors.white,\r\n-      ),\r\n-      onPressed: enabled == false\r\n-          ? null\r\n-          : () {\r\n-              if (mounted) setState(() => showSearchField = true);\r\n-            },\r\n-    );\r\n-  }\r\n-\r\n-  ///Clear Button to hide the search bar\r\n-  Widget clearButton() {\r\n-    return opacity(\r\n-      duration: Duration(seconds: 4),\r\n-      child: DecoratedBox(\r\n-        decoration: BoxDecoration(\r\n-          color: clearButtonColor,\r\n-          borderRadius: BorderRadius.circular(360),\r\n-        ),\r\n-        child: IconButton(\r\n-          tooltip: 'Clear',\r\n-          icon: Icon(\r\n-            Icons.close,\r\n-            color: Colors.white,\r\n-          ),\r\n-          onPressed: () {\r\n-            if (mounted) setState(() => showSearchField = false);\r\n-\r\n-            ///This will clear up the query\r\n-            widget.onChanged('');\r\n-\r\n-            ///If keyboard is open, this will close it automaitcally\r\n-            FocusScope.of(context).unfocus();\r\n-          },\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///A widget which shows the given child in a specific time period with optional duration\r\n-  Widget opacity({required Widget child, Duration? duration}) {\r\n-    return AnimatedOpacity(\r\n-      opacity: showSearchField ? 1 : 0,\r\n-      duration: duration ?? Widgets.duration2Sec,\r\n-      child: child,\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1675886907542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:flutter/material.dart';\r\n+import 'package:foodex_app/screen/food/category/widget.dart';\r\n \r\n ///An animated search bar which will shrink and expand itself on clicking\r\n class SearchBar extends StatefulWidget {\r\n   ///Function to be executed when something is typed\r\n"
                },
                {
                    "date": 1675886994343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,10 @@\n             child: CrossFade(\r\n               show: showSearchField,\r\n               child: searchBar(),\r\n               hiddenChild: searchButton(),\r\n-            )),\r\n+            )\r\n+            ),\r\n       ),\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1675887338893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,190 +0,0 @@\n-import 'package:flutter/material.dart';\r\n-import 'package:foodex_app/screen/food/category/widget.dart';\r\n-\r\n-///An animated search bar which will shrink and expand itself on clicking\r\n-class SearchBar extends StatefulWidget {\r\n-  ///Function to be executed when something is typed\r\n-  final Function(String z) onChanged;\r\n-\r\n-  ///Constructor\r\n-  const SearchBar({Key? key, required this.onChanged}) : super(key: key);\r\n-\r\n-  @override\r\n-  State<SearchBar> createState() => _SearchBarState();\r\n-}\r\n-\r\n-class _SearchBarState extends State<SearchBar> {\r\n-  ///The variable to decide if the search field is to be shown or not\r\n-  bool showSearchField = false;\r\n-\r\n-  ///Color of the search button\r\n-  static const Color searchButtonColor = Colors.lightGreen;\r\n-\r\n-  ///Color of the clear button\r\n-  static const Color clearButtonColor = Colors.black;\r\n-\r\n-  Color get primaryColor => Colors.lightGreen;\r\n-\r\n-  Color get textColor => Colors.white;\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return AnimatedContainer(\r\n-      alignment: showSearchField ? Alignment.center : Alignment.centerRight,\r\n-      duration: Widgets.duration1Sec,\r\n-      padding: EdgeInsets.only(\r\n-        top: showSearchField ? 60 : 50,\r\n-        bottom: showSearchField ? 30 : 20,\r\n-        left: showSearchField ? 12 : 8,\r\n-        right: showSearchField ? 12 : 12,\r\n-      ),\r\n-      child: Material(\r\n-        elevation: showSearchField ? 12 : 4,\r\n-        shadowColor: primaryColor,\r\n-        borderRadius: BorderRadius.circular(360),\r\n-        child: AnimatedContainer(\r\n-            duration: Widgets.duration1Sec,\r\n-            decoration: BoxDecoration(\r\n-              color: showSearchField ? primaryColor : searchButtonColor,\r\n-              ////[Not satisfied]\r\n-              // boxShadow: [\r\n-              //   if(showSearchField) BoxShadow(\r\n-              //     color: searchButtonColor,\r\n-              //     blurRadius: 1.1,\r\n-              //     spreadRadius: 1.5,\r\n-              //   )\r\n-              // ],\r\n-              ///If to show search box, we will use a little curved border,\r\n-              ///otherwise the whole box will become a [circle]\r\n-              borderRadius: BorderRadius.circular(360),\r\n-            ),\r\n-\r\n-            ///If [true], show [searchField()] otherwise simply show the [icon]\r\n-            child: CrossFade(\r\n-              show: showSearchField,\r\n-              child: searchBar(),\r\n-              hiddenChild: searchButton(),\r\n-            )\r\n-            ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///The [TextField & ClearButton] widgets will be placed in this row\r\n-  Widget searchBar() {\r\n-    ///[Not fit]\r\n-    ///This setup is messing with the design we thought\r\n-    // return Container(\r\n-    //   child: TextField(\r\n-    //     decoration: InputDecoration(\r\n-    //       hintText: 'Search',\r\n-    //       suffixIcon: clearButton(),\r\n-    //     ),\r\n-    //   ),\r\n-    // );\r\n-    ///[Not fit]\r\n-    // return ListTile(\r\n-    //   contentPadding: EdgeInsets.only(left: 18),\r\n-    //   title: TextField(\r\n-    //     decoration: InputDecoration(\r\n-    //       hintText: 'Search...',\r\n-    //       border: InputBorder.none,\r\n-    //     ),\r\n-    //   ),\r\n-    //   trailing: clearButton(),\r\n-    // );\r\n-    ///This one works fine\r\n-    return Row(\r\n-      children: [\r\n-        if (showSearchField)\r\n-          opacity(\r\n-            duration: const Duration(seconds: 5),\r\n-            child: searchButton(enabled: false),\r\n-          ),\r\n-\r\n-        ///For beauty purpose only, this is non functional\r\n-        searchField(),\r\n-        clearButton(),\r\n-      ],\r\n-    );\r\n-  }\r\n-\r\n-  Widget searchField() {\r\n-    return Expanded(\r\n-      child: opacity(\r\n-        child: TextField(\r\n-          ///Helps to focus immediately\r\n-          autofocus: true,\r\n-          onChanged: widget.onChanged,\r\n-          style: textStyle(),\r\n-          cursorColor: textColor,\r\n-          decoration: InputDecoration(\r\n-            hintText: 'Search...',\r\n-            hintStyle: textStyle(),\r\n-            border: InputBorder.none,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  TextStyle textStyle() => TextStyle(\r\n-        color: textColor,\r\n-      );\r\n-\r\n-  ///Search Button\r\n-  ///By default, this is functional, but if you need to disable it,\r\n-  ///pass the value as [false]\r\n-  Widget searchButton({bool enabled = true}) {\r\n-    return IconButton(\r\n-      tooltip: enabled ? 'Search' : null,\r\n-      icon: const Icon(\r\n-        Icons.search,\r\n-        color: Colors.white,\r\n-      ),\r\n-      onPressed: enabled == false\r\n-          ? null\r\n-          : () {\r\n-              if (mounted) setState(() => showSearchField = true);\r\n-            },\r\n-    );\r\n-  }\r\n-\r\n-  ///Clear Button to hide the search bar\r\n-  Widget clearButton() {\r\n-    return opacity(\r\n-      duration: const Duration(seconds: 4),\r\n-      child: DecoratedBox(\r\n-        decoration: BoxDecoration(\r\n-          color: clearButtonColor,\r\n-          borderRadius: BorderRadius.circular(360),\r\n-        ),\r\n-        child: IconButton(\r\n-          tooltip: 'Clear',\r\n-          icon: const Icon(\r\n-            Icons.close,\r\n-            color: Colors.white,\r\n-          ),\r\n-          onPressed: () {\r\n-            if (mounted) setState(() => showSearchField = false);\r\n-\r\n-            ///This will clear up the query\r\n-            widget.onChanged('');\r\n-\r\n-            ///If keyboard is open, this will close it automaitcally\r\n-            FocusScope.of(context).unfocus();\r\n-          },\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///A widget which shows the given child in a specific time period with optional duration\r\n-  Widget opacity({required Widget child, Duration? duration}) {\r\n-    return AnimatedOpacity(\r\n-      opacity: showSearchField ? 1 : 0,\r\n-      duration: duration ?? Widgets.duration2Sec,\r\n-      child: child,\r\n-    );\r\n-  }\r\n-}\r\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675887480423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,1 @@\n-\n+st\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675887488641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,13 @@\n-st\n\\ No newline at end of file\n+class name extends StatefulWidget {\r\n+  const name({super.key});\r\n+\r\n+  @override\r\n+  State<name> createState() => _nameState();\r\n+}\r\n+\r\n+class _nameState extends State<name> {\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Container();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675887495156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,13 @@\n+class SearchBar extends StatefulWidget {\r\n+  const SearchBar({super.key});\r\n+\r\n+  @override\r\n+  State<SearchBar> createState() => _SearchBarState();\r\n+}\r\n+\r\n+class _SearchBarState extends State<SearchBar> {\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Container();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675887508293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,15 @@\n+import 'package:flutter/material.dart';\r\n+\r\n+class SearchBar extends StatefulWidget {\r\n+  const SearchBar({super.key});\r\n+\r\n+  @override\r\n+  State<SearchBar> createState() => _SearchBarState();\r\n+}\r\n+\r\n+class _SearchBarState extends State<SearchBar> {\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Container();\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675887519860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,7 +9,9 @@\n \r\n class _SearchBarState extends State<SearchBar> {\r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    return Container();\r\n+    return Scaffold(\r\n+      body: ,\r\n+    );\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675887545213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,17 @@\n+import 'package:flutter/material.dart';\r\n+\r\n+class SearchBar extends StatefulWidget {\r\n+  const SearchBar({super.key});\r\n+\r\n+  @override\r\n+  State<SearchBar> createState() => _SearchBarState();\r\n+}\r\n+\r\n+class _SearchBarState extends State<SearchBar> {\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      body: Container,\r\n+    );\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675887552218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,10 @@\n class _SearchBarState extends State<SearchBar> {\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n-      body: Container(),\r\n+      body: Container(\r\n+        \r\n+      ),\r\n     );\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1675887566409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,21 @@\n+import 'package:flutter/material.dart';\r\n+\r\n+class SearchBar extends StatefulWidget {\r\n+  const SearchBar({super.key});\r\n+\r\n+  @override\r\n+  State<SearchBar> createState() => _SearchBarState();\r\n+}\r\n+\r\n+class _SearchBarState extends State<SearchBar> {\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      body: Container(\r\n+        child: Row(children: [\r\n+          \r\n+        ]),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1675886243759,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:fluttership/Constants/Constants.dart';\r\nimport 'package:fluttership/Widgets/Widgets.dart';\r\n\r\n///An animated search bar which will shrink and expand itself on clicking\r\nclass SearchBar extends StatefulWidget {\r\n  ///Function to be executed when something is typed\r\n  final Function(String z) onChanged;\r\n\r\n  ///Constructor\r\n  SearchBar({Key? key, required this.onChanged}) : super(key: key);\r\n\r\n  @override\r\n  State<SearchBar> createState() => _SearchBarState();\r\n}\r\n\r\nclass _SearchBarState extends State<SearchBar> {\r\n  ///The variable to decide if the search field is to be shown or not\r\n  bool showSearchField = false;\r\n\r\n  ///Color of the search button\r\n  static final Color searchButtonColor = Colorz.accountPurple;\r\n\r\n  ///Color of the clear button\r\n  static final Color clearButtonColor = Colors.black;\r\n\r\n  Color get primaryColor => Colorz.accountPurple;\r\n\r\n  Color get textColor => Colors.white;\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return AnimatedContainer(\r\n      alignment: showSearchField ? Alignment.center : Alignment.centerRight,\r\n      duration: Widgets.duration1Sec,\r\n      padding: EdgeInsets.only(\r\n        top: showSearchField ? 60 : 50,\r\n        bottom: showSearchField ? 30 : 20,\r\n        left: showSearchField ? 12 : 8,\r\n        right: showSearchField ? 12 : 12,\r\n      ),\r\n      child: Material(\r\n        elevation: showSearchField ? 12 : 4,\r\n        shadowColor: primaryColor,\r\n        borderRadius: BorderRadius.circular(360),\r\n        child: AnimatedContainer(\r\n            duration: Widgets.duration1Sec,\r\n            decoration: BoxDecoration(\r\n              color: showSearchField ? primaryColor : searchButtonColor,\r\n              ////[Not satisfied]\r\n              // boxShadow: [\r\n              //   if(showSearchField) BoxShadow(\r\n              //     color: searchButtonColor,\r\n              //     blurRadius: 1.1,\r\n              //     spreadRadius: 1.5,\r\n              //   )\r\n              // ],\r\n              ///If to show search box, we will use a little curved border,\r\n              ///otherwise the whole box will become a [circle]\r\n              borderRadius: BorderRadius.circular(360),\r\n            ),\r\n\r\n            ///If [true], show [searchField()] otherwise simply show the [icon]\r\n            child: CrossFade(\r\n              show: showSearchField,\r\n              child: searchBar(),\r\n              hiddenChild: searchButton(),\r\n            )),\r\n      ),\r\n    );\r\n  }\r\n\r\n  ///The [TextField & ClearButton] widgets will be placed in this row\r\n  Widget searchBar() {\r\n    ///[Not fit]\r\n    ///This setup is messing with the design we thought\r\n    // return Container(\r\n    //   child: TextField(\r\n    //     decoration: InputDecoration(\r\n    //       hintText: 'Search',\r\n    //       suffixIcon: clearButton(),\r\n    //     ),\r\n    //   ),\r\n    // );\r\n    ///[Not fit]\r\n    // return ListTile(\r\n    //   contentPadding: EdgeInsets.only(left: 18),\r\n    //   title: TextField(\r\n    //     decoration: InputDecoration(\r\n    //       hintText: 'Search...',\r\n    //       border: InputBorder.none,\r\n    //     ),\r\n    //   ),\r\n    //   trailing: clearButton(),\r\n    // );\r\n    ///This one works fine\r\n    return Row(\r\n      children: [\r\n        if (showSearchField)\r\n          opacity(\r\n            duration: Duration(seconds: 5),\r\n            child: searchButton(enabled: false),\r\n          ),\r\n\r\n        ///For beauty purpose only, this is non functional\r\n        searchField(),\r\n        clearButton(),\r\n      ],\r\n    );\r\n  }\r\n\r\n  Widget searchField() {\r\n    return Expanded(\r\n      child: opacity(\r\n        child: TextField(\r\n          ///Helps to focus immediately\r\n          autofocus: true,\r\n          onChanged: widget.onChanged,\r\n          style: textStyle(),\r\n          cursorColor: textColor,\r\n          decoration: InputDecoration(\r\n            hintText: 'Search...',\r\n            hintStyle: textStyle(),\r\n            border: InputBorder.none,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  TextStyle textStyle() => TextStyle(\r\n        color: textColor,\r\n      );\r\n\r\n  ///Search Button\r\n  ///By default, this is functional, but if you need to disable it,\r\n  ///pass the value as [false]\r\n  Widget searchButton({bool enabled = true}) {\r\n    return IconButton(\r\n      tooltip: enabled ? 'Search' : null,\r\n      icon: Icon(\r\n        Icons.search,\r\n        color: Colors.white,\r\n      ),\r\n      onPressed: enabled == false\r\n          ? null\r\n          : () {\r\n              if (mounted) setState(() => showSearchField = true);\r\n            },\r\n    );\r\n  }\r\n\r\n  ///Clear Button to hide the search bar\r\n  Widget clearButton() {\r\n    return opacity(\r\n      duration: Duration(seconds: 4),\r\n      child: DecoratedBox(\r\n        decoration: BoxDecoration(\r\n          color: clearButtonColor,\r\n          borderRadius: BorderRadius.circular(360),\r\n        ),\r\n        child: IconButton(\r\n          tooltip: 'Clear',\r\n          icon: Icon(\r\n            Icons.close,\r\n            color: Colors.white,\r\n          ),\r\n          onPressed: () {\r\n            if (mounted) setState(() => showSearchField = false);\r\n\r\n            ///This will clear up the query\r\n            widget.onChanged('');\r\n\r\n            ///If keyboard is open, this will close it automaitcally\r\n            FocusScope.of(context).unfocus();\r\n          },\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  ///A widget which shows the given child in a specific time period with optional duration\r\n  Widget opacity({required Widget child, Duration? duration}) {\r\n    return AnimatedOpacity(\r\n      opacity: showSearchField ? 1 : 0,\r\n      duration: duration ?? Widgets.duration2Sec,\r\n      child: child,\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}