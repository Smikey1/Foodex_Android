{
    "sourceFile": "lib/screen/food/category/widget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 33,
            "patches": [
                {
                    "date": 1675886477075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1675886489529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -484,9 +484,9 @@\n \r\n   static Widget heading({dynamic text}) {\r\n     return Padding(\r\n       padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Txt(\r\n+      child: Text(\r\n         text: text,\r\n         color: Colors.grey,\r\n         fontWeight: FontWeight.bold,\r\n       ),\r\n"
                },
                {
                    "date": 1675886502679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,510 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+import 'package:fluttership/Constants/Constants.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+part './Loader.dart';\r\n+part './Txt.dart';\r\n+part './Scroller.dart';\r\n+part './Img.dart';\r\n+part './Inkk.dart';\r\n+part './Avatar.dart';\r\n+part './CrossFade.dart';\r\n+part './ColorTile.dart';\r\n+part './Button.dart';\r\n+part './Expandile.dart';\r\n+part './DoubleCard.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position:\r\n+                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n+                          .animate(animation),\r\n+                  child: new SlideTransition(\r\n+                      position: new Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.caption!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> _tags = [];\r\n+    sentences.forEach((sentence) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        words.forEach((word) {\r\n+          if (_tags.contains(word) == false) _tags.add(word);\r\n+        });\r\n+      }\r\n+    });\r\n+    return _tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color _color = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: _color.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: _color,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Txt(\r\n+            text: \"Not found!\",\r\n+            fontWeight: FontWeight.bold,\r\n+            fontSize: 50,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+          subtitle: Txt(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int)\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = '${isPast ? 'Just now' : 'now'}';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int _month = date.month;\r\n+    String month = toMonth(_month);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        text: ,\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886508721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,510 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+import 'package:fluttership/Constants/Constants.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+part './Loader.dart';\r\n+part './Txt.dart';\r\n+part './Scroller.dart';\r\n+part './Img.dart';\r\n+part './Inkk.dart';\r\n+part './Avatar.dart';\r\n+part './CrossFade.dart';\r\n+part './ColorTile.dart';\r\n+part './Button.dart';\r\n+part './Expandile.dart';\r\n+part './DoubleCard.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position:\r\n+                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n+                          .animate(animation),\r\n+                  child: new SlideTransition(\r\n+                      position: new Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.caption!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> _tags = [];\r\n+    sentences.forEach((sentence) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        words.forEach((word) {\r\n+          if (_tags.contains(word) == false) _tags.add(word);\r\n+        });\r\n+      }\r\n+    });\r\n+    return _tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color _color = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: _color.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: _color,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Txt(\r\n+            text: \"Not found!\",\r\n+            fontWeight: FontWeight.bold,\r\n+            fontSize: 50,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+          subtitle: Txt(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int)\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = '${isPast ? 'Just now' : 'now'}';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int _month = date.month;\r\n+    String month = toMonth(_month);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        text: Text,\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886520382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,509 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+import 'package:fluttership/Constants/Constants.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+part './Loader.dart';\r\n+part './Txt.dart';\r\n+part './Scroller.dart';\r\n+part './Img.dart';\r\n+part './Inkk.dart';\r\n+part './Avatar.dart';\r\n+part './CrossFade.dart';\r\n+part './ColorTile.dart';\r\n+part './Button.dart';\r\n+part './Expandile.dart';\r\n+part './DoubleCard.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position:\r\n+                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n+                          .animate(animation),\r\n+                  child: new SlideTransition(\r\n+                      position: new Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.caption!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> _tags = [];\r\n+    sentences.forEach((sentence) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        words.forEach((word) {\r\n+          if (_tags.contains(word) == false) _tags.add(word);\r\n+        });\r\n+      }\r\n+    });\r\n+    return _tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color _color = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: _color.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: _color,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Txt(\r\n+            text: \"Not found!\",\r\n+            fontWeight: FontWeight.bold,\r\n+            fontSize: 50,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+          subtitle: Txt(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int)\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = '${isPast ? 'Just now' : 'now'}';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int _month = date.month;\r\n+    String month = toMonth(_month);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886527283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -484,9 +484,9 @@\n \r\n   static Widget heading({dynamic text}) {\r\n     return Padding(\r\n       padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n+      child: Text( \"this is me\"\r\n         color: Colors.grey,\r\n         fontWeight: FontWeight.bold,\r\n       ),\r\n     );\r\n@@ -506,1534 +506,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-import 'package:fluttership/Constants/Constants.dart';\r\n-import 'package:intl/intl.dart';\r\n-\r\n-part './Loader.dart';\r\n-part './Txt.dart';\r\n-part './Scroller.dart';\r\n-part './Img.dart';\r\n-part './Inkk.dart';\r\n-part './Avatar.dart';\r\n-part './CrossFade.dart';\r\n-part './ColorTile.dart';\r\n-part './Button.dart';\r\n-part './Expandile.dart';\r\n-part './DoubleCard.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position:\r\n-                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n-                          .animate(animation),\r\n-                  child: new SlideTransition(\r\n-                      position: new Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.caption!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> _tags = [];\r\n-    sentences.forEach((sentence) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        words.forEach((word) {\r\n-          if (_tags.contains(word) == false) _tags.add(word);\r\n-        });\r\n-      }\r\n-    });\r\n-    return _tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color _color = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: _color.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: _color,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Txt(\r\n-            text: \"Not found!\",\r\n-            fontWeight: FontWeight.bold,\r\n-            fontSize: 50,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int)\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = '${isPast ? 'Just now' : 'now'}';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int _month = date.month;\r\n-    String month = toMonth(_month);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        text: Text,\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-import 'package:fluttership/Constants/Constants.dart';\r\n-import 'package:intl/intl.dart';\r\n-\r\n-part './Loader.dart';\r\n-part './Txt.dart';\r\n-part './Scroller.dart';\r\n-part './Img.dart';\r\n-part './Inkk.dart';\r\n-part './Avatar.dart';\r\n-part './CrossFade.dart';\r\n-part './ColorTile.dart';\r\n-part './Button.dart';\r\n-part './Expandile.dart';\r\n-part './DoubleCard.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position:\r\n-                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n-                          .animate(animation),\r\n-                  child: new SlideTransition(\r\n-                      position: new Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.caption!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> _tags = [];\r\n-    sentences.forEach((sentence) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        words.forEach((word) {\r\n-          if (_tags.contains(word) == false) _tags.add(word);\r\n-        });\r\n-      }\r\n-    });\r\n-    return _tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color _color = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: _color.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: _color,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Txt(\r\n-            text: \"Not found!\",\r\n-            fontWeight: FontWeight.bold,\r\n-            fontSize: 50,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int)\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = '${isPast ? 'Just now' : 'now'}';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int _month = date.month;\r\n-    String month = toMonth(_month);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        text: ,\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-import 'package:fluttership/Constants/Constants.dart';\r\n-import 'package:intl/intl.dart';\r\n-\r\n-part './Loader.dart';\r\n-part './Txt.dart';\r\n-part './Scroller.dart';\r\n-part './Img.dart';\r\n-part './Inkk.dart';\r\n-part './Avatar.dart';\r\n-part './CrossFade.dart';\r\n-part './ColorTile.dart';\r\n-part './Button.dart';\r\n-part './Expandile.dart';\r\n-part './DoubleCard.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position:\r\n-                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n-                          .animate(animation),\r\n-                  child: new SlideTransition(\r\n-                      position: new Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.caption!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> _tags = [];\r\n-    sentences.forEach((sentence) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        words.forEach((word) {\r\n-          if (_tags.contains(word) == false) _tags.add(word);\r\n-        });\r\n-      }\r\n-    });\r\n-    return _tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color _color = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: _color.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: _color,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Txt(\r\n-            text: \"Not found!\",\r\n-            fontWeight: FontWeight.bold,\r\n-            fontSize: 50,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int)\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = '${isPast ? 'Just now' : 'now'}';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int _month = date.month;\r\n-    String month = toMonth(_month);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        text: text,\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1675886535424,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,509 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+import 'package:fluttership/Constants/Constants.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+part './Loader.dart';\r\n+part './Txt.dart';\r\n+part './Scroller.dart';\r\n+part './Img.dart';\r\n+part './Inkk.dart';\r\n+part './Avatar.dart';\r\n+part './CrossFade.dart';\r\n+part './ColorTile.dart';\r\n+part './Button.dart';\r\n+part './Expandile.dart';\r\n+part './DoubleCard.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position:\r\n+                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n+                          .animate(animation),\r\n+                  child: new SlideTransition(\r\n+                      position: new Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.caption!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> _tags = [];\r\n+    sentences.forEach((sentence) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        words.forEach((word) {\r\n+          if (_tags.contains(word) == false) _tags.add(word);\r\n+        });\r\n+      }\r\n+    });\r\n+    return _tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color _color = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: _color.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: _color,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Txt(\r\n+            text: \"Not found!\",\r\n+            fontWeight: FontWeight.bold,\r\n+            fontSize: 50,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+          subtitle: Txt(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int)\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = '${isPast ? 'Just now' : 'now'}';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int _month = date.month;\r\n+    String month = toMonth(_month);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text( \"this is me\", st\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886540673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -484,9 +484,9 @@\n \r\n   static Widget heading({dynamic text}) {\r\n     return Padding(\r\n       padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text( \"this is me\", st\r\n+      child: Text( \"this is me\", style: TextStyle(),\r\n         color: Colors.grey,\r\n         fontWeight: FontWeight.bold,\r\n       ),\r\n     );\r\n@@ -506,513 +506,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-import 'package:fluttership/Constants/Constants.dart';\r\n-import 'package:intl/intl.dart';\r\n-\r\n-part './Loader.dart';\r\n-part './Txt.dart';\r\n-part './Scroller.dart';\r\n-part './Img.dart';\r\n-part './Inkk.dart';\r\n-part './Avatar.dart';\r\n-part './CrossFade.dart';\r\n-part './ColorTile.dart';\r\n-part './Button.dart';\r\n-part './Expandile.dart';\r\n-part './DoubleCard.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position:\r\n-                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n-                          .animate(animation),\r\n-                  child: new SlideTransition(\r\n-                      position: new Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.caption!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> _tags = [];\r\n-    sentences.forEach((sentence) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        words.forEach((word) {\r\n-          if (_tags.contains(word) == false) _tags.add(word);\r\n-        });\r\n-      }\r\n-    });\r\n-    return _tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color _color = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: _color.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: _color,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Txt(\r\n-            text: \"Not found!\",\r\n-            fontWeight: FontWeight.bold,\r\n-            fontSize: 50,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int)\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = '${isPast ? 'Just now' : 'now'}';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int _month = date.month;\r\n-    String month = toMonth(_month);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text( \"this is me\"\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1675886547227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,511 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+import 'package:fluttership/Constants/Constants.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+part './Loader.dart';\r\n+part './Txt.dart';\r\n+part './Scroller.dart';\r\n+part './Img.dart';\r\n+part './Inkk.dart';\r\n+part './Avatar.dart';\r\n+part './CrossFade.dart';\r\n+part './ColorTile.dart';\r\n+part './Button.dart';\r\n+part './Expandile.dart';\r\n+part './DoubleCard.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position:\r\n+                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n+                          .animate(animation),\r\n+                  child: new SlideTransition(\r\n+                      position: new Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.caption!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> _tags = [];\r\n+    sentences.forEach((sentence) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        words.forEach((word) {\r\n+          if (_tags.contains(word) == false) _tags.add(word);\r\n+        });\r\n+      }\r\n+    });\r\n+    return _tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color _color = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: _color.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: _color,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Txt(\r\n+            text: \"Not found!\",\r\n+            fontWeight: FontWeight.bold,\r\n+            fontSize: 50,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+          subtitle: Txt(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int)\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = '${isPast ? 'Just now' : 'now'}';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int _month = date.month;\r\n+    String month = toMonth(_month);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text( \"this is me\", style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+       \r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886561974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,513 @@\n+// import 'dart:math' as math;\r\n+// import 'package:cached_network_image/cached_network_image.dart';\r\n+// // import 'package:firebase_storage/firebase_storage.dart';\r\n+// // import 'package:fluttership/Models/IconLabel.dart';\r\n+// // import 'package:fluttership/Models/Logg.dart';\r\n+// // import 'package:fluttership/Models/RichString.dart';\r\n+// // import 'package:fluttership/Models/SelectionStep.dart';\r\n+// import 'package:flutter/foundation.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:flutter/services.dart';\r\n+// // import 'package:fluttership/Repos/Img.dart';\r\n+// import 'package:fluttership/Constants/Constants.dart';\r\n+// import 'package:intl/intl.dart';\r\n+\r\n+// part './Loader.dart';\r\n+// part './Txt.dart';\r\n+// part './Scroller.dart';\r\n+// part './Img.dart';\r\n+// part './Inkk.dart';\r\n+// part './Avatar.dart';\r\n+// part './CrossFade.dart';\r\n+// part './ColorTile.dart';\r\n+// part './Button.dart';\r\n+// part './Expandile.dart';\r\n+// part './DoubleCard.dart';\r\n+\r\n+// @Deprecated('Use Widgets.instance')\r\n+// class Common {\r\n+//   Common._privateConstructor();\r\n+//   static final Common _instance = Common._privateConstructor();\r\n+//   static Common get instance => _instance;\r\n+// }\r\n+\r\n+// class FadePageRoute extends PageRouteBuilder {\r\n+//   final Widget widget;\r\n+//   FadePageRoute({required this.widget})\r\n+//       : super(\r\n+//             pageBuilder: (BuildContext context, Animation<double> animation,\r\n+//                 Animation<double> secondaryAnimation) {\r\n+//               return widget;\r\n+//             },\r\n+//             transitionDuration: const Duration(milliseconds: 300),\r\n+//             transitionsBuilder:\r\n+//                 ((context, animation, secondaryAnimation, child) {\r\n+//               return SlideTransition(\r\n+//                   transformHitTests: false,\r\n+//                   position: Tween<Offset>(\r\n+//                           begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+//                       .animate(animation),\r\n+//                   child: SlideTransition(\r\n+//                       position: Tween<Offset>(\r\n+//                               begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+//                           .animate(secondaryAnimation),\r\n+//                       child: child));\r\n+//             }));\r\n+// }\r\n+\r\n+// class Widgets {\r\n+//   Widgets._privateConstructor();\r\n+//   static final Widgets _instance = Widgets._privateConstructor();\r\n+//   static Widgets get instance => _instance;\r\n+\r\n+//   static String avatar(String phoneNumberOrRemoteKey) {\r\n+//     String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+//     return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+//   }\r\n+\r\n+//   static Widget loadingCircle({Color? color, double size = 26}) {\r\n+//     return Material(\r\n+//       type: MaterialType.circle,\r\n+//       color: color,\r\n+//       elevation: 0,\r\n+//       child: SizedBox(\r\n+//         height: size,\r\n+//         width: size,\r\n+//         child: const FittedBox(\r\n+//           fit: BoxFit.scaleDown,\r\n+//           child: CircularProgressIndicator(\r\n+//             strokeWidth: 5,\r\n+//             valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+//           ),\r\n+//         ),\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+\r\n+//   ///This will return the darken color of the given value\r\n+//   static Color darkenColor(Color color, double value) =>\r\n+//       HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+//   static Txt subtitle(BuildContext context, String text,\r\n+//       {TextAlign? textAlign, double? fontSize = 12}) {\r\n+//     return Txt(\r\n+//         text: text,\r\n+//         textAlign: textAlign,\r\n+//         fontSize: fontSize,\r\n+//         color: subtitleColor(context));\r\n+//   }\r\n+\r\n+//   static Color subtitleColor(BuildContext context) {\r\n+//     return Theme.of(context).textTheme.bodySmall!.color!;\r\n+//   }\r\n+\r\n+//   static const Duration duration = Duration(milliseconds: 350);\r\n+//   static const Duration duration1Sec = Duration(seconds: 1);\r\n+//   static const Duration duration2Sec = Duration(seconds: 2);\r\n+//   static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+//   static const Curve curve = Curves.easeIn;\r\n+\r\n+//   static bool debugging = kDebugMode;\r\n+//   static bool debugMode = kDebugMode;\r\n+\r\n+//   static List<String> generateTags(List sentences) {\r\n+//     List<String> tags = [];\r\n+//     for (var sentence in sentences) {\r\n+//       if (sentence != null) {\r\n+//         List words = '$sentence'.toLowerCase().split(' ');\r\n+//         for (var word in words) {\r\n+//           if (tags.contains(word) == false) tags.add(word);\r\n+//         }\r\n+//       }\r\n+//     }\r\n+//     return tags\r\n+//       ..sort((b, a) => a.length.compareTo(b.length))\r\n+//       ..removeWhere((element) => element.length < 3);\r\n+//   }\r\n+\r\n+//   static Widget boldHeading(String string, {double? left}) {\r\n+//     return Container(\r\n+//       padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+//       alignment: Alignment.centerLeft,\r\n+//       child: Txt(\r\n+//         text: string,\r\n+//         fontWeight: FontWeight.bold,\r\n+//         textAlign: TextAlign.start,\r\n+//         fontSize: 16,\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+\r\n+//   ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+//   static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+//     final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+//     return DecoratedBox(\r\n+//       decoration: BoxDecoration(\r\n+//         color: color0.withOpacity(0.15),\r\n+//         shape: BoxShape.circle,\r\n+//       ),\r\n+//       child: Transform.rotate(\r\n+//         angle: angle * math.pi / 180,\r\n+//         child: Icon(\r\n+//           back ? Icons.chevron_left : Icons.chevron_right,\r\n+//           size: 18,\r\n+//           color: color0,\r\n+//         ),\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+\r\n+//   static List<String> generateListString(List? list) {\r\n+//     if (list == null) return [];\r\n+//     return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+//   }\r\n+\r\n+//   // static List<Logg> generateLogs(List? list) {\r\n+//   //   if (list == null) return [];\r\n+//   //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+//   // }\r\n+\r\n+//   static String get today =>\r\n+//       \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+//   // static Future<bool?> call(String number) async {\r\n+//   // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+//   // }\r\n+\r\n+//   // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+//   //   String url = 'sms:$phoneNumber?body=$text';\r\n+//   //   await launchurl(url);\r\n+//   // }\r\n+\r\n+//   static Widget deleted() {\r\n+//     return Center(\r\n+//       child: Txt(\r\n+//         fontSize: 16,\r\n+//         text: \"Deleted\",\r\n+//         color: Colors.grey,\r\n+//         fontWeight: FontWeight.bold,\r\n+//         textAlign: TextAlign.center,\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+\r\n+//   // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+//   //   return RichTxt(maxLines: 1, richStrings: [\r\n+//   //     RichString(_staffTypeLabel(type)),\r\n+//   //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+//   //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+//   //   ]);\r\n+//   // }\r\n+\r\n+//   // static Widget _staffTypeLabel(StaffType type) {\r\n+//   //   return Container(\r\n+//   //       child: Txt(\r\n+//   //         text: type.viewer,\r\n+//   //         fontSize: 8,\r\n+//   //         color: Colors.white,\r\n+//   //       ),\r\n+//   //       padding: EdgeInsets.all(2),\r\n+//   //       decoration: BoxDecoration(\r\n+//   //         color: type.color,\r\n+//   //         borderRadius: BorderRadius.circular(4),\r\n+//   //       ));\r\n+//   // }\r\n+\r\n+//   static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+//     DateTime dateTime =\r\n+//         DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+//     final difference = DateTime.now().difference(dateTime);\r\n+\r\n+//     if (difference.inDays > 8) {\r\n+//       return dateTime.toString().substring(0, 10);\r\n+//     } else if ((difference.inDays / 7).floor() >= 1) {\r\n+//       return (numericDates) ? '1 week ago' : 'Last week';\r\n+//     } else if (difference.inDays >= 2) {\r\n+//       return '${difference.inDays} days ago';\r\n+//     } else if (difference.inDays >= 1) {\r\n+//       return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+//     } else if (difference.inHours >= 2) {\r\n+//       return '${difference.inHours} hours ago';\r\n+//     } else if (difference.inHours >= 1) {\r\n+//       return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+//     } else if (difference.inMinutes >= 2) {\r\n+//       return '${difference.inMinutes} minutes ago';\r\n+//     } else if (difference.inMinutes >= 1) {\r\n+//       return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+//     } else if (difference.inSeconds >= 3) {\r\n+//       return '${difference.inSeconds} seconds ago';\r\n+//     } else {\r\n+//       return 'Just now';\r\n+//     }\r\n+//   }\r\n+\r\n+//   static Widget notFoundWidget() {\r\n+//     return Material(\r\n+//       child: Center(\r\n+//         child: ListTile(\r\n+//           title: Txt(\r\n+//             text: \"Not found!\",\r\n+//             fontWeight: FontWeight.bold,\r\n+//             fontSize: 50,\r\n+//             textAlign: TextAlign.center,\r\n+//           ),\r\n+//           subtitle: Txt(\r\n+//             text: \"The requested content is not found at this moment.\",\r\n+//             fontSize: 20,\r\n+//             textAlign: TextAlign.center,\r\n+//           ),\r\n+//         ),\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+\r\n+//   static Widget noAccess() {\r\n+//     return Material(\r\n+//       child: Center(\r\n+//         child: Txt(\r\n+//           text: \"You have no permission to see this content\",\r\n+//           fontSize: 20,\r\n+//           textAlign: TextAlign.center,\r\n+//         ),\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+\r\n+//   static bool isLight(BuildContext context) =>\r\n+//       Theme.of(context).brightness == Brightness.light;\r\n+\r\n+//   // static Future<bool> sendEmail(String email) async {\r\n+//   //   bool success = false;\r\n+//   //   email = email.toLowerCase();\r\n+//   //   if (email.contains('@')) {\r\n+//   //     success = true;\r\n+//   //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+//   //   } else {\r\n+//   //     showToast(\"Email address not found\");\r\n+//   //   }\r\n+//   //   return success;\r\n+//   // }\r\n+\r\n+//   static Future<void> copy(dynamic text) async {\r\n+//     await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+//     // showToast(\"Text copied!\");\r\n+//   }\r\n+\r\n+//   // static void debugToast(dynamic message) {\r\n+//   //   if (debugging) showToast(message);\r\n+//   // }\r\n+\r\n+//   // static void showToast(dynamic message) {\r\n+//   //   if (debugging) print(\"$message\");\r\n+//   //   try {\r\n+//   //     Fluttertoast.showToast(\r\n+//   //       msg: '$message',\r\n+//   //       toastLength: Toast.LENGTH_SHORT,\r\n+//   //       gravity: ToastGravity.CENTER,\r\n+//   //       backgroundColor: Colorz.primaryColor,\r\n+//   //       textColor: Colors.white,\r\n+//   //       fontSize: 16,\r\n+//   //     );\r\n+//   //   } catch (e) {\r\n+//   //     print(\"Error showing Toast: $e\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   ///[filter] Removes all the special characters and spaces\r\n+//   static String filter(String text) {\r\n+//     return (text\r\n+//         .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+//         .replaceAll(' ', '')\r\n+//         .replaceAll('_', ''));\r\n+//   }\r\n+\r\n+//   ///Returns the [DateTime] values in a human readable format\r\n+//   static String timeAgo(\r\n+//     dynamic input, {\r\n+//     String? prefix,\r\n+//   }) {\r\n+//     DateTime? finalDateTime;\r\n+\r\n+//     if (input is DateTime) finalDateTime = input;\r\n+//     if (input is int) {\r\n+//       finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+//     }\r\n+\r\n+//     ///If the input is not valid, then just return ''\r\n+//     if (finalDateTime == null) return '';\r\n+\r\n+//     final Duration difference = DateTime.now().difference(finalDateTime);\r\n+//     bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+//         DateTime.now().millisecondsSinceEpoch;\r\n+//     String ago;\r\n+\r\n+//     if (difference.inDays > 8) {\r\n+//       ago = finalDateTime.toString().substring(0, 10);\r\n+//     } else if ((difference.inDays / 7).floor() >= 1) {\r\n+//       ago = isPast ? '1 week ago' : '1 week';\r\n+//     } else if (difference.inDays >= 2) {\r\n+//       ago = isPast\r\n+//           ? '${difference.inDays} days ago'\r\n+//           : '${difference.inDays} days';\r\n+//     } else if (difference.inDays >= 1) {\r\n+//       ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+//     } else if (difference.inHours >= 2) {\r\n+//       ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+//     } else if (difference.inHours >= 1) {\r\n+//       ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+//     } else if (difference.inMinutes >= 2) {\r\n+//       ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+//     } else if (difference.inMinutes >= 1) {\r\n+//       ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+//     } else if (difference.inSeconds >= 3) {\r\n+//       ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+//     } else {\r\n+//       ago = isPast ? 'Just now' : 'now';\r\n+//     }\r\n+//     return prefix == null ? ago : '$prefix $ago';\r\n+//   }\r\n+\r\n+//   static String toDateTime(int createdAt) {\r\n+//     return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+//   }\r\n+\r\n+//   static String toDate(int createdAt,\r\n+//       {bool showFullYear = true, bool showYear = true}) {\r\n+//     DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+//     int day = date.day;\r\n+//     int month0 = date.month;\r\n+//     String month = toMonth(month0);\r\n+//     String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+//     return '$day $month $year';\r\n+//   }\r\n+\r\n+//   static String toTime(int createdAt) {\r\n+//     DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+//     int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+//     String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+//     String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+//     return '$hour:$minutes $amPm';\r\n+//   }\r\n+\r\n+//   static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+//     int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+//     return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+//   }\r\n+\r\n+//   static String toMonth(int month) {\r\n+//     return month > 0 ? months[month - 1] : '$month';\r\n+//   }\r\n+\r\n+//   static const List<String> months = [\r\n+//     'Jan',\r\n+//     'Feb',\r\n+//     'Mar',\r\n+//     'Apr',\r\n+//     'May',\r\n+//     'Jun',\r\n+//     'Jul',\r\n+//     'Aug',\r\n+//     'Sep',\r\n+//     'Oct',\r\n+//     'Nov',\r\n+//     'Dec',\r\n+//   ];\r\n+\r\n+//   // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+//   //   try {\r\n+//   //     if (url != null) {\r\n+//   //       print(\"URL: $url\");\r\n+//   //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+//   //     } else {\r\n+//   //       showToast(\"No url!\");\r\n+//   //     }\r\n+//   //   } catch (exception) {\r\n+//   //     showToast(\"Error $exception\");\r\n+//   //   }\r\n+//   // }\r\n+\r\n+//   static Future wait(int milliseconds) async {\r\n+//     await Future.delayed(Duration(milliseconds: milliseconds));\r\n+//   }\r\n+\r\n+//   static void push(Widget? child, BuildContext context) {\r\n+//     if (child != null) {\r\n+//       Navigator.push(context, FadePageRoute(widget: child));\r\n+//     } else {\r\n+//       // String _log = \"No destination page found\";\r\n+//       // debugMode ? showToast(_log) : print(_log);\r\n+//     }\r\n+//   }\r\n+\r\n+//   @Deprecated('Use pop')\r\n+//   static void close(BuildContext context) => pop(context);\r\n+//   static void pop(BuildContext context) {\r\n+//     try {\r\n+//       Navigator.pop(context);\r\n+//     } catch (e) {}\r\n+//   }\r\n+\r\n+//   static double mheight(BuildContext context) {\r\n+//     return MediaQuery.of(context).size.height;\r\n+//   }\r\n+\r\n+//   static double mwidth(BuildContext context) {\r\n+//     return MediaQuery.of(context).size.width;\r\n+//   }\r\n+\r\n+//   static Widget empty() {\r\n+//     return Padding(\r\n+//       padding: const EdgeInsets.all(8.0),\r\n+//       child: Center(\r\n+//         child: Padding(\r\n+//           padding: const EdgeInsets.all(18),\r\n+//           child: Icon(\r\n+//             Icons.delete,\r\n+//             size: 100,\r\n+//             color: Colors.grey.shade300,\r\n+//           ),\r\n+//         ),\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+\r\n+//   static Widget divider({Color? color}) {\r\n+//     return Padding(\r\n+//       padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+//       child: Divider(\r\n+//         height: 4.5,\r\n+//         color: color,\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+\r\n+//   static Widget heading({dynamic text}) {\r\n+//     return const Padding(\r\n+//       padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+//       child: Text(\r\n+//         \"this is me\",\r\n+//         style: TextStyle(\r\n+//           color: Colors.grey,\r\n+//           fontWeight: FontWeight.bold,\r\n+//         ),\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+\r\n+//   static Widget offHeader(bool hide, dynamic text) {\r\n+//     return Offstage(\r\n+//       offstage: hide,\r\n+//       child: Container(\r\n+//         alignment: Alignment.bottomLeft,\r\n+//         padding: const EdgeInsets.only(top: 20, left: 6),\r\n+//         child: Txt(\r\n+//           text: text,\r\n+//           color: Colors.grey,\r\n+//           fontWeight: FontWeight.bold,\r\n+//         ),\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+// }\r\n"
                },
                {
                    "date": 1675886579898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,513 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+import 'package:fluttership/Constants/Constants.dart';\r\n+import 'package:intl/intl.dart';\r\n+\r\n+part './Loader.dart';\r\n+part './Txt.dart';\r\n+part './Scroller.dart';\r\n+part './Img.dart';\r\n+part './Inkk.dart';\r\n+part './Avatar.dart';\r\n+part './CrossFade.dart';\r\n+part './ColorTile.dart';\r\n+part './Button.dart';\r\n+part './Expandile.dart';\r\n+part './DoubleCard.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Txt(\r\n+            text: \"Not found!\",\r\n+            fontWeight: FontWeight.bold,\r\n+            fontSize: 50,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+          subtitle: Txt(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886602816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,23 +8,9 @@\n import 'package:flutter/foundation.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:flutter/services.dart';\r\n // import 'package:fluttership/Repos/Img.dart';\r\n-import 'package:fluttership/Constants/Constants.dart';\r\n-import 'package:intl/intl.dart';\r\n \r\n-part './Loader.dart';\r\n-part './Txt.dart';\r\n-part './Scroller.dart';\r\n-part './Img.dart';\r\n-part './Inkk.dart';\r\n-part './Avatar.dart';\r\n-part './CrossFade.dart';\r\n-part './ColorTile.dart';\r\n-part './Button.dart';\r\n-part './Expandile.dart';\r\n-part './DoubleCard.dart';\r\n-\r\n @Deprecated('Use Widgets.instance')\r\n class Common {\r\n   Common._privateConstructor();\r\n   static final Common _instance = Common._privateConstructor();\r\n@@ -510,1537 +496,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-// import 'dart:math' as math;\r\n-// import 'package:cached_network_image/cached_network_image.dart';\r\n-// // import 'package:firebase_storage/firebase_storage.dart';\r\n-// // import 'package:fluttership/Models/IconLabel.dart';\r\n-// // import 'package:fluttership/Models/Logg.dart';\r\n-// // import 'package:fluttership/Models/RichString.dart';\r\n-// // import 'package:fluttership/Models/SelectionStep.dart';\r\n-// import 'package:flutter/foundation.dart';\r\n-// import 'package:flutter/material.dart';\r\n-// import 'package:flutter/services.dart';\r\n-// // import 'package:fluttership/Repos/Img.dart';\r\n-// import 'package:fluttership/Constants/Constants.dart';\r\n-// import 'package:intl/intl.dart';\r\n-\r\n-// part './Loader.dart';\r\n-// part './Txt.dart';\r\n-// part './Scroller.dart';\r\n-// part './Img.dart';\r\n-// part './Inkk.dart';\r\n-// part './Avatar.dart';\r\n-// part './CrossFade.dart';\r\n-// part './ColorTile.dart';\r\n-// part './Button.dart';\r\n-// part './Expandile.dart';\r\n-// part './DoubleCard.dart';\r\n-\r\n-// @Deprecated('Use Widgets.instance')\r\n-// class Common {\r\n-//   Common._privateConstructor();\r\n-//   static final Common _instance = Common._privateConstructor();\r\n-//   static Common get instance => _instance;\r\n-// }\r\n-\r\n-// class FadePageRoute extends PageRouteBuilder {\r\n-//   final Widget widget;\r\n-//   FadePageRoute({required this.widget})\r\n-//       : super(\r\n-//             pageBuilder: (BuildContext context, Animation<double> animation,\r\n-//                 Animation<double> secondaryAnimation) {\r\n-//               return widget;\r\n-//             },\r\n-//             transitionDuration: const Duration(milliseconds: 300),\r\n-//             transitionsBuilder:\r\n-//                 ((context, animation, secondaryAnimation, child) {\r\n-//               return SlideTransition(\r\n-//                   transformHitTests: false,\r\n-//                   position: Tween<Offset>(\r\n-//                           begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-//                       .animate(animation),\r\n-//                   child: SlideTransition(\r\n-//                       position: Tween<Offset>(\r\n-//                               begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-//                           .animate(secondaryAnimation),\r\n-//                       child: child));\r\n-//             }));\r\n-// }\r\n-\r\n-// class Widgets {\r\n-//   Widgets._privateConstructor();\r\n-//   static final Widgets _instance = Widgets._privateConstructor();\r\n-//   static Widgets get instance => _instance;\r\n-\r\n-//   static String avatar(String phoneNumberOrRemoteKey) {\r\n-//     String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-//     return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-//   }\r\n-\r\n-//   static Widget loadingCircle({Color? color, double size = 26}) {\r\n-//     return Material(\r\n-//       type: MaterialType.circle,\r\n-//       color: color,\r\n-//       elevation: 0,\r\n-//       child: SizedBox(\r\n-//         height: size,\r\n-//         width: size,\r\n-//         child: const FittedBox(\r\n-//           fit: BoxFit.scaleDown,\r\n-//           child: CircularProgressIndicator(\r\n-//             strokeWidth: 5,\r\n-//             valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-//           ),\r\n-//         ),\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-\r\n-//   ///This will return the darken color of the given value\r\n-//   static Color darkenColor(Color color, double value) =>\r\n-//       HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-//   static Txt subtitle(BuildContext context, String text,\r\n-//       {TextAlign? textAlign, double? fontSize = 12}) {\r\n-//     return Txt(\r\n-//         text: text,\r\n-//         textAlign: textAlign,\r\n-//         fontSize: fontSize,\r\n-//         color: subtitleColor(context));\r\n-//   }\r\n-\r\n-//   static Color subtitleColor(BuildContext context) {\r\n-//     return Theme.of(context).textTheme.bodySmall!.color!;\r\n-//   }\r\n-\r\n-//   static const Duration duration = Duration(milliseconds: 350);\r\n-//   static const Duration duration1Sec = Duration(seconds: 1);\r\n-//   static const Duration duration2Sec = Duration(seconds: 2);\r\n-//   static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-//   static const Curve curve = Curves.easeIn;\r\n-\r\n-//   static bool debugging = kDebugMode;\r\n-//   static bool debugMode = kDebugMode;\r\n-\r\n-//   static List<String> generateTags(List sentences) {\r\n-//     List<String> tags = [];\r\n-//     for (var sentence in sentences) {\r\n-//       if (sentence != null) {\r\n-//         List words = '$sentence'.toLowerCase().split(' ');\r\n-//         for (var word in words) {\r\n-//           if (tags.contains(word) == false) tags.add(word);\r\n-//         }\r\n-//       }\r\n-//     }\r\n-//     return tags\r\n-//       ..sort((b, a) => a.length.compareTo(b.length))\r\n-//       ..removeWhere((element) => element.length < 3);\r\n-//   }\r\n-\r\n-//   static Widget boldHeading(String string, {double? left}) {\r\n-//     return Container(\r\n-//       padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-//       alignment: Alignment.centerLeft,\r\n-//       child: Txt(\r\n-//         text: string,\r\n-//         fontWeight: FontWeight.bold,\r\n-//         textAlign: TextAlign.start,\r\n-//         fontSize: 16,\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-\r\n-//   ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-//   static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-//     final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-//     return DecoratedBox(\r\n-//       decoration: BoxDecoration(\r\n-//         color: color0.withOpacity(0.15),\r\n-//         shape: BoxShape.circle,\r\n-//       ),\r\n-//       child: Transform.rotate(\r\n-//         angle: angle * math.pi / 180,\r\n-//         child: Icon(\r\n-//           back ? Icons.chevron_left : Icons.chevron_right,\r\n-//           size: 18,\r\n-//           color: color0,\r\n-//         ),\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-\r\n-//   static List<String> generateListString(List? list) {\r\n-//     if (list == null) return [];\r\n-//     return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-//   }\r\n-\r\n-//   // static List<Logg> generateLogs(List? list) {\r\n-//   //   if (list == null) return [];\r\n-//   //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-//   // }\r\n-\r\n-//   static String get today =>\r\n-//       \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-//   // static Future<bool?> call(String number) async {\r\n-//   // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-//   // }\r\n-\r\n-//   // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-//   //   String url = 'sms:$phoneNumber?body=$text';\r\n-//   //   await launchurl(url);\r\n-//   // }\r\n-\r\n-//   static Widget deleted() {\r\n-//     return Center(\r\n-//       child: Txt(\r\n-//         fontSize: 16,\r\n-//         text: \"Deleted\",\r\n-//         color: Colors.grey,\r\n-//         fontWeight: FontWeight.bold,\r\n-//         textAlign: TextAlign.center,\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-\r\n-//   // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-//   //   return RichTxt(maxLines: 1, richStrings: [\r\n-//   //     RichString(_staffTypeLabel(type)),\r\n-//   //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-//   //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-//   //   ]);\r\n-//   // }\r\n-\r\n-//   // static Widget _staffTypeLabel(StaffType type) {\r\n-//   //   return Container(\r\n-//   //       child: Txt(\r\n-//   //         text: type.viewer,\r\n-//   //         fontSize: 8,\r\n-//   //         color: Colors.white,\r\n-//   //       ),\r\n-//   //       padding: EdgeInsets.all(2),\r\n-//   //       decoration: BoxDecoration(\r\n-//   //         color: type.color,\r\n-//   //         borderRadius: BorderRadius.circular(4),\r\n-//   //       ));\r\n-//   // }\r\n-\r\n-//   static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-//     DateTime dateTime =\r\n-//         DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-//     final difference = DateTime.now().difference(dateTime);\r\n-\r\n-//     if (difference.inDays > 8) {\r\n-//       return dateTime.toString().substring(0, 10);\r\n-//     } else if ((difference.inDays / 7).floor() >= 1) {\r\n-//       return (numericDates) ? '1 week ago' : 'Last week';\r\n-//     } else if (difference.inDays >= 2) {\r\n-//       return '${difference.inDays} days ago';\r\n-//     } else if (difference.inDays >= 1) {\r\n-//       return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-//     } else if (difference.inHours >= 2) {\r\n-//       return '${difference.inHours} hours ago';\r\n-//     } else if (difference.inHours >= 1) {\r\n-//       return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-//     } else if (difference.inMinutes >= 2) {\r\n-//       return '${difference.inMinutes} minutes ago';\r\n-//     } else if (difference.inMinutes >= 1) {\r\n-//       return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-//     } else if (difference.inSeconds >= 3) {\r\n-//       return '${difference.inSeconds} seconds ago';\r\n-//     } else {\r\n-//       return 'Just now';\r\n-//     }\r\n-//   }\r\n-\r\n-//   static Widget notFoundWidget() {\r\n-//     return Material(\r\n-//       child: Center(\r\n-//         child: ListTile(\r\n-//           title: Txt(\r\n-//             text: \"Not found!\",\r\n-//             fontWeight: FontWeight.bold,\r\n-//             fontSize: 50,\r\n-//             textAlign: TextAlign.center,\r\n-//           ),\r\n-//           subtitle: Txt(\r\n-//             text: \"The requested content is not found at this moment.\",\r\n-//             fontSize: 20,\r\n-//             textAlign: TextAlign.center,\r\n-//           ),\r\n-//         ),\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-\r\n-//   static Widget noAccess() {\r\n-//     return Material(\r\n-//       child: Center(\r\n-//         child: Txt(\r\n-//           text: \"You have no permission to see this content\",\r\n-//           fontSize: 20,\r\n-//           textAlign: TextAlign.center,\r\n-//         ),\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-\r\n-//   static bool isLight(BuildContext context) =>\r\n-//       Theme.of(context).brightness == Brightness.light;\r\n-\r\n-//   // static Future<bool> sendEmail(String email) async {\r\n-//   //   bool success = false;\r\n-//   //   email = email.toLowerCase();\r\n-//   //   if (email.contains('@')) {\r\n-//   //     success = true;\r\n-//   //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-//   //   } else {\r\n-//   //     showToast(\"Email address not found\");\r\n-//   //   }\r\n-//   //   return success;\r\n-//   // }\r\n-\r\n-//   static Future<void> copy(dynamic text) async {\r\n-//     await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-//     // showToast(\"Text copied!\");\r\n-//   }\r\n-\r\n-//   // static void debugToast(dynamic message) {\r\n-//   //   if (debugging) showToast(message);\r\n-//   // }\r\n-\r\n-//   // static void showToast(dynamic message) {\r\n-//   //   if (debugging) print(\"$message\");\r\n-//   //   try {\r\n-//   //     Fluttertoast.showToast(\r\n-//   //       msg: '$message',\r\n-//   //       toastLength: Toast.LENGTH_SHORT,\r\n-//   //       gravity: ToastGravity.CENTER,\r\n-//   //       backgroundColor: Colorz.primaryColor,\r\n-//   //       textColor: Colors.white,\r\n-//   //       fontSize: 16,\r\n-//   //     );\r\n-//   //   } catch (e) {\r\n-//   //     print(\"Error showing Toast: $e\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   ///[filter] Removes all the special characters and spaces\r\n-//   static String filter(String text) {\r\n-//     return (text\r\n-//         .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-//         .replaceAll(' ', '')\r\n-//         .replaceAll('_', ''));\r\n-//   }\r\n-\r\n-//   ///Returns the [DateTime] values in a human readable format\r\n-//   static String timeAgo(\r\n-//     dynamic input, {\r\n-//     String? prefix,\r\n-//   }) {\r\n-//     DateTime? finalDateTime;\r\n-\r\n-//     if (input is DateTime) finalDateTime = input;\r\n-//     if (input is int) {\r\n-//       finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-//     }\r\n-\r\n-//     ///If the input is not valid, then just return ''\r\n-//     if (finalDateTime == null) return '';\r\n-\r\n-//     final Duration difference = DateTime.now().difference(finalDateTime);\r\n-//     bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-//         DateTime.now().millisecondsSinceEpoch;\r\n-//     String ago;\r\n-\r\n-//     if (difference.inDays > 8) {\r\n-//       ago = finalDateTime.toString().substring(0, 10);\r\n-//     } else if ((difference.inDays / 7).floor() >= 1) {\r\n-//       ago = isPast ? '1 week ago' : '1 week';\r\n-//     } else if (difference.inDays >= 2) {\r\n-//       ago = isPast\r\n-//           ? '${difference.inDays} days ago'\r\n-//           : '${difference.inDays} days';\r\n-//     } else if (difference.inDays >= 1) {\r\n-//       ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-//     } else if (difference.inHours >= 2) {\r\n-//       ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-//     } else if (difference.inHours >= 1) {\r\n-//       ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-//     } else if (difference.inMinutes >= 2) {\r\n-//       ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-//     } else if (difference.inMinutes >= 1) {\r\n-//       ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-//     } else if (difference.inSeconds >= 3) {\r\n-//       ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-//     } else {\r\n-//       ago = isPast ? 'Just now' : 'now';\r\n-//     }\r\n-//     return prefix == null ? ago : '$prefix $ago';\r\n-//   }\r\n-\r\n-//   static String toDateTime(int createdAt) {\r\n-//     return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-//   }\r\n-\r\n-//   static String toDate(int createdAt,\r\n-//       {bool showFullYear = true, bool showYear = true}) {\r\n-//     DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-//     int day = date.day;\r\n-//     int month0 = date.month;\r\n-//     String month = toMonth(month0);\r\n-//     String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-//     return '$day $month $year';\r\n-//   }\r\n-\r\n-//   static String toTime(int createdAt) {\r\n-//     DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-//     int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-//     String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-//     String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-//     return '$hour:$minutes $amPm';\r\n-//   }\r\n-\r\n-//   static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-//     int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-//     return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-//   }\r\n-\r\n-//   static String toMonth(int month) {\r\n-//     return month > 0 ? months[month - 1] : '$month';\r\n-//   }\r\n-\r\n-//   static const List<String> months = [\r\n-//     'Jan',\r\n-//     'Feb',\r\n-//     'Mar',\r\n-//     'Apr',\r\n-//     'May',\r\n-//     'Jun',\r\n-//     'Jul',\r\n-//     'Aug',\r\n-//     'Sep',\r\n-//     'Oct',\r\n-//     'Nov',\r\n-//     'Dec',\r\n-//   ];\r\n-\r\n-//   // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-//   //   try {\r\n-//   //     if (url != null) {\r\n-//   //       print(\"URL: $url\");\r\n-//   //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-//   //     } else {\r\n-//   //       showToast(\"No url!\");\r\n-//   //     }\r\n-//   //   } catch (exception) {\r\n-//   //     showToast(\"Error $exception\");\r\n-//   //   }\r\n-//   // }\r\n-\r\n-//   static Future wait(int milliseconds) async {\r\n-//     await Future.delayed(Duration(milliseconds: milliseconds));\r\n-//   }\r\n-\r\n-//   static void push(Widget? child, BuildContext context) {\r\n-//     if (child != null) {\r\n-//       Navigator.push(context, FadePageRoute(widget: child));\r\n-//     } else {\r\n-//       // String _log = \"No destination page found\";\r\n-//       // debugMode ? showToast(_log) : print(_log);\r\n-//     }\r\n-//   }\r\n-\r\n-//   @Deprecated('Use pop')\r\n-//   static void close(BuildContext context) => pop(context);\r\n-//   static void pop(BuildContext context) {\r\n-//     try {\r\n-//       Navigator.pop(context);\r\n-//     } catch (e) {}\r\n-//   }\r\n-\r\n-//   static double mheight(BuildContext context) {\r\n-//     return MediaQuery.of(context).size.height;\r\n-//   }\r\n-\r\n-//   static double mwidth(BuildContext context) {\r\n-//     return MediaQuery.of(context).size.width;\r\n-//   }\r\n-\r\n-//   static Widget empty() {\r\n-//     return Padding(\r\n-//       padding: const EdgeInsets.all(8.0),\r\n-//       child: Center(\r\n-//         child: Padding(\r\n-//           padding: const EdgeInsets.all(18),\r\n-//           child: Icon(\r\n-//             Icons.delete,\r\n-//             size: 100,\r\n-//             color: Colors.grey.shade300,\r\n-//           ),\r\n-//         ),\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-\r\n-//   static Widget divider({Color? color}) {\r\n-//     return Padding(\r\n-//       padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-//       child: Divider(\r\n-//         height: 4.5,\r\n-//         color: color,\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-\r\n-//   static Widget heading({dynamic text}) {\r\n-//     return const Padding(\r\n-//       padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-//       child: Text(\r\n-//         \"this is me\",\r\n-//         style: TextStyle(\r\n-//           color: Colors.grey,\r\n-//           fontWeight: FontWeight.bold,\r\n-//         ),\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-\r\n-//   static Widget offHeader(bool hide, dynamic text) {\r\n-//     return Offstage(\r\n-//       offstage: hide,\r\n-//       child: Container(\r\n-//         alignment: Alignment.bottomLeft,\r\n-//         padding: const EdgeInsets.only(top: 20, left: 6),\r\n-//         child: Txt(\r\n-//           text: text,\r\n-//           color: Colors.grey,\r\n-//           fontWeight: FontWeight.bold,\r\n-//         ),\r\n-//       ),\r\n-//     );\r\n-//   }\r\n-// }\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-import 'package:fluttership/Constants/Constants.dart';\r\n-import 'package:intl/intl.dart';\r\n-\r\n-part './Loader.dart';\r\n-part './Txt.dart';\r\n-part './Scroller.dart';\r\n-part './Img.dart';\r\n-part './Inkk.dart';\r\n-part './Avatar.dart';\r\n-part './CrossFade.dart';\r\n-part './ColorTile.dart';\r\n-part './Button.dart';\r\n-part './Expandile.dart';\r\n-part './DoubleCard.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position:\r\n-                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n-                          .animate(animation),\r\n-                  child: new SlideTransition(\r\n-                      position: new Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.caption!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> _tags = [];\r\n-    sentences.forEach((sentence) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        words.forEach((word) {\r\n-          if (_tags.contains(word) == false) _tags.add(word);\r\n-        });\r\n-      }\r\n-    });\r\n-    return _tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color _color = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: _color.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: _color,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Txt(\r\n-            text: \"Not found!\",\r\n-            fontWeight: FontWeight.bold,\r\n-            fontSize: 50,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int)\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = '${isPast ? 'Just now' : 'now'}';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int _month = date.month;\r\n-    String month = toMonth(_month);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text( \"this is me\", style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-       \r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-import 'package:fluttership/Constants/Constants.dart';\r\n-import 'package:intl/intl.dart';\r\n-\r\n-part './Loader.dart';\r\n-part './Txt.dart';\r\n-part './Scroller.dart';\r\n-part './Img.dart';\r\n-part './Inkk.dart';\r\n-part './Avatar.dart';\r\n-part './CrossFade.dart';\r\n-part './ColorTile.dart';\r\n-part './Button.dart';\r\n-part './Expandile.dart';\r\n-part './DoubleCard.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position:\r\n-                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n-                          .animate(animation),\r\n-                  child: new SlideTransition(\r\n-                      position: new Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.caption!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> _tags = [];\r\n-    sentences.forEach((sentence) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        words.forEach((word) {\r\n-          if (_tags.contains(word) == false) _tags.add(word);\r\n-        });\r\n-      }\r\n-    });\r\n-    return _tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color _color = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: _color.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: _color,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Txt(\r\n-            text: \"Not found!\",\r\n-            fontWeight: FontWeight.bold,\r\n-            fontSize: 50,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int)\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = '${isPast ? 'Just now' : 'now'}';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int _month = date.month;\r\n-    String month = toMonth(_month);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text( \"this is me\", style: TextStyle(),\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1675886616745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -232,9 +232,9 @@\n   static Widget notFoundWidget() {\r\n     return Material(\r\n       child: Center(\r\n         child: ListTile(\r\n-          title: Txt(\r\n+          title: (\r\n             text: \"Not found!\",\r\n             fontWeight: FontWeight.bold,\r\n             fontSize: 50,\r\n             textAlign: TextAlign.center,\r\n"
                },
                {
                    "date": 1675886625099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,498 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Text(\"Not found!\",\r\n+            fontWeight: FontWeight.bold,\r\n+            fontSize: 50,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+          subtitle: Txt(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886634851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,11 +233,9 @@\n     return Material(\r\n       child: Center(\r\n         child: ListTile(\r\n           title: Text(\"Not found!\",\r\n-            fontWeight: FontWeight.bold,\r\n-            fontSize: 50,\r\n-            textAlign: TextAlign.center,\r\n+            style: Text,\r\n           ),\r\n           subtitle: Txt(\r\n             text: \"The requested content is not found at this moment.\",\r\n             fontSize: 20,\r\n@@ -495,503 +493,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: (\r\n-            text: \"Not found!\",\r\n-            fontWeight: FontWeight.bold,\r\n-            fontSize: 50,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1675886641411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,500 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Text(\"Not found!\",\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+              textAlign: TextAlign.center,\r\n+            ),\r\n+          ),\r\n+          subtitle: Txt(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886648841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -233,13 +233,11 @@\n     return Material(\r\n       child: Center(\r\n         child: ListTile(\r\n           title: Text(\"Not found!\",\r\n-            style: TextStyle(\r\n-              fontWeight: FontWeight.bold,\r\n-              fontSize: 50,\r\n-              textAlign: TextAlign.center,\r\n-            ),\r\n+            style: TextStyle(fontWeight: FontWeight.bold,\r\n+            fontSize: 50,\r\n+            textAlign: TextAlign.center,),\r\n           ),\r\n           subtitle: Txt(\r\n             text: \"The requested content is not found at this moment.\",\r\n             fontSize: 20,\r\n@@ -497,500 +495,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Text(\"Not found!\",\r\n-            style: Text,\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1675886657726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -235,9 +235,9 @@\n         child: ListTile(\r\n           title: Text(\"Not found!\",\r\n             style: TextStyle(fontWeight: FontWeight.bold,\r\n             fontSize: 50,\r\n-            textAlign: TextAlign.center,),\r\n+            ),\r\n           ),\r\n           subtitle: Txt(\r\n             text: \"The requested content is not found at this moment.\",\r\n             fontSize: 20,\r\n"
                },
                {
                    "date": 1675886664203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,501 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: const Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Txt(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886673691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,501 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: const Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Te(\r\n+            text: \"The requested content is not found at this moment.\",\r\n+            fontSize: 20,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886682576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,501 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: const Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Text(\r\n+            \"The requested content is not found at this moment.\",\r\n+           \r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886691284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,501 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: const Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Text(\r\n+            \"The requested content is not found at this moment.\",\r\n+           style: Text,\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886696713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,503 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: const Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Text(\r\n+            \"The requested content is not found at this moment.\",\r\n+           style: TextStyle(\r\n+              fontSize: 20,\r\n+            ),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Txt(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886704181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,503 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return const Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Text(\r\n+            \"The requested content is not found at this moment.\",\r\n+            style: TextStyle(\r\n+              fontSize: 20,\r\n+            ),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: (\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886710272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,503 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return const Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Text(\r\n+            \"The requested content is not found at this moment.\",\r\n+            style: TextStyle(\r\n+              fontSize: 20,\r\n+            ),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: TextField(\r\n+          text: \"You have no permission to see this content\",\r\n+          fontSize: 20,\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886719727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,503 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Txt(\r\n+        fontSize: 16,\r\n+        text: \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return const Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Text(\r\n+            \"The requested content is not found at this moment.\",\r\n+            style: TextStyle(\r\n+              fontSize: 20,\r\n+            ),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return Material(\r\n+      child: Center(\r\n+        child: Text(\r\n+          \"You have no permission to see this content\",\r\n+          \r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886726767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,9 @@\n     return Material(\r\n       child: Center(\r\n         child: Text(\r\n           \"You have no permission to see this content\",\r\n-          \r\n+          style: ,\r\n           textAlign: TextAlign.center,\r\n         ),\r\n       ),\r\n     );\r\n@@ -500,4015 +500,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return const Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Text(\r\n-            \"Not found!\",\r\n-            textAlign: TextAlign.center,\r\n-            style: TextStyle(\r\n-              fontWeight: FontWeight.bold,\r\n-              fontSize: 50,\r\n-            ),\r\n-          ),\r\n-          subtitle: Text(\r\n-            \"The requested content is not found at this moment.\",\r\n-            style: TextStyle(\r\n-              fontSize: 20,\r\n-            ),\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: TextField(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return const Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Text(\r\n-            \"Not found!\",\r\n-            textAlign: TextAlign.center,\r\n-            style: TextStyle(\r\n-              fontWeight: FontWeight.bold,\r\n-              fontSize: 50,\r\n-            ),\r\n-          ),\r\n-          subtitle: Text(\r\n-            \"The requested content is not found at this moment.\",\r\n-            style: TextStyle(\r\n-              fontSize: 20,\r\n-            ),\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: (\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: const Text(\r\n-            \"Not found!\",\r\n-            textAlign: TextAlign.center,\r\n-            style: TextStyle(\r\n-              fontWeight: FontWeight.bold,\r\n-              fontSize: 50,\r\n-            ),\r\n-          ),\r\n-          subtitle: Text(\r\n-            \"The requested content is not found at this moment.\",\r\n-           style: TextStyle(\r\n-              fontSize: 20,\r\n-            ),\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: const Text(\r\n-            \"Not found!\",\r\n-            textAlign: TextAlign.center,\r\n-            style: TextStyle(\r\n-              fontWeight: FontWeight.bold,\r\n-              fontSize: 50,\r\n-            ),\r\n-          ),\r\n-          subtitle: Text(\r\n-            \"The requested content is not found at this moment.\",\r\n-           style: Text,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: const Text(\r\n-            \"Not found!\",\r\n-            textAlign: TextAlign.center,\r\n-            style: TextStyle(\r\n-              fontWeight: FontWeight.bold,\r\n-              fontSize: 50,\r\n-            ),\r\n-          ),\r\n-          subtitle: Text(\r\n-            \"The requested content is not found at this moment.\",\r\n-           \r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: const Text(\r\n-            \"Not found!\",\r\n-            textAlign: TextAlign.center,\r\n-            style: TextStyle(\r\n-              fontWeight: FontWeight.bold,\r\n-              fontSize: 50,\r\n-            ),\r\n-          ),\r\n-          subtitle: Te(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: const Text(\r\n-            \"Not found!\",\r\n-            textAlign: TextAlign.center,\r\n-            style: TextStyle(\r\n-              fontWeight: FontWeight.bold,\r\n-              fontSize: 50,\r\n-            ),\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Txt(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Text(\"Not found!\",\r\n-            style: TextStyle(fontWeight: FontWeight.bold,\r\n-            fontSize: 50,\r\n-            ),\r\n-          ),\r\n-          subtitle: Txt(\r\n-            text: \"The requested content is not found at this moment.\",\r\n-            fontSize: 20,\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return Material(\r\n-      child: Center(\r\n-        child: Txt(\r\n-          text: \"You have no permission to see this content\",\r\n-          fontSize: 20,\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1675886732733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,9 +257,9 @@\n     return Material(\r\n       child: Center(\r\n         child: Text(\r\n           \"You have no permission to see this content\",\r\n-          style: ,\r\n+          style: TextStyle(),\r\n           textAlign: TextAlign.center,\r\n         ),\r\n       ),\r\n     );\r\n"
                },
                {
                    "date": 1675886743305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n   // }\r\n \r\n   static Widget deleted() {\r\n     return Center(\r\n-      child: Txt(\r\n+      child: Text(\r\n         fontSize: 16,\r\n         text: \"Deleted\",\r\n         color: Colors.grey,\r\n         fontWeight: FontWeight.bold,\r\n@@ -253,13 +253,15 @@\n     );\r\n   }\r\n \r\n   static Widget noAccess() {\r\n-    return Material(\r\n+    return const Material(\r\n       child: Center(\r\n         child: Text(\r\n           \"You have no permission to see this content\",\r\n-          style: TextStyle(),\r\n+          style: TextStyle(\r\n+            fontSize: 20,\r\n+          ),\r\n           textAlign: TextAlign.center,\r\n         ),\r\n       ),\r\n     );\r\n"
                },
                {
                    "date": 1675886750412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,505 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Text(\r\n+        fontSize: 16,\r\n+         \"Deleted\",\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return const Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Text(\r\n+            \"The requested content is not found at this moment.\",\r\n+            style: TextStyle(\r\n+              fontSize: 20,\r\n+            ),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return const Material(\r\n+      child: Center(\r\n+        child: Text(\r\n+          \"You have no permission to see this content\",\r\n+          style: TextStyle(\r\n+            fontSize: 20,\r\n+          ),\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886757612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n \r\n   static Widget deleted() {\r\n     return Center(\r\n       child: Text(\r\n-        fontSize: 16,\r\n+       \r\n          \"Deleted\",\r\n         color: Colors.grey,\r\n         fontWeight: FontWeight.bold,\r\n         textAlign: TextAlign.center,\r\n@@ -502,509 +502,4 @@\n       ),\r\n     );\r\n   }\r\n }\r\n-import 'dart:math' as math;\r\n-import 'package:cached_network_image/cached_network_image.dart';\r\n-// import 'package:firebase_storage/firebase_storage.dart';\r\n-// import 'package:fluttership/Models/IconLabel.dart';\r\n-// import 'package:fluttership/Models/Logg.dart';\r\n-// import 'package:fluttership/Models/RichString.dart';\r\n-// import 'package:fluttership/Models/SelectionStep.dart';\r\n-import 'package:flutter/foundation.dart';\r\n-import 'package:flutter/material.dart';\r\n-import 'package:flutter/services.dart';\r\n-// import 'package:fluttership/Repos/Img.dart';\r\n-\r\n-@Deprecated('Use Widgets.instance')\r\n-class Common {\r\n-  Common._privateConstructor();\r\n-  static final Common _instance = Common._privateConstructor();\r\n-  static Common get instance => _instance;\r\n-}\r\n-\r\n-class FadePageRoute extends PageRouteBuilder {\r\n-  final Widget widget;\r\n-  FadePageRoute({required this.widget})\r\n-      : super(\r\n-            pageBuilder: (BuildContext context, Animation<double> animation,\r\n-                Animation<double> secondaryAnimation) {\r\n-              return widget;\r\n-            },\r\n-            transitionDuration: const Duration(milliseconds: 300),\r\n-            transitionsBuilder:\r\n-                ((context, animation, secondaryAnimation, child) {\r\n-              return SlideTransition(\r\n-                  transformHitTests: false,\r\n-                  position: Tween<Offset>(\r\n-                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n-                      .animate(animation),\r\n-                  child: SlideTransition(\r\n-                      position: Tween<Offset>(\r\n-                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n-                          .animate(secondaryAnimation),\r\n-                      child: child));\r\n-            }));\r\n-}\r\n-\r\n-class Widgets {\r\n-  Widgets._privateConstructor();\r\n-  static final Widgets _instance = Widgets._privateConstructor();\r\n-  static Widgets get instance => _instance;\r\n-\r\n-  static String avatar(String phoneNumberOrRemoteKey) {\r\n-    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n-    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n-  }\r\n-\r\n-  static Widget loadingCircle({Color? color, double size = 26}) {\r\n-    return Material(\r\n-      type: MaterialType.circle,\r\n-      color: color,\r\n-      elevation: 0,\r\n-      child: SizedBox(\r\n-        height: size,\r\n-        width: size,\r\n-        child: const FittedBox(\r\n-          fit: BoxFit.scaleDown,\r\n-          child: CircularProgressIndicator(\r\n-            strokeWidth: 5,\r\n-            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///This will return the darken color of the given value\r\n-  static Color darkenColor(Color color, double value) =>\r\n-      HSLColor.fromColor(color).withLightness(value).toColor();\r\n-\r\n-  static Txt subtitle(BuildContext context, String text,\r\n-      {TextAlign? textAlign, double? fontSize = 12}) {\r\n-    return Txt(\r\n-        text: text,\r\n-        textAlign: textAlign,\r\n-        fontSize: fontSize,\r\n-        color: subtitleColor(context));\r\n-  }\r\n-\r\n-  static Color subtitleColor(BuildContext context) {\r\n-    return Theme.of(context).textTheme.bodySmall!.color!;\r\n-  }\r\n-\r\n-  static const Duration duration = Duration(milliseconds: 350);\r\n-  static const Duration duration1Sec = Duration(seconds: 1);\r\n-  static const Duration duration2Sec = Duration(seconds: 2);\r\n-  static const Duration duration3Sec = Duration(seconds: 3);\r\n-\r\n-  static const Curve curve = Curves.easeIn;\r\n-\r\n-  static bool debugging = kDebugMode;\r\n-  static bool debugMode = kDebugMode;\r\n-\r\n-  static List<String> generateTags(List sentences) {\r\n-    List<String> tags = [];\r\n-    for (var sentence in sentences) {\r\n-      if (sentence != null) {\r\n-        List words = '$sentence'.toLowerCase().split(' ');\r\n-        for (var word in words) {\r\n-          if (tags.contains(word) == false) tags.add(word);\r\n-        }\r\n-      }\r\n-    }\r\n-    return tags\r\n-      ..sort((b, a) => a.length.compareTo(b.length))\r\n-      ..removeWhere((element) => element.length < 3);\r\n-  }\r\n-\r\n-  static Widget boldHeading(String string, {double? left}) {\r\n-    return Container(\r\n-      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n-      alignment: Alignment.centerLeft,\r\n-      child: Txt(\r\n-        text: string,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.start,\r\n-        fontSize: 16,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n-  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n-    final Color color0 = color ?? Colors.grey.shade200;\r\n-\r\n-    return DecoratedBox(\r\n-      decoration: BoxDecoration(\r\n-        color: color0.withOpacity(0.15),\r\n-        shape: BoxShape.circle,\r\n-      ),\r\n-      child: Transform.rotate(\r\n-        angle: angle * math.pi / 180,\r\n-        child: Icon(\r\n-          back ? Icons.chevron_left : Icons.chevron_right,\r\n-          size: 18,\r\n-          color: color0,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static List<String> generateListString(List? list) {\r\n-    if (list == null) return [];\r\n-    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n-  }\r\n-\r\n-  // static List<Logg> generateLogs(List? list) {\r\n-  //   if (list == null) return [];\r\n-  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n-  // }\r\n-\r\n-  static String get today =>\r\n-      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n-\r\n-  // static Future<bool?> call(String number) async {\r\n-  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n-  // }\r\n-\r\n-  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n-  //   String url = 'sms:$phoneNumber?body=$text';\r\n-  //   await launchurl(url);\r\n-  // }\r\n-\r\n-  static Widget deleted() {\r\n-    return Center(\r\n-      child: Text(\r\n-        fontSize: 16,\r\n-        text: \"Deleted\",\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n-        textAlign: TextAlign.center,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n-  //   return RichTxt(maxLines: 1, richStrings: [\r\n-  //     RichString(_staffTypeLabel(type)),\r\n-  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n-  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n-  //   ]);\r\n-  // }\r\n-\r\n-  // static Widget _staffTypeLabel(StaffType type) {\r\n-  //   return Container(\r\n-  //       child: Txt(\r\n-  //         text: type.viewer,\r\n-  //         fontSize: 8,\r\n-  //         color: Colors.white,\r\n-  //       ),\r\n-  //       padding: EdgeInsets.all(2),\r\n-  //       decoration: BoxDecoration(\r\n-  //         color: type.color,\r\n-  //         borderRadius: BorderRadius.circular(4),\r\n-  //       ));\r\n-  // }\r\n-\r\n-  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n-    DateTime dateTime =\r\n-        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n-    final difference = DateTime.now().difference(dateTime);\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      return dateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      return (numericDates) ? '1 week ago' : 'Last week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      return '${difference.inDays} days ago';\r\n-    } else if (difference.inDays >= 1) {\r\n-      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n-    } else if (difference.inHours >= 2) {\r\n-      return '${difference.inHours} hours ago';\r\n-    } else if (difference.inHours >= 1) {\r\n-      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      return '${difference.inMinutes} minutes ago';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      return '${difference.inSeconds} seconds ago';\r\n-    } else {\r\n-      return 'Just now';\r\n-    }\r\n-  }\r\n-\r\n-  static Widget notFoundWidget() {\r\n-    return const Material(\r\n-      child: Center(\r\n-        child: ListTile(\r\n-          title: Text(\r\n-            \"Not found!\",\r\n-            textAlign: TextAlign.center,\r\n-            style: TextStyle(\r\n-              fontWeight: FontWeight.bold,\r\n-              fontSize: 50,\r\n-            ),\r\n-          ),\r\n-          subtitle: Text(\r\n-            \"The requested content is not found at this moment.\",\r\n-            style: TextStyle(\r\n-              fontSize: 20,\r\n-            ),\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget noAccess() {\r\n-    return const Material(\r\n-      child: Center(\r\n-        child: Text(\r\n-          \"You have no permission to see this content\",\r\n-          style: TextStyle(\r\n-            fontSize: 20,\r\n-          ),\r\n-          textAlign: TextAlign.center,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static bool isLight(BuildContext context) =>\r\n-      Theme.of(context).brightness == Brightness.light;\r\n-\r\n-  // static Future<bool> sendEmail(String email) async {\r\n-  //   bool success = false;\r\n-  //   email = email.toLowerCase();\r\n-  //   if (email.contains('@')) {\r\n-  //     success = true;\r\n-  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n-  //   } else {\r\n-  //     showToast(\"Email address not found\");\r\n-  //   }\r\n-  //   return success;\r\n-  // }\r\n-\r\n-  static Future<void> copy(dynamic text) async {\r\n-    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n-    // showToast(\"Text copied!\");\r\n-  }\r\n-\r\n-  // static void debugToast(dynamic message) {\r\n-  //   if (debugging) showToast(message);\r\n-  // }\r\n-\r\n-  // static void showToast(dynamic message) {\r\n-  //   if (debugging) print(\"$message\");\r\n-  //   try {\r\n-  //     Fluttertoast.showToast(\r\n-  //       msg: '$message',\r\n-  //       toastLength: Toast.LENGTH_SHORT,\r\n-  //       gravity: ToastGravity.CENTER,\r\n-  //       backgroundColor: Colorz.primaryColor,\r\n-  //       textColor: Colors.white,\r\n-  //       fontSize: 16,\r\n-  //     );\r\n-  //   } catch (e) {\r\n-  //     print(\"Error showing Toast: $e\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  ///[filter] Removes all the special characters and spaces\r\n-  static String filter(String text) {\r\n-    return (text\r\n-        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n-        .replaceAll(' ', '')\r\n-        .replaceAll('_', ''));\r\n-  }\r\n-\r\n-  ///Returns the [DateTime] values in a human readable format\r\n-  static String timeAgo(\r\n-    dynamic input, {\r\n-    String? prefix,\r\n-  }) {\r\n-    DateTime? finalDateTime;\r\n-\r\n-    if (input is DateTime) finalDateTime = input;\r\n-    if (input is int) {\r\n-      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n-    }\r\n-\r\n-    ///If the input is not valid, then just return ''\r\n-    if (finalDateTime == null) return '';\r\n-\r\n-    final Duration difference = DateTime.now().difference(finalDateTime);\r\n-    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n-        DateTime.now().millisecondsSinceEpoch;\r\n-    String ago;\r\n-\r\n-    if (difference.inDays > 8) {\r\n-      ago = finalDateTime.toString().substring(0, 10);\r\n-    } else if ((difference.inDays / 7).floor() >= 1) {\r\n-      ago = isPast ? '1 week ago' : '1 week';\r\n-    } else if (difference.inDays >= 2) {\r\n-      ago = isPast\r\n-          ? '${difference.inDays} days ago'\r\n-          : '${difference.inDays} days';\r\n-    } else if (difference.inDays >= 1) {\r\n-      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n-    } else if (difference.inHours >= 2) {\r\n-      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inHours >= 1) {\r\n-      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 2) {\r\n-      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inMinutes >= 1) {\r\n-      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n-    } else if (difference.inSeconds >= 3) {\r\n-      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n-    } else {\r\n-      ago = isPast ? 'Just now' : 'now';\r\n-    }\r\n-    return prefix == null ? ago : '$prefix $ago';\r\n-  }\r\n-\r\n-  static String toDateTime(int createdAt) {\r\n-    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n-  }\r\n-\r\n-  static String toDate(int createdAt,\r\n-      {bool showFullYear = true, bool showYear = true}) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int day = date.day;\r\n-    int month0 = date.month;\r\n-    String month = toMonth(month0);\r\n-    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n-    return '$day $month $year';\r\n-  }\r\n-\r\n-  static String toTime(int createdAt) {\r\n-    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n-    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n-    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n-    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n-    return '$hour:$minutes $amPm';\r\n-  }\r\n-\r\n-  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n-    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n-    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n-  }\r\n-\r\n-  static String toMonth(int month) {\r\n-    return month > 0 ? months[month - 1] : '$month';\r\n-  }\r\n-\r\n-  static const List<String> months = [\r\n-    'Jan',\r\n-    'Feb',\r\n-    'Mar',\r\n-    'Apr',\r\n-    'May',\r\n-    'Jun',\r\n-    'Jul',\r\n-    'Aug',\r\n-    'Sep',\r\n-    'Oct',\r\n-    'Nov',\r\n-    'Dec',\r\n-  ];\r\n-\r\n-  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n-  //   try {\r\n-  //     if (url != null) {\r\n-  //       print(\"URL: $url\");\r\n-  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n-  //     } else {\r\n-  //       showToast(\"No url!\");\r\n-  //     }\r\n-  //   } catch (exception) {\r\n-  //     showToast(\"Error $exception\");\r\n-  //   }\r\n-  // }\r\n-\r\n-  static Future wait(int milliseconds) async {\r\n-    await Future.delayed(Duration(milliseconds: milliseconds));\r\n-  }\r\n-\r\n-  static void push(Widget? child, BuildContext context) {\r\n-    if (child != null) {\r\n-      Navigator.push(context, FadePageRoute(widget: child));\r\n-    } else {\r\n-      // String _log = \"No destination page found\";\r\n-      // debugMode ? showToast(_log) : print(_log);\r\n-    }\r\n-  }\r\n-\r\n-  @Deprecated('Use pop')\r\n-  static void close(BuildContext context) => pop(context);\r\n-  static void pop(BuildContext context) {\r\n-    try {\r\n-      Navigator.pop(context);\r\n-    } catch (e) {}\r\n-  }\r\n-\r\n-  static double mheight(BuildContext context) {\r\n-    return MediaQuery.of(context).size.height;\r\n-  }\r\n-\r\n-  static double mwidth(BuildContext context) {\r\n-    return MediaQuery.of(context).size.width;\r\n-  }\r\n-\r\n-  static Widget empty() {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.all(8.0),\r\n-      child: Center(\r\n-        child: Padding(\r\n-          padding: const EdgeInsets.all(18),\r\n-          child: Icon(\r\n-            Icons.delete,\r\n-            size: 100,\r\n-            color: Colors.grey.shade300,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget divider({Color? color}) {\r\n-    return Padding(\r\n-      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n-      child: Divider(\r\n-        height: 4.5,\r\n-        color: color,\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget heading({dynamic text}) {\r\n-    return const Padding(\r\n-      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n-      child: Text(\r\n-        \"this is me\",\r\n-        style: TextStyle(\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-\r\n-  static Widget offHeader(bool hide, dynamic text) {\r\n-    return Offstage(\r\n-      offstage: hide,\r\n-      child: Container(\r\n-        alignment: Alignment.bottomLeft,\r\n-        padding: const EdgeInsets.only(top: 20, left: 6),\r\n-        child: Txt(\r\n-          text: text,\r\n-          color: Colors.grey,\r\n-          fontWeight: FontWeight.bold,\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n"
                },
                {
                    "date": 1675886763342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,508 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static Txt subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return Center(\r\n+      child: Text(\r\n+       \r\n+         \"Deleted\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        color: Colors.grey,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return const Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Text(\r\n+            \"The requested content is not found at this moment.\",\r\n+            style: TextStyle(\r\n+              fontSize: 20,\r\n+            ),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return const Material(\r\n+      child: Center(\r\n+        child: Text(\r\n+          \"You have no permission to see this content\",\r\n+          style: TextStyle(\r\n+            fontSize: 20,\r\n+          ),\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1675886774614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,10 +174,8 @@\n          \"Deleted\",\r\n         style: TextStyle(\r\n           color: Colors.grey,\r\n           fontWeight: FontWeight.bold,),\r\n-        color: Colors.grey,\r\n-        fontWeight: FontWeight.bold,\r\n         textAlign: TextAlign.center,\r\n       ),\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1675886785189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,507 @@\n+import 'dart:math' as math;\r\n+import 'package:cached_network_image/cached_network_image.dart';\r\n+// import 'package:firebase_storage/firebase_storage.dart';\r\n+// import 'package:fluttership/Models/IconLabel.dart';\r\n+// import 'package:fluttership/Models/Logg.dart';\r\n+// import 'package:fluttership/Models/RichString.dart';\r\n+// import 'package:fluttership/Models/SelectionStep.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:flutter/services.dart';\r\n+// import 'package:fluttership/Repos/Img.dart';\r\n+\r\n+@Deprecated('Use Widgets.instance')\r\n+class Common {\r\n+  Common._privateConstructor();\r\n+  static final Common _instance = Common._privateConstructor();\r\n+  static Common get instance => _instance;\r\n+}\r\n+\r\n+class FadePageRoute extends PageRouteBuilder {\r\n+  final Widget widget;\r\n+  FadePageRoute({required this.widget})\r\n+      : super(\r\n+            pageBuilder: (BuildContext context, Animation<double> animation,\r\n+                Animation<double> secondaryAnimation) {\r\n+              return widget;\r\n+            },\r\n+            transitionDuration: const Duration(milliseconds: 300),\r\n+            transitionsBuilder:\r\n+                ((context, animation, secondaryAnimation, child) {\r\n+              return SlideTransition(\r\n+                  transformHitTests: false,\r\n+                  position: Tween<Offset>(\r\n+                          begin: const Offset(0.0, 1.0), end: Offset.zero)\r\n+                      .animate(animation),\r\n+                  child: SlideTransition(\r\n+                      position: Tween<Offset>(\r\n+                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n+                          .animate(secondaryAnimation),\r\n+                      child: child));\r\n+            }));\r\n+}\r\n+\r\n+class Widgets {\r\n+  Widgets._privateConstructor();\r\n+  static final Widgets _instance = Widgets._privateConstructor();\r\n+  static Widgets get instance => _instance;\r\n+\r\n+  static String avatar(String phoneNumberOrRemoteKey) {\r\n+    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n+    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n+  }\r\n+\r\n+  static Widget loadingCircle({Color? color, double size = 26}) {\r\n+    return Material(\r\n+      type: MaterialType.circle,\r\n+      color: color,\r\n+      elevation: 0,\r\n+      child: SizedBox(\r\n+        height: size,\r\n+        width: size,\r\n+        child: const FittedBox(\r\n+          fit: BoxFit.scaleDown,\r\n+          child: CircularProgressIndicator(\r\n+            strokeWidth: 5,\r\n+            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///This will return the darken color of the given value\r\n+  static Color darkenColor(Color color, double value) =>\r\n+      HSLColor.fromColor(color).withLightness(value).toColor();\r\n+\r\n+  static subtitle(BuildContext context, String text,\r\n+      {TextAlign? textAlign, double? fontSize = 12}) {\r\n+    return Txt(\r\n+        text: text,\r\n+        textAlign: textAlign,\r\n+        fontSize: fontSize,\r\n+        color: subtitleColor(context));\r\n+  }\r\n+\r\n+  static Color subtitleColor(BuildContext context) {\r\n+    return Theme.of(context).textTheme.bodySmall!.color!;\r\n+  }\r\n+\r\n+  static const Duration duration = Duration(milliseconds: 350);\r\n+  static const Duration duration1Sec = Duration(seconds: 1);\r\n+  static const Duration duration2Sec = Duration(seconds: 2);\r\n+  static const Duration duration3Sec = Duration(seconds: 3);\r\n+\r\n+  static const Curve curve = Curves.easeIn;\r\n+\r\n+  static bool debugging = kDebugMode;\r\n+  static bool debugMode = kDebugMode;\r\n+\r\n+  static List<String> generateTags(List sentences) {\r\n+    List<String> tags = [];\r\n+    for (var sentence in sentences) {\r\n+      if (sentence != null) {\r\n+        List words = '$sentence'.toLowerCase().split(' ');\r\n+        for (var word in words) {\r\n+          if (tags.contains(word) == false) tags.add(word);\r\n+        }\r\n+      }\r\n+    }\r\n+    return tags\r\n+      ..sort((b, a) => a.length.compareTo(b.length))\r\n+      ..removeWhere((element) => element.length < 3);\r\n+  }\r\n+\r\n+  static Widget boldHeading(String string, {double? left}) {\r\n+    return Container(\r\n+      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n+      alignment: Alignment.centerLeft,\r\n+      child: Txt(\r\n+        text: string,\r\n+        fontWeight: FontWeight.bold,\r\n+        textAlign: TextAlign.start,\r\n+        fontSize: 16,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n+  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n+    final Color color0 = color ?? Colors.grey.shade200;\r\n+\r\n+    return DecoratedBox(\r\n+      decoration: BoxDecoration(\r\n+        color: color0.withOpacity(0.15),\r\n+        shape: BoxShape.circle,\r\n+      ),\r\n+      child: Transform.rotate(\r\n+        angle: angle * math.pi / 180,\r\n+        child: Icon(\r\n+          back ? Icons.chevron_left : Icons.chevron_right,\r\n+          size: 18,\r\n+          color: color0,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static List<String> generateListString(List? list) {\r\n+    if (list == null) return [];\r\n+    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n+  }\r\n+\r\n+  // static List<Logg> generateLogs(List? list) {\r\n+  //   if (list == null) return [];\r\n+  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n+  // }\r\n+\r\n+  static String get today =>\r\n+      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n+\r\n+  // static Future<bool?> call(String number) async {\r\n+  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n+  // }\r\n+\r\n+  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n+  //   String url = 'sms:$phoneNumber?body=$text';\r\n+  //   await launchurl(url);\r\n+  // }\r\n+\r\n+  static Widget deleted() {\r\n+    return const Center(\r\n+      child: Text(\r\n+        \"Deleted\",\r\n+        style: TextStyle(\r\n+          fontSize: 16,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+        textAlign: TextAlign.center,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n+  //   return RichTxt(maxLines: 1, richStrings: [\r\n+  //     RichString(_staffTypeLabel(type)),\r\n+  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n+  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n+  //   ]);\r\n+  // }\r\n+\r\n+  // static Widget _staffTypeLabel(StaffType type) {\r\n+  //   return Container(\r\n+  //       child: Txt(\r\n+  //         text: type.viewer,\r\n+  //         fontSize: 8,\r\n+  //         color: Colors.white,\r\n+  //       ),\r\n+  //       padding: EdgeInsets.all(2),\r\n+  //       decoration: BoxDecoration(\r\n+  //         color: type.color,\r\n+  //         borderRadius: BorderRadius.circular(4),\r\n+  //       ));\r\n+  // }\r\n+\r\n+  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n+    DateTime dateTime =\r\n+        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n+    final difference = DateTime.now().difference(dateTime);\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      return dateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      return (numericDates) ? '1 week ago' : 'Last week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      return '${difference.inDays} days ago';\r\n+    } else if (difference.inDays >= 1) {\r\n+      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n+    } else if (difference.inHours >= 2) {\r\n+      return '${difference.inHours} hours ago';\r\n+    } else if (difference.inHours >= 1) {\r\n+      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      return '${difference.inMinutes} minutes ago';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      return '${difference.inSeconds} seconds ago';\r\n+    } else {\r\n+      return 'Just now';\r\n+    }\r\n+  }\r\n+\r\n+  static Widget notFoundWidget() {\r\n+    return const Material(\r\n+      child: Center(\r\n+        child: ListTile(\r\n+          title: Text(\r\n+            \"Not found!\",\r\n+            textAlign: TextAlign.center,\r\n+            style: TextStyle(\r\n+              fontWeight: FontWeight.bold,\r\n+              fontSize: 50,\r\n+            ),\r\n+          ),\r\n+          subtitle: Text(\r\n+            \"The requested content is not found at this moment.\",\r\n+            style: TextStyle(\r\n+              fontSize: 20,\r\n+            ),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget noAccess() {\r\n+    return const Material(\r\n+      child: Center(\r\n+        child: Text(\r\n+          \"You have no permission to see this content\",\r\n+          style: TextStyle(\r\n+            fontSize: 20,\r\n+          ),\r\n+          textAlign: TextAlign.center,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static bool isLight(BuildContext context) =>\r\n+      Theme.of(context).brightness == Brightness.light;\r\n+\r\n+  // static Future<bool> sendEmail(String email) async {\r\n+  //   bool success = false;\r\n+  //   email = email.toLowerCase();\r\n+  //   if (email.contains('@')) {\r\n+  //     success = true;\r\n+  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n+  //   } else {\r\n+  //     showToast(\"Email address not found\");\r\n+  //   }\r\n+  //   return success;\r\n+  // }\r\n+\r\n+  static Future<void> copy(dynamic text) async {\r\n+    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n+    // showToast(\"Text copied!\");\r\n+  }\r\n+\r\n+  // static void debugToast(dynamic message) {\r\n+  //   if (debugging) showToast(message);\r\n+  // }\r\n+\r\n+  // static void showToast(dynamic message) {\r\n+  //   if (debugging) print(\"$message\");\r\n+  //   try {\r\n+  //     Fluttertoast.showToast(\r\n+  //       msg: '$message',\r\n+  //       toastLength: Toast.LENGTH_SHORT,\r\n+  //       gravity: ToastGravity.CENTER,\r\n+  //       backgroundColor: Colorz.primaryColor,\r\n+  //       textColor: Colors.white,\r\n+  //       fontSize: 16,\r\n+  //     );\r\n+  //   } catch (e) {\r\n+  //     print(\"Error showing Toast: $e\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  ///[filter] Removes all the special characters and spaces\r\n+  static String filter(String text) {\r\n+    return (text\r\n+        .replaceAll(RegExp(r'[^\\w\\s]+'), '')\r\n+        .replaceAll(' ', '')\r\n+        .replaceAll('_', ''));\r\n+  }\r\n+\r\n+  ///Returns the [DateTime] values in a human readable format\r\n+  static String timeAgo(\r\n+    dynamic input, {\r\n+    String? prefix,\r\n+  }) {\r\n+    DateTime? finalDateTime;\r\n+\r\n+    if (input is DateTime) finalDateTime = input;\r\n+    if (input is int) {\r\n+      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n+    }\r\n+\r\n+    ///If the input is not valid, then just return ''\r\n+    if (finalDateTime == null) return '';\r\n+\r\n+    final Duration difference = DateTime.now().difference(finalDateTime);\r\n+    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n+        DateTime.now().millisecondsSinceEpoch;\r\n+    String ago;\r\n+\r\n+    if (difference.inDays > 8) {\r\n+      ago = finalDateTime.toString().substring(0, 10);\r\n+    } else if ((difference.inDays / 7).floor() >= 1) {\r\n+      ago = isPast ? '1 week ago' : '1 week';\r\n+    } else if (difference.inDays >= 2) {\r\n+      ago = isPast\r\n+          ? '${difference.inDays} days ago'\r\n+          : '${difference.inDays} days';\r\n+    } else if (difference.inDays >= 1) {\r\n+      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n+    } else if (difference.inHours >= 2) {\r\n+      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inHours >= 1) {\r\n+      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 2) {\r\n+      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inMinutes >= 1) {\r\n+      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n+    } else if (difference.inSeconds >= 3) {\r\n+      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n+    } else {\r\n+      ago = isPast ? 'Just now' : 'now';\r\n+    }\r\n+    return prefix == null ? ago : '$prefix $ago';\r\n+  }\r\n+\r\n+  static String toDateTime(int createdAt) {\r\n+    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n+  }\r\n+\r\n+  static String toDate(int createdAt,\r\n+      {bool showFullYear = true, bool showYear = true}) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int day = date.day;\r\n+    int month0 = date.month;\r\n+    String month = toMonth(month0);\r\n+    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n+    return '$day $month $year';\r\n+  }\r\n+\r\n+  static String toTime(int createdAt) {\r\n+    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n+    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n+    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n+    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n+    return '$hour:$minutes $amPm';\r\n+  }\r\n+\r\n+  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n+    int yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n+    return showFullYear ? \"$yr\" : \"$yr\".substring(0, 2);\r\n+  }\r\n+\r\n+  static String toMonth(int month) {\r\n+    return month > 0 ? months[month - 1] : '$month';\r\n+  }\r\n+\r\n+  static const List<String> months = [\r\n+    'Jan',\r\n+    'Feb',\r\n+    'Mar',\r\n+    'Apr',\r\n+    'May',\r\n+    'Jun',\r\n+    'Jul',\r\n+    'Aug',\r\n+    'Sep',\r\n+    'Oct',\r\n+    'Nov',\r\n+    'Dec',\r\n+  ];\r\n+\r\n+  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n+  //   try {\r\n+  //     if (url != null) {\r\n+  //       print(\"URL: $url\");\r\n+  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n+  //     } else {\r\n+  //       showToast(\"No url!\");\r\n+  //     }\r\n+  //   } catch (exception) {\r\n+  //     showToast(\"Error $exception\");\r\n+  //   }\r\n+  // }\r\n+\r\n+  static Future wait(int milliseconds) async {\r\n+    await Future.delayed(Duration(milliseconds: milliseconds));\r\n+  }\r\n+\r\n+  static void push(Widget? child, BuildContext context) {\r\n+    if (child != null) {\r\n+      Navigator.push(context, FadePageRoute(widget: child));\r\n+    } else {\r\n+      // String _log = \"No destination page found\";\r\n+      // debugMode ? showToast(_log) : print(_log);\r\n+    }\r\n+  }\r\n+\r\n+  @Deprecated('Use pop')\r\n+  static void close(BuildContext context) => pop(context);\r\n+  static void pop(BuildContext context) {\r\n+    try {\r\n+      Navigator.pop(context);\r\n+    } catch (e) {}\r\n+  }\r\n+\r\n+  static double mheight(BuildContext context) {\r\n+    return MediaQuery.of(context).size.height;\r\n+  }\r\n+\r\n+  static double mwidth(BuildContext context) {\r\n+    return MediaQuery.of(context).size.width;\r\n+  }\r\n+\r\n+  static Widget empty() {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.all(8.0),\r\n+      child: Center(\r\n+        child: Padding(\r\n+          padding: const EdgeInsets.all(18),\r\n+          child: Icon(\r\n+            Icons.delete,\r\n+            size: 100,\r\n+            color: Colors.grey.shade300,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget divider({Color? color}) {\r\n+    return Padding(\r\n+      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n+      child: Divider(\r\n+        height: 4.5,\r\n+        color: color,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget heading({dynamic text}) {\r\n+    return const Padding(\r\n+      padding: EdgeInsets.only(top: 8.0, left: 8.0),\r\n+      child: Text(\r\n+        \"this is me\",\r\n+        style: TextStyle(\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  static Widget offHeader(bool hide, dynamic text) {\r\n+    return Offstage(\r\n+      offstage: hide,\r\n+      child: Container(\r\n+        alignment: Alignment.bottomLeft,\r\n+        padding: const EdgeInsets.only(top: 20, left: 6),\r\n+        child: Txt(\r\n+          text: text,\r\n+          color: Colors.grey,\r\n+          fontWeight: FontWeight.bold,\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1675886477075,
            "name": "Commit-0",
            "content": "import 'dart:math' as math;\r\nimport 'package:cached_network_image/cached_network_image.dart';\r\n// import 'package:firebase_storage/firebase_storage.dart';\r\n// import 'package:fluttership/Models/IconLabel.dart';\r\n// import 'package:fluttership/Models/Logg.dart';\r\n// import 'package:fluttership/Models/RichString.dart';\r\n// import 'package:fluttership/Models/SelectionStep.dart';\r\nimport 'package:flutter/foundation.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\n// import 'package:fluttership/Repos/Img.dart';\r\nimport 'package:fluttership/Constants/Constants.dart';\r\nimport 'package:intl/intl.dart';\r\n\r\npart './Loader.dart';\r\npart './Txt.dart';\r\npart './Scroller.dart';\r\npart './Img.dart';\r\npart './Inkk.dart';\r\npart './Avatar.dart';\r\npart './CrossFade.dart';\r\npart './ColorTile.dart';\r\npart './Button.dart';\r\npart './Expandile.dart';\r\npart './DoubleCard.dart';\r\n\r\n@Deprecated('Use Widgets.instance')\r\nclass Common {\r\n  Common._privateConstructor();\r\n  static final Common _instance = Common._privateConstructor();\r\n  static Common get instance => _instance;\r\n}\r\n\r\nclass FadePageRoute extends PageRouteBuilder {\r\n  final Widget widget;\r\n  FadePageRoute({required this.widget})\r\n      : super(\r\n            pageBuilder: (BuildContext context, Animation<double> animation,\r\n                Animation<double> secondaryAnimation) {\r\n              return widget;\r\n            },\r\n            transitionDuration: Duration(milliseconds: 300),\r\n            transitionsBuilder:\r\n                ((context, animation, secondaryAnimation, child) {\r\n              return SlideTransition(\r\n                  transformHitTests: false,\r\n                  position:\r\n                      Tween<Offset>(begin: Offset(0.0, 1.0), end: Offset.zero)\r\n                          .animate(animation),\r\n                  child: new SlideTransition(\r\n                      position: new Tween<Offset>(\r\n                              begin: Offset.zero, end: const Offset(0.0, -1.0))\r\n                          .animate(secondaryAnimation),\r\n                      child: child));\r\n            }));\r\n}\r\n\r\nclass Widgets {\r\n  Widgets._privateConstructor();\r\n  static final Widgets _instance = Widgets._privateConstructor();\r\n  static Widgets get instance => _instance;\r\n\r\n  static String avatar(String phoneNumberOrRemoteKey) {\r\n    String fileName = phoneNumberOrRemoteKey.replaceAll(\"+\", \"%2B\");\r\n    return \"https://firebasestorage.googleapis.com/v0/b/service-ad14a.appspot.com/o/avatars%2F$fileName.jpg?alt=media\";\r\n  }\r\n\r\n  static Widget loadingCircle({Color? color, double size = 26}) {\r\n    return Material(\r\n      type: MaterialType.circle,\r\n      color: color,\r\n      elevation: 0,\r\n      child: SizedBox(\r\n        height: size,\r\n        width: size,\r\n        child: FittedBox(\r\n          fit: BoxFit.scaleDown,\r\n          child: CircularProgressIndicator(\r\n            strokeWidth: 5,\r\n            valueColor: AlwaysStoppedAnimation(Colors.white),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  ///This will return the darken color of the given value\r\n  static Color darkenColor(Color color, double value) =>\r\n      HSLColor.fromColor(color).withLightness(value).toColor();\r\n\r\n  static Txt subtitle(BuildContext context, String text,\r\n      {TextAlign? textAlign, double? fontSize = 12}) {\r\n    return Txt(\r\n        text: text,\r\n        textAlign: textAlign,\r\n        fontSize: fontSize,\r\n        color: subtitleColor(context));\r\n  }\r\n\r\n  static Color subtitleColor(BuildContext context) {\r\n    return Theme.of(context).textTheme.caption!.color!;\r\n  }\r\n\r\n  static const Duration duration = Duration(milliseconds: 350);\r\n  static const Duration duration1Sec = Duration(seconds: 1);\r\n  static const Duration duration2Sec = Duration(seconds: 2);\r\n  static const Duration duration3Sec = Duration(seconds: 3);\r\n\r\n  static const Curve curve = Curves.easeIn;\r\n\r\n  static bool debugging = kDebugMode;\r\n  static bool debugMode = kDebugMode;\r\n\r\n  static List<String> generateTags(List sentences) {\r\n    List<String> _tags = [];\r\n    sentences.forEach((sentence) {\r\n      if (sentence != null) {\r\n        List words = '$sentence'.toLowerCase().split(' ');\r\n        words.forEach((word) {\r\n          if (_tags.contains(word) == false) _tags.add(word);\r\n        });\r\n      }\r\n    });\r\n    return _tags\r\n      ..sort((b, a) => a.length.compareTo(b.length))\r\n      ..removeWhere((element) => element.length < 3);\r\n  }\r\n\r\n  static Widget boldHeading(String string, {double? left}) {\r\n    return Container(\r\n      padding: EdgeInsets.only(top: 18, bottom: 3, left: left ?? 8),\r\n      alignment: Alignment.centerLeft,\r\n      child: Txt(\r\n        text: string,\r\n        fontWeight: FontWeight.bold,\r\n        textAlign: TextAlign.start,\r\n        fontSize: 16,\r\n      ),\r\n    );\r\n  }\r\n\r\n  ///An [Ios] style tiny arrow widget, which can be used on [ListTile] widgets with customizations\r\n  static Widget arrow({Color? color, bool back = false, double angle = 90}) {\r\n    final Color _color = color ?? Colors.grey.shade200;\r\n\r\n    return DecoratedBox(\r\n      decoration: BoxDecoration(\r\n        color: _color.withOpacity(0.15),\r\n        shape: BoxShape.circle,\r\n      ),\r\n      child: Transform.rotate(\r\n        angle: angle * math.pi / 180,\r\n        child: Icon(\r\n          back ? Icons.chevron_left : Icons.chevron_right,\r\n          size: 18,\r\n          color: _color,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  static List<String> generateListString(List? list) {\r\n    if (list == null) return [];\r\n    return List<String>.generate((list).length, (index) => \"${list[index]}\");\r\n  }\r\n\r\n  // static List<Logg> generateLogs(List? list) {\r\n  //   if (list == null) return [];\r\n  //   return List<Logg>.generate((list).length, (index) => Logg.fromJson(list[index]));\r\n  // }\r\n\r\n  static String get today =>\r\n      \"${DateTime.now().year}-${DateTime.now().month}-${DateTime.now().day}\";\r\n\r\n  // static Future<bool?> call(String number) async {\r\n  // return await FlutterPhoneDirectCaller.callNumber(number);\r\n  // }\r\n\r\n  // static Future<void> sendSMS(String phoneNumber, {required String text}) async {\r\n  //   String url = 'sms:$phoneNumber?body=$text';\r\n  //   await launchurl(url);\r\n  // }\r\n\r\n  static Widget deleted() {\r\n    return Center(\r\n      child: Txt(\r\n        fontSize: 16,\r\n        text: \"Deleted\",\r\n        color: Colors.grey,\r\n        fontWeight: FontWeight.bold,\r\n        textAlign: TextAlign.center,\r\n      ),\r\n    );\r\n  }\r\n\r\n  // static RichTxt staffLabel(StaffType type, {String? prefix, int? time}) {\r\n  //   return RichTxt(maxLines: 1, richStrings: [\r\n  //     RichString(_staffTypeLabel(type)),\r\n  //     if (prefix != null) RichString(prefix, color: Colors.grey),\r\n  //     if (time != null) RichString(ago(time), color: Colors.grey),\r\n  //   ]);\r\n  // }\r\n\r\n  // static Widget _staffTypeLabel(StaffType type) {\r\n  //   return Container(\r\n  //       child: Txt(\r\n  //         text: type.viewer,\r\n  //         fontSize: 8,\r\n  //         color: Colors.white,\r\n  //       ),\r\n  //       padding: EdgeInsets.all(2),\r\n  //       decoration: BoxDecoration(\r\n  //         color: type.color,\r\n  //         borderRadius: BorderRadius.circular(4),\r\n  //       ));\r\n  // }\r\n\r\n  static String ago(int millisecondsSinceEpoch, {bool numericDates = true}) {\r\n    DateTime dateTime =\r\n        DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch);\r\n    final difference = DateTime.now().difference(dateTime);\r\n\r\n    if (difference.inDays > 8) {\r\n      return dateTime.toString().substring(0, 10);\r\n    } else if ((difference.inDays / 7).floor() >= 1) {\r\n      return (numericDates) ? '1 week ago' : 'Last week';\r\n    } else if (difference.inDays >= 2) {\r\n      return '${difference.inDays} days ago';\r\n    } else if (difference.inDays >= 1) {\r\n      return (numericDates) ? '1 day ago' : 'Yesterday';\r\n    } else if (difference.inHours >= 2) {\r\n      return '${difference.inHours} hours ago';\r\n    } else if (difference.inHours >= 1) {\r\n      return (numericDates) ? '1 hour ago' : 'An hour ago';\r\n    } else if (difference.inMinutes >= 2) {\r\n      return '${difference.inMinutes} minutes ago';\r\n    } else if (difference.inMinutes >= 1) {\r\n      return (numericDates) ? '1 minute ago' : 'A minute ago';\r\n    } else if (difference.inSeconds >= 3) {\r\n      return '${difference.inSeconds} seconds ago';\r\n    } else {\r\n      return 'Just now';\r\n    }\r\n  }\r\n\r\n  static Widget notFoundWidget() {\r\n    return Material(\r\n      child: Center(\r\n        child: ListTile(\r\n          title: Txt(\r\n            text: \"Not found!\",\r\n            fontWeight: FontWeight.bold,\r\n            fontSize: 50,\r\n            textAlign: TextAlign.center,\r\n          ),\r\n          subtitle: Txt(\r\n            text: \"The requested content is not found at this moment.\",\r\n            fontSize: 20,\r\n            textAlign: TextAlign.center,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  static Widget noAccess() {\r\n    return Material(\r\n      child: Center(\r\n        child: Txt(\r\n          text: \"You have no permission to see this content\",\r\n          fontSize: 20,\r\n          textAlign: TextAlign.center,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  static bool isLight(BuildContext context) =>\r\n      Theme.of(context).brightness == Brightness.light;\r\n\r\n  // static Future<bool> sendEmail(String email) async {\r\n  //   bool success = false;\r\n  //   email = email.toLowerCase();\r\n  //   if (email.contains('@')) {\r\n  //     success = true;\r\n  //     await launch(\"mailto:$email\", forceSafariVC: false, forceWebView: false);\r\n  //   } else {\r\n  //     showToast(\"Email address not found\");\r\n  //   }\r\n  //   return success;\r\n  // }\r\n\r\n  static Future<void> copy(dynamic text) async {\r\n    await Clipboard.setData(ClipboardData(text: \"$text\"));\r\n    // showToast(\"Text copied!\");\r\n  }\r\n\r\n  // static void debugToast(dynamic message) {\r\n  //   if (debugging) showToast(message);\r\n  // }\r\n\r\n  // static void showToast(dynamic message) {\r\n  //   if (debugging) print(\"$message\");\r\n  //   try {\r\n  //     Fluttertoast.showToast(\r\n  //       msg: '$message',\r\n  //       toastLength: Toast.LENGTH_SHORT,\r\n  //       gravity: ToastGravity.CENTER,\r\n  //       backgroundColor: Colorz.primaryColor,\r\n  //       textColor: Colors.white,\r\n  //       fontSize: 16,\r\n  //     );\r\n  //   } catch (e) {\r\n  //     print(\"Error showing Toast: $e\");\r\n  //   }\r\n  // }\r\n\r\n  ///[filter] Removes all the special characters and spaces\r\n  static String filter(String text) {\r\n    return (text\r\n        .replaceAll(new RegExp(r'[^\\w\\s]+'), '')\r\n        .replaceAll(' ', '')\r\n        .replaceAll('_', ''));\r\n  }\r\n\r\n  ///Returns the [DateTime] values in a human readable format\r\n  static String timeAgo(\r\n    dynamic input, {\r\n    String? prefix,\r\n  }) {\r\n    DateTime? finalDateTime;\r\n\r\n    if (input is DateTime) finalDateTime = input;\r\n    if (input is int)\r\n      finalDateTime = DateTime.fromMillisecondsSinceEpoch(input);\r\n\r\n    ///If the input is not valid, then just return ''\r\n    if (finalDateTime == null) return '';\r\n\r\n    final Duration difference = DateTime.now().difference(finalDateTime);\r\n    bool isPast = finalDateTime.millisecondsSinceEpoch <=\r\n        DateTime.now().millisecondsSinceEpoch;\r\n    String ago;\r\n\r\n    if (difference.inDays > 8) {\r\n      ago = finalDateTime.toString().substring(0, 10);\r\n    } else if ((difference.inDays / 7).floor() >= 1) {\r\n      ago = isPast ? '1 week ago' : '1 week';\r\n    } else if (difference.inDays >= 2) {\r\n      ago = isPast\r\n          ? '${difference.inDays} days ago'\r\n          : '${difference.inDays} days';\r\n    } else if (difference.inDays >= 1) {\r\n      ago = isPast ? 'Yesterday' : 'Tomorrow';\r\n    } else if (difference.inHours >= 2) {\r\n      ago = '${difference.inHours} hours ${isPast ? 'ago' : ''}';\r\n    } else if (difference.inHours >= 1) {\r\n      ago = '1 hour ${isPast ? 'ago' : ''}';\r\n    } else if (difference.inMinutes >= 2) {\r\n      ago = '${difference.inMinutes} minutes ${isPast ? 'ago' : ''}';\r\n    } else if (difference.inMinutes >= 1) {\r\n      ago = '1 minute ${isPast ? 'ago' : ''}';\r\n    } else if (difference.inSeconds >= 3) {\r\n      ago = '${difference.inSeconds} seconds ${isPast ? 'ago' : ''}';\r\n    } else {\r\n      ago = '${isPast ? 'Just now' : 'now'}';\r\n    }\r\n    return prefix == null ? ago : '$prefix $ago';\r\n  }\r\n\r\n  static String toDateTime(int createdAt) {\r\n    return '${toDate(createdAt)} @ ${toTime(createdAt)}';\r\n  }\r\n\r\n  static String toDate(int createdAt,\r\n      {bool showFullYear = true, bool showYear = true}) {\r\n    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n    int day = date.day;\r\n    int _month = date.month;\r\n    String month = toMonth(_month);\r\n    String year = showYear ? toYear(createdAt, showFullYear: showFullYear) : \"\";\r\n    return '$day $month $year';\r\n  }\r\n\r\n  static String toTime(int createdAt) {\r\n    DateTime date = DateTime.fromMillisecondsSinceEpoch(createdAt);\r\n    int hour = date.hour > 12 ? (date.hour - 12) : date.hour;\r\n    String minutes = date.minute < 10 ? '0${date.minute}' : '${date.minute}';\r\n    String amPm = date.hour >= 12 ? \"PM\" : \"AM\";\r\n    return '$hour:$minutes $amPm';\r\n  }\r\n\r\n  static String toYear(int createdAt, {bool showFullYear = true}) {\r\n    int _yr = DateTime.fromMillisecondsSinceEpoch(createdAt).year;\r\n    return showFullYear ? \"$_yr\" : \"$_yr\".substring(0, 2);\r\n  }\r\n\r\n  static String toMonth(int month) {\r\n    return month > 0 ? months[month - 1] : '$month';\r\n  }\r\n\r\n  static const List<String> months = [\r\n    'Jan',\r\n    'Feb',\r\n    'Mar',\r\n    'Apr',\r\n    'May',\r\n    'Jun',\r\n    'Jul',\r\n    'Aug',\r\n    'Sep',\r\n    'Oct',\r\n    'Nov',\r\n    'Dec',\r\n  ];\r\n\r\n  // static Future<void> launchurl(String? url, {bool inApp = false}) async {\r\n  //   try {\r\n  //     if (url != null) {\r\n  //       print(\"URL: $url\");\r\n  //       await launch(url, forceSafariVC: inApp, forceWebView: inApp);\r\n  //     } else {\r\n  //       showToast(\"No url!\");\r\n  //     }\r\n  //   } catch (exception) {\r\n  //     showToast(\"Error $exception\");\r\n  //   }\r\n  // }\r\n\r\n  static Future wait(int milliseconds) async {\r\n    await Future.delayed(Duration(milliseconds: milliseconds));\r\n  }\r\n\r\n  static void push(Widget? child, BuildContext context) {\r\n    if (child != null) {\r\n      Navigator.push(context, FadePageRoute(widget: child));\r\n    } else {\r\n      // String _log = \"No destination page found\";\r\n      // debugMode ? showToast(_log) : print(_log);\r\n    }\r\n  }\r\n\r\n  @Deprecated('Use pop')\r\n  static void close(BuildContext context) => pop(context);\r\n  static void pop(BuildContext context) {\r\n    try {\r\n      Navigator.pop(context);\r\n    } catch (e) {}\r\n  }\r\n\r\n  static double mheight(BuildContext context) {\r\n    return MediaQuery.of(context).size.height;\r\n  }\r\n\r\n  static double mwidth(BuildContext context) {\r\n    return MediaQuery.of(context).size.width;\r\n  }\r\n\r\n  static Widget empty() {\r\n    return Padding(\r\n      padding: const EdgeInsets.all(8.0),\r\n      child: Center(\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(18),\r\n          child: Icon(\r\n            Icons.delete,\r\n            size: 100,\r\n            color: Colors.grey.shade300,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  static Widget divider({Color? color}) {\r\n    return Padding(\r\n      padding: const EdgeInsets.symmetric(vertical: 5.0),\r\n      child: Divider(\r\n        height: 4.5,\r\n        color: color,\r\n      ),\r\n    );\r\n  }\r\n\r\n  static Widget heading({dynamic text}) {\r\n    return Padding(\r\n      padding: const EdgeInsets.only(top: 8.0, left: 8.0),\r\n      child: Txt(\r\n        text: text,\r\n        color: Colors.grey,\r\n        fontWeight: FontWeight.bold,\r\n      ),\r\n    );\r\n  }\r\n\r\n  static Widget offHeader(bool hide, dynamic text) {\r\n    return Offstage(\r\n      offstage: hide,\r\n      child: Container(\r\n        alignment: Alignment.bottomLeft,\r\n        padding: EdgeInsets.only(top: 20, left: 6),\r\n        child: Txt(\r\n          text: text,\r\n          color: Colors.grey,\r\n          fontWeight: FontWeight.bold,\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}