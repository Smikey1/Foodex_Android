{
    "sourceFile": "lib/screen/map/screen/main (1).dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1676292504124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1676292504124,
            "name": "Commit-0",
            "content": "import 'dart:async';\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:google_maps_flutter/google_maps_flutter.dart';\r\nimport 'package:location/location.dart';\r\n\r\nvoid main() => runApp(LocationScreen());\r\n\r\nclass LocationScreen extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'Flutter Google Maps Demo',\r\n      debugShowCheckedModeBanner: false,\r\n      home: MapSample(),\r\n    );\r\n  }\r\n}\r\n\r\nclass MapSample extends StatefulWidget {\r\n  @override\r\n  State<MapSample> createState() => MapSampleState();\r\n}\r\n\r\nclass MapSampleState extends State<MapSample> {\r\n  late LatLng _currentPosition;\r\n  Completer<GoogleMapController> _controller = Completer();\r\n\r\n  CameraPosition _kGooglePlex = CameraPosition(\r\n    target: LatLng(37.42796133580664, -122.085749655962),\r\n    zoom: 14.4746,\r\n  );\r\n\r\n  static final CameraPosition _kLake = CameraPosition(\r\n      bearing: 192.8334901395799,\r\n      target: LatLng(37.43296265331129, -122.08832357078792),\r\n      tilt: 59.440717697143555,\r\n      zoom: 19.151926040649414);\r\n\r\n  @override\r\n  void initState() {\r\n    getCurrentLocation();\r\n    super.initState();\r\n  }\r\n\r\n  Future<void> getCurrentLocation() async {\r\n    Location location = new Location();\r\n\r\n    bool _serviceEnabled;\r\n    PermissionStatus _permissionStatus;\r\n    LocationData _locationData;\r\n\r\n    _serviceEnabled = await location.serviceEnabled();\r\n    if (!_serviceEnabled) {\r\n      _serviceEnabled = await location.requestService();\r\n      if (!_serviceEnabled) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    _permissionStatus = await location.hasPermission();\r\n    if (_permissionStatus == PermissionStatus.denied) {\r\n      _permissionStatus = await location.requestPermission();\r\n      if (_permissionStatus != PermissionStatus.granted) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    _locationData = await location.getLocation(); // --> current Location\r\n    _currentPosition =\r\n        LatLng(_locationData.latitude!, _locationData.longitude!);\r\n\r\n    _kGooglePlex = CameraPosition(\r\n      target: _currentPosition,\r\n      zoom: 14.4746,\r\n    );\r\n\r\n    setState(() {});\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return SafeArea(\r\n      child: new Scaffold(\r\n        body: GoogleMap(\r\n          mapType: MapType.normal,\r\n          initialCameraPosition: _kGooglePlex,\r\n          markers: <Marker>{_setMarker()},\r\n          myLocationEnabled: true,\r\n          myLocationButtonEnabled: true,\r\n          onMapCreated: (GoogleMapController controller) {\r\n            _controller.complete(controller);\r\n          },\r\n        ),\r\n        floatingActionButtonLocation:\r\n            FloatingActionButtonLocation.miniCenterFloat,\r\n        floatingActionButton: FloatingActionButton.extended(\r\n          onPressed: _goToTheLake,\r\n          label: Text('To the lake!'),\r\n          icon: Icon(Icons.directions_boat),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Future<void> _goToTheLake() async {\r\n    final GoogleMapController controller = await _controller.future;\r\n    controller.animateCamera(CameraUpdate.newCameraPosition(_kLake));\r\n  }\r\n\r\n  Marker _setMarker() {\r\n    LatLng singaDurbarPosition = LatLng(27.69803150917992, 85.32388744895596);\r\n    const double hueRed = 0.0;\r\n    const double hueOrange = 30.0;\r\n    const double hueGreen = 120.0;\r\n    const double hueCyan = 180.0;\r\n    const double hueAzure = 210.0;\r\n    const double hueBlue = 240.0;\r\n    const double hueViolet = 270.0;\r\n    const double hueMagenta = 300.0;\r\n    const double hueRose = 330.0;\r\n    const double hueYellow = 60.0;\r\n    return Marker(\r\n        markerId: MarkerId(\"gongabu_branch\"),\r\n        icon: BitmapDescriptor.defaultMarkerWithHue(hueGreen),\r\n        position: _currentPosition);\r\n  }\r\n}\r\n"
        }
    ]
}