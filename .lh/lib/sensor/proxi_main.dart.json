{
    "sourceFile": "lib/sensor/proxi_main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1676825876894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1676825882352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:flutter/material.dart';\r\n+import 'package:provider/provider.dart';\r\n import '../services/storage_manager.dart';\r\n \r\n class ThemeNotifier with ChangeNotifier {\r\n   final darkTheme = ThemeData(\r\n"
                },
                {
                    "date": 1676825902365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n+import 'package:provider/provider.dart';\r\n+import '../services/storage_manager.dart';\r\n+\r\n+class ThemeNotifier with ChangeNotifier {\r\n+  final darkTheme = ThemeData(\r\n+    primaryColor: Colors.black,\r\n+    brightness: Brightness.dark,\r\n+    dividerColor: Colors.black12,\r\n+    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+        .copyWith(secondary: Colors.white)\r\n+        .copyWith(background: const Color(0xFF212121)),\r\n+  );\r\n+\r\n+  final lightTheme = ThemeData(\r\n+    primaryColor: Colors.white,\r\n+    brightness: Brightness.light,\r\n+    dividerColor: Colors.white54,\r\n+    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+        .copyWith(secondary: Colors.black)\r\n+        .copyWith(background: const Color(0xFFE5E5E5)),\r\n+  );\r\n+\r\n+  ThemeData _themeData;\r\n+  ThemeData getTheme() => _themeData;\r\n+\r\n+  ThemeNotifier() {\r\n+    StorageManager.readData('themeMode').then((value) {\r\n+      print('value read from storage: $value');\r\n+      var themeMode = value ?? 'light';\r\n+      if (themeMode == 'light') {\r\n+        _themeData = lightTheme;\r\n+      } else {\r\n+        print('setting dark theme');\r\n+        _themeData = darkTheme;\r\n+      }\r\n+      notifyListeners();\r\n+    });\r\n+  }\r\n+\r\n+  void setDarkMode() async {\r\n+    _themeData = darkTheme;\r\n+    StorageManager.saveData('themeMode', 'dark');\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  void setLightMode() async {\r\n+    _themeData = lightTheme;\r\n+    StorageManager.saveData('themeMode', 'light');\r\n+    notifyListeners();\r\n+  }\r\n+}\r\n+\r\n+void main() {\r\n+  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n+    create: (_) => ThemeNotifier(),\r\n+    child: const MyApp(),\r\n+  ));\r\n+}\r\n+\r\n+class MyApp extends StatelessWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Consumer<ThemeNotifier>(\r\n+      builder: (context, theme, _) => MaterialApp(\r\n+        theme: theme.getTheme(),\r\n+        home: Scaffold(\r\n+          appBar: AppBar(\r\n+            title: const Text('Hybrid Theme'),\r\n+          ),\r\n+          body: Row(\r\n+            children: [\r\n+              Container(\r\n+                child: FlatButton(\r\n+                  onPressed: () => {\r\n+                    print('Set Light Theme'),\r\n+                    theme.setLightMode(),\r\n+                  },\r\n+                  child: const Text('Set Light Theme'),\r\n+                ),\r\n+              ),\r\n+              Container(\r\n+                child: FlatButton(\r\n+                  onPressed: () => {\r\n+                    print('Set Dark theme'),\r\n+                    theme.setDarkMode(),\r\n+                  },\r\n+                  child: const Text('Set Dark theme'),\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+//Source: https://stackoverflow.com/questions/60232070\r\n"
                },
                {
                    "date": 1676825915645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n                   child: const Text('Set Light Theme'),\r\n                 ),\r\n               ),\r\n               Container(\r\n-                child: FlatButton(\r\n+                child: TextButton(\r\n                   onPressed: () => {\r\n                     print('Set Dark theme'),\r\n                     theme.setDarkMode(),\r\n                   },\r\n"
                },
                {
                    "date": 1676825922447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n+import 'package:provider/provider.dart';\r\n+import '../services/storage_manager.dart';\r\n+\r\n+class ThemeNotifier with ChangeNotifier {\r\n+  final darkTheme = ThemeData(\r\n+    primaryColor: Colors.black,\r\n+    brightness: Brightness.dark,\r\n+    dividerColor: Colors.black12,\r\n+    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+        .copyWith(secondary: Colors.white)\r\n+        .copyWith(background: const Color(0xFF212121)),\r\n+  );\r\n+\r\n+  final lightTheme = ThemeData(\r\n+    primaryColor: Colors.white,\r\n+    brightness: Brightness.light,\r\n+    dividerColor: Colors.white54,\r\n+    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+        .copyWith(secondary: Colors.black)\r\n+        .copyWith(background: const Color(0xFFE5E5E5)),\r\n+  );\r\n+\r\n+  ThemeData _themeData;\r\n+  ThemeData getTheme() => _themeData;\r\n+\r\n+  ThemeNotifier() {\r\n+    StorageManager.readData('themeMode').then((value) {\r\n+      print('value read from storage: $value');\r\n+      var themeMode = value ?? 'light';\r\n+      if (themeMode == 'light') {\r\n+        _themeData = lightTheme;\r\n+      } else {\r\n+        print('setting dark theme');\r\n+        _themeData = darkTheme;\r\n+      }\r\n+      notifyListeners();\r\n+    });\r\n+  }\r\n+\r\n+  void setDarkMode() async {\r\n+    _themeData = darkTheme;\r\n+    StorageManager.saveData('themeMode', 'dark');\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  void setLightMode() async {\r\n+    _themeData = lightTheme;\r\n+    StorageManager.saveData('themeMode', 'light');\r\n+    notifyListeners();\r\n+  }\r\n+}\r\n+\r\n+void main() {\r\n+  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n+    create: (_) => ThemeNotifier(),\r\n+    child: const MyApp(),\r\n+  ));\r\n+}\r\n+\r\n+class MyApp extends StatelessWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Consumer<ThemeNotifier>(\r\n+      builder: (context, theme, _) => MaterialApp(\r\n+        theme: theme.getTheme(),\r\n+        home: Scaffold(\r\n+          appBar: AppBar(\r\n+            title: const Text('Hybrid Theme'),\r\n+          ),\r\n+          body: Row(\r\n+            children: [\r\n+              Container(\r\n+                child: TextButton(\r\n+                  onPressed: () => {\r\n+                    print('Set Light Theme'),\r\n+                    theme.setLightMode(),\r\n+                  },\r\n+                  child: const Text('Set Light Theme'),\r\n+                ),\r\n+              ),\r\n+              Container(\r\n+                child: TextButton(\r\n+                  onPressed: () => {\r\n+                    print('Set Dark theme'),\r\n+                    theme.setDarkMode(),\r\n+                  },\r\n+                  child: const Text('Set Dark theme'),\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+//Source: https://stackoverflow.com/questions/60232070\r\n"
                },
                {
                    "date": 1676825938635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n+import 'package:provider/provider.dart';\r\n+\r\n+class ThemeNotifier with ChangeNotifier {\r\n+  final darkTheme = ThemeData(\r\n+    primaryColor: Colors.black,\r\n+    brightness: Brightness.dark,\r\n+    dividerColor: Colors.black12,\r\n+    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+        .copyWith(secondary: Colors.white)\r\n+        .copyWith(background: const Color(0xFF212121)),\r\n+  );\r\n+\r\n+  final lightTheme = ThemeData(\r\n+    primaryColor: Colors.white,\r\n+    brightness: Brightness.light,\r\n+    dividerColor: Colors.white54,\r\n+    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+        .copyWith(secondary: Colors.black)\r\n+        .copyWith(background: const Color(0xFFE5E5E5)),\r\n+  );\r\n+\r\n+  ThemeData _themeData;\r\n+  ThemeData getTheme() => _themeData;\r\n+\r\n+  ThemeNotifier() {\r\n+    StorageManager.readData('themeMode').then((value) {\r\n+      print('value read from storage: $value');\r\n+      var themeMode = value ?? 'light';\r\n+      if (themeMode == 'light') {\r\n+        _themeData = lightTheme;\r\n+      } else {\r\n+        print('setting dark theme');\r\n+        _themeData = darkTheme;\r\n+      }\r\n+      notifyListeners();\r\n+    });\r\n+  }\r\n+\r\n+  void setDarkMode() async {\r\n+    _themeData = darkTheme;\r\n+    StorageManager.saveData('themeMode', 'dark');\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  void setLightMode() async {\r\n+    _themeData = lightTheme;\r\n+    StorageManager.saveData('themeMode', 'light');\r\n+    notifyListeners();\r\n+  }\r\n+}\r\n+\r\n+void main() {\r\n+  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n+    create: (_) => ThemeNotifier(),\r\n+    child: const MyApp(),\r\n+  ));\r\n+}\r\n+\r\n+class MyApp extends StatelessWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Consumer<ThemeNotifier>(\r\n+      builder: (context, theme, _) => MaterialApp(\r\n+        theme: theme.getTheme(),\r\n+        home: Scaffold(\r\n+          appBar: AppBar(\r\n+            title: const Text('Hybrid Theme'),\r\n+          ),\r\n+          body: Row(\r\n+            children: [\r\n+              Container(\r\n+                child: TextButton(\r\n+                  onPressed: () => {\r\n+                    print('Set Light Theme'),\r\n+                    theme.setLightMode(),\r\n+                  },\r\n+                  child: const Text('Set Light Theme'),\r\n+                ),\r\n+              ),\r\n+              Container(\r\n+                child: TextButton(\r\n+                  onPressed: () => {\r\n+                    print('Set Dark theme'),\r\n+                    theme.setDarkMode(),\r\n+                  },\r\n+                  child: const Text('Set Dark theme'),\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+//Source: https://stackoverflow.com/questions/60232070\r\n"
                },
                {
                    "date": 1676826004121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,104 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n+import 'package:provider/provider.dart';\r\n+\r\n+class ThemeNotifier with ChangeNotifier {\r\n+  final darkTheme = ThemeData(\r\n+    primaryColor: Colors.black,\r\n+    brightness: Brightness.dark,\r\n+    dividerColor: Colors.black12,\r\n+    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+        .copyWith(secondary: Colors.white)\r\n+        .copyWith(background: const Color(0xFF212121)),\r\n+  );\r\n+\r\n+  final lightTheme = ThemeData(\r\n+    primaryColor: Colors.white,\r\n+    brightness: Brightness.light,\r\n+    dividerColor: Colors.white54,\r\n+    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+        .copyWith(secondary: Colors.black)\r\n+        .copyWith(background: const Color(0xFFE5E5E5)),\r\n+  );\r\n+\r\n+  ThemeData _themeData;\r\n+  ThemeData getTheme() => _themeData;\r\n+\r\n+  late ThemeNotifier() {\r\n+    StorageManager.readData('themeMode').then((value) {\r\n+      print('value read from storage: $value');\r\n+      var themeMode = value ?? 'light';\r\n+      if (themeMode == 'light') {\r\n+        _themeData = lightTheme;\r\n+      } else {\r\n+        print('setting dark theme');\r\n+        _themeData = darkTheme;\r\n+      }\r\n+      notifyListeners();\r\n+    });\r\n+  }\r\n+\r\n+  void setDarkMode() async {\r\n+    _themeData = darkTheme;\r\n+    StorageManager.saveData('themeMode', 'dark');\r\n+    notifyListeners();\r\n+  }\r\n+\r\n+  void setLightMode() async {\r\n+    _themeData = lightTheme;\r\n+    StorageManager.saveData('themeMode', 'light');\r\n+    notifyListeners();\r\n+  }\r\n+}\r\n+\r\n+void main() {\r\n+  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n+    create: (_) => ThemeNotifier(),\r\n+    child: const MyApp(),\r\n+  ));\r\n+}\r\n+\r\n+class MyApp extends StatelessWidget {\r\n+  const MyApp({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Consumer<ThemeNotifier>(\r\n+      builder: (context, theme, _) => MaterialApp(\r\n+        theme: theme.getTheme(),\r\n+        home: Scaffold(\r\n+          appBar: AppBar(\r\n+            title: const Text('Hybrid Theme'),\r\n+          ),\r\n+          body: Row(\r\n+            children: [\r\n+              Container(\r\n+                child: TextButton(\r\n+                  onPressed: () => {\r\n+                    print('Set Light Theme'),\r\n+                    theme.setLightMode(),\r\n+                  },\r\n+                  child: const Text('Set Light Theme'),\r\n+                ),\r\n+              ),\r\n+              Container(\r\n+                child: TextButton(\r\n+                  onPressed: () => {\r\n+                    print('Set Dark theme'),\r\n+                    theme.setDarkMode(),\r\n+                  },\r\n+                  child: const Text('Set Dark theme'),\r\n+                ),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+\r\n+\r\n+\r\n+//Source: https://stackoverflow.com/questions/60232070\r\n"
                },
                {
                    "date": 1676826104980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,111 +1,11 @@\n+// ignore_for_file: public_member_api_docs, sort_constructors_first\r\n+import 'dart:convert';\r\n+\r\n import 'package:flutter/material.dart';\r\n-import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n-class ThemeNotifier with ChangeNotifier {\r\n-  final darkTheme = ThemeData(\r\n-    primaryColor: Colors.black,\r\n-    brightness: Brightness.dark,\r\n-    dividerColor: Colors.black12,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.white)\r\n-        .copyWith(background: const Color(0xFF212121)),\r\n-  );\r\n-\r\n-  final lightTheme = ThemeData(\r\n-    primaryColor: Colors.white,\r\n-    brightness: Brightness.light,\r\n-    dividerColor: Colors.white54,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.black)\r\n-        .copyWith(background: const Color(0xFFE5E5E5)),\r\n-  );\r\n-\r\n-  ThemeData _themeData;\r\n-  ThemeData getTheme() => _themeData;\r\n-\r\n-  late ThemeNotifier() {\r\n-    StorageManager.readData('themeMode').then((value) {\r\n-      print('value read from storage: $value');\r\n-      var themeMode = value ?? 'light';\r\n-      if (themeMode == 'light') {\r\n-        _themeData = lightTheme;\r\n-      } else {\r\n-        print('setting dark theme');\r\n-        _themeData = darkTheme;\r\n-      }\r\n-      notifyListeners();\r\n-    });\r\n-  }\r\n-\r\n-  void setDarkMode() async {\r\n-    _themeData = darkTheme;\r\n-    StorageManager.saveData('themeMode', 'dark');\r\n-    notifyListeners();\r\n-  }\r\n-\r\n-  void setLightMode() async {\r\n-    _themeData = lightTheme;\r\n-    StorageManager.saveData('themeMode', 'light');\r\n-    notifyListeners();\r\n-  }\r\n-}\r\n-\r\n-void main() {\r\n-  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n-    create: (_) => ThemeNotifier(),\r\n-    child: const MyApp(),\r\n-  ));\r\n-}\r\n-\r\n-class MyApp extends StatelessWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Consumer<ThemeNotifier>(\r\n-      builder: (context, theme, _) => MaterialApp(\r\n-        theme: theme.getTheme(),\r\n-        home: Scaffold(\r\n-          appBar: AppBar(\r\n-            title: const Text('Hybrid Theme'),\r\n-          ),\r\n-          body: Row(\r\n-            children: [\r\n-              Container(\r\n-                child: TextButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Light Theme'),\r\n-                    theme.setLightMode(),\r\n-                  },\r\n-                  child: const Text('Set Light Theme'),\r\n-                ),\r\n-              ),\r\n-              Container(\r\n-                child: TextButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Dark theme'),\r\n-                    theme.setDarkMode(),\r\n-                  },\r\n-                  child: const Text('Set Dark theme'),\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-//Source: https://stackoverflow.com/questions/60232070\r\n-import 'package:flutter/material.dart';\r\n import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n-import 'package:provider/provider.dart';\r\n \r\n class ThemeNotifier with ChangeNotifier {\r\n   final darkTheme = ThemeData(\r\n     primaryColor: Colors.black,\r\n@@ -152,113 +52,24 @@\n     _themeData = lightTheme;\r\n     StorageManager.saveData('themeMode', 'light');\r\n     notifyListeners();\r\n   }\r\n-}\r\n \r\n-void main() {\r\n-  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n-    create: (_) => ThemeNotifier(),\r\n-    child: const MyApp(),\r\n-  ));\r\n-}\r\n+  Map<String, dynamic> toMap() {\r\n+    return <String, dynamic>{\r\n+      '_themeData': _themeData.toMap(),\r\n+    };\r\n+  }\r\n \r\n-class MyApp extends StatelessWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Consumer<ThemeNotifier>(\r\n-      builder: (context, theme, _) => MaterialApp(\r\n-        theme: theme.getTheme(),\r\n-        home: Scaffold(\r\n-          appBar: AppBar(\r\n-            title: const Text('Hybrid Theme'),\r\n-          ),\r\n-          body: Row(\r\n-            children: [\r\n-              Container(\r\n-                child: TextButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Light Theme'),\r\n-                    theme.setLightMode(),\r\n-                  },\r\n-                  child: const Text('Set Light Theme'),\r\n-                ),\r\n-              ),\r\n-              Container(\r\n-                child: TextButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Dark theme'),\r\n-                    theme.setDarkMode(),\r\n-                  },\r\n-                  child: const Text('Set Dark theme'),\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n+  factory ThemeNotifier.fromMap(Map<String, dynamic> map) {\r\n+    return ThemeNotifier(\r\n+      ThemeData.fromMap(map['_themeData'] as Map<String,dynamic>),\r\n     );\r\n   }\r\n-}\r\n \r\n+  String toJson() => json.encode(toMap());\r\n \r\n-\r\n-\r\n-//Source: https://stackoverflow.com/questions/60232070\r\n-import 'package:flutter/material.dart';\r\n-import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n-import 'package:provider/provider.dart';\r\n-import '../services/storage_manager.dart';\r\n-\r\n-class ThemeNotifier with ChangeNotifier {\r\n-  final darkTheme = ThemeData(\r\n-    primaryColor: Colors.black,\r\n-    brightness: Brightness.dark,\r\n-    dividerColor: Colors.black12,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.white)\r\n-        .copyWith(background: const Color(0xFF212121)),\r\n-  );\r\n-\r\n-  final lightTheme = ThemeData(\r\n-    primaryColor: Colors.white,\r\n-    brightness: Brightness.light,\r\n-    dividerColor: Colors.white54,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.black)\r\n-        .copyWith(background: const Color(0xFFE5E5E5)),\r\n-  );\r\n-\r\n-  ThemeData _themeData;\r\n-  ThemeData getTheme() => _themeData;\r\n-\r\n-  ThemeNotifier() {\r\n-    StorageManager.readData('themeMode').then((value) {\r\n-      print('value read from storage: $value');\r\n-      var themeMode = value ?? 'light';\r\n-      if (themeMode == 'light') {\r\n-        _themeData = lightTheme;\r\n-      } else {\r\n-        print('setting dark theme');\r\n-        _themeData = darkTheme;\r\n-      }\r\n-      notifyListeners();\r\n-    });\r\n-  }\r\n-\r\n-  void setDarkMode() async {\r\n-    _themeData = darkTheme;\r\n-    StorageManager.saveData('themeMode', 'dark');\r\n-    notifyListeners();\r\n-  }\r\n-\r\n-  void setLightMode() async {\r\n-    _themeData = lightTheme;\r\n-    StorageManager.saveData('themeMode', 'light');\r\n-    notifyListeners();\r\n-  }\r\n+  factory ThemeNotifier.fromJson(String source) => ThemeNotifier.fromMap(json.decode(source) as Map<String, dynamic>);\r\n }\r\n \r\n void main() {\r\n   return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n@@ -310,213 +121,4 @@\n \r\n \r\n \r\n //Source: https://stackoverflow.com/questions/60232070\r\n-import 'package:flutter/material.dart';\r\n-import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n-import 'package:provider/provider.dart';\r\n-import '../services/storage_manager.dart';\r\n-\r\n-class ThemeNotifier with ChangeNotifier {\r\n-  final darkTheme = ThemeData(\r\n-    primaryColor: Colors.black,\r\n-    brightness: Brightness.dark,\r\n-    dividerColor: Colors.black12,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.white)\r\n-        .copyWith(background: const Color(0xFF212121)),\r\n-  );\r\n-\r\n-  final lightTheme = ThemeData(\r\n-    primaryColor: Colors.white,\r\n-    brightness: Brightness.light,\r\n-    dividerColor: Colors.white54,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.black)\r\n-        .copyWith(background: const Color(0xFFE5E5E5)),\r\n-  );\r\n-\r\n-  ThemeData _themeData;\r\n-  ThemeData getTheme() => _themeData;\r\n-\r\n-  ThemeNotifier() {\r\n-    StorageManager.readData('themeMode').then((value) {\r\n-      print('value read from storage: $value');\r\n-      var themeMode = value ?? 'light';\r\n-      if (themeMode == 'light') {\r\n-        _themeData = lightTheme;\r\n-      } else {\r\n-        print('setting dark theme');\r\n-        _themeData = darkTheme;\r\n-      }\r\n-      notifyListeners();\r\n-    });\r\n-  }\r\n-\r\n-  void setDarkMode() async {\r\n-    _themeData = darkTheme;\r\n-    StorageManager.saveData('themeMode', 'dark');\r\n-    notifyListeners();\r\n-  }\r\n-\r\n-  void setLightMode() async {\r\n-    _themeData = lightTheme;\r\n-    StorageManager.saveData('themeMode', 'light');\r\n-    notifyListeners();\r\n-  }\r\n-}\r\n-\r\n-void main() {\r\n-  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n-    create: (_) => ThemeNotifier(),\r\n-    child: const MyApp(),\r\n-  ));\r\n-}\r\n-\r\n-class MyApp extends StatelessWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Consumer<ThemeNotifier>(\r\n-      builder: (context, theme, _) => MaterialApp(\r\n-        theme: theme.getTheme(),\r\n-        home: Scaffold(\r\n-          appBar: AppBar(\r\n-            title: const Text('Hybrid Theme'),\r\n-          ),\r\n-          body: Row(\r\n-            children: [\r\n-              Container(\r\n-                child: FlatButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Light Theme'),\r\n-                    theme.setLightMode(),\r\n-                  },\r\n-                  child: const Text('Set Light Theme'),\r\n-                ),\r\n-              ),\r\n-              Container(\r\n-                child: TextButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Dark theme'),\r\n-                    theme.setDarkMode(),\r\n-                  },\r\n-                  child: const Text('Set Dark theme'),\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-//Source: https://stackoverflow.com/questions/60232070\r\n-import 'package:flutter/material.dart';\r\n-import 'package:provider/provider.dart';\r\n-import '../services/storage_manager.dart';\r\n-\r\n-class ThemeNotifier with ChangeNotifier {\r\n-  final darkTheme = ThemeData(\r\n-    primaryColor: Colors.black,\r\n-    brightness: Brightness.dark,\r\n-    backgroundColor: const Color(0xFF212121),\r\n-    dividerColor: Colors.black12,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.white),\r\n-  );\r\n-\r\n-  final lightTheme = ThemeData(\r\n-    primaryColor: Colors.white,\r\n-    brightness: Brightness.light,\r\n-    backgroundColor: const Color(0xFFE5E5E5),\r\n-    dividerColor: Colors.white54,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.black),\r\n-  );\r\n-\r\n-  ThemeData _themeData;\r\n-  ThemeData getTheme() => _themeData;\r\n-\r\n-  ThemeNotifier() {\r\n-    StorageManager.readData('themeMode').then((value) {\r\n-      print('value read from storage: $value');\r\n-      var themeMode = value ?? 'light';\r\n-      if (themeMode == 'light') {\r\n-        _themeData = lightTheme;\r\n-      } else {\r\n-        print('setting dark theme');\r\n-        _themeData = darkTheme;\r\n-      }\r\n-      notifyListeners();\r\n-    });\r\n-  }\r\n-\r\n-  void setDarkMode() async {\r\n-    _themeData = darkTheme;\r\n-    StorageManager.saveData('themeMode', 'dark');\r\n-    notifyListeners();\r\n-  }\r\n-\r\n-  void setLightMode() async {\r\n-    _themeData = lightTheme;\r\n-    StorageManager.saveData('themeMode', 'light');\r\n-    notifyListeners();\r\n-  }\r\n-}\r\n-\r\n-void main() {\r\n-  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n-    create: (_) => ThemeNotifier(),\r\n-    child: MyApp(),\r\n-  ));\r\n-}\r\n-\r\n-class MyApp extends StatelessWidget {\r\n-  const MyApp({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Consumer<ThemeNotifier>(\r\n-      builder: (context, theme, _) => MaterialApp(\r\n-        theme: theme.getTheme(),\r\n-        home: Scaffold(\r\n-          appBar: AppBar(\r\n-            title: const Text('Hybrid Theme'),\r\n-          ),\r\n-          body: Row(\r\n-            children: [\r\n-              Container(\r\n-                child: FlatButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Light Theme'),\r\n-                    theme.setLightMode(),\r\n-                  },\r\n-                  child: const Text('Set Light Theme'),\r\n-                ),\r\n-              ),\r\n-              Container(\r\n-                child: FlatButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Dark theme'),\r\n-                    theme.setDarkMode(),\r\n-                  },\r\n-                  child: const Text('Set Dark theme'),\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-\r\n-\r\n-\r\n-//Source: https://stackoverflow.com/questions/60232070\r\n"
                },
                {
                    "date": 1676826112931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,8 @@\n-// ignore_for_file: public_member_api_docs, sort_constructors_first\r\n-import 'dart:convert';\r\n-\r\n import 'package:flutter/material.dart';\r\n+import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n-import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n-\r\n class ThemeNotifier with ChangeNotifier {\r\n   final darkTheme = ThemeData(\r\n     primaryColor: Colors.black,\r\n     brightness: Brightness.dark,\r\n@@ -52,24 +48,8 @@\n     _themeData = lightTheme;\r\n     StorageManager.saveData('themeMode', 'light');\r\n     notifyListeners();\r\n   }\r\n-\r\n-  Map<String, dynamic> toMap() {\r\n-    return <String, dynamic>{\r\n-      '_themeData': _themeData.toMap(),\r\n-    };\r\n-  }\r\n-\r\n-  factory ThemeNotifier.fromMap(Map<String, dynamic> map) {\r\n-    return ThemeNotifier(\r\n-      ThemeData.fromMap(map['_themeData'] as Map<String,dynamic>),\r\n-    );\r\n-  }\r\n-\r\n-  String toJson() => json.encode(toMap());\r\n-\r\n-  factory ThemeNotifier.fromJson(String source) => ThemeNotifier.fromMap(json.decode(source) as Map<String, dynamic>);\r\n }\r\n \r\n void main() {\r\n   return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n"
                },
                {
                    "date": 1676826175507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n-class ThemeNotifier with ChangeNotifier {\r\n+class ThemeNotif with ChangeNotifier {\r\n   final darkTheme = ThemeData(\r\n     primaryColor: Colors.black,\r\n     brightness: Brightness.dark,\r\n     dividerColor: Colors.black12,\r\n"
                },
                {
                    "date": 1676826193358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \r\n   ThemeData _themeData;\r\n   ThemeData getTheme() => _themeData;\r\n \r\n-  ThemeNotifier() {\r\n+  ThemeNoti() {\r\n     StorageManager.readData('themeMode').then((value) {\r\n       print('value read from storage: $value');\r\n       var themeMode = value ?? 'light';\r\n       if (themeMode == 'light') {\r\n"
                },
                {
                    "date": 1676826199774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import 'package:flutter/material.dart';\r\n import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n import 'package:provider/provider.dart';\r\n \r\n-class ThemeNotif with ChangeNotifier {\r\n+class ThemeNotifier with ChangeNotifier {\r\n   final darkTheme = ThemeData(\r\n     primaryColor: Colors.black,\r\n     brightness: Brightness.dark,\r\n     dividerColor: Colors.black12,\r\n@@ -23,9 +23,9 @@\n \r\n   ThemeData _themeData;\r\n   ThemeData getTheme() => _themeData;\r\n \r\n-  ThemeNoti() {\r\n+  ThemeNotifier() {\r\n     StorageManager.readData('themeMode').then((value) {\r\n       print('value read from storage: $value');\r\n       var themeMode = value ?? 'light';\r\n       if (themeMode == 'light') {\r\n"
                },
                {
                    "date": 1676826225121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .copyWith(secondary: Colors.black)\r\n         .copyWith(background: const Color(0xFFE5E5E5)),\r\n   );\r\n \r\n-  ThemeData _themeData;\r\n+  late ThemeData _themeData;\r\n   ThemeData getTheme() => _themeData;\r\n \r\n   ThemeNotifier() {\r\n     StorageManager.readData('themeMode').then((value) {\r\n"
                },
                {
                    "date": 1676826344066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,4 @@\n     );\r\n   }\r\n }\r\n \r\n-\r\n-\r\n-\r\n-//Source: https://stackoverflow.com/questions/60232070\r\n"
                },
                {
                    "date": 1676826630711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,100 +1,100 @@\n-import 'package:flutter/material.dart';\r\n-import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n-import 'package:provider/provider.dart';\r\n+// import 'package:flutter/material.dart';\r\n+// import 'package:foodex_app/sensor/proximity_sensor.dart';\r\n+// import 'package:provider/provider.dart';\r\n \r\n-class ThemeNotifier with ChangeNotifier {\r\n-  final darkTheme = ThemeData(\r\n-    primaryColor: Colors.black,\r\n-    brightness: Brightness.dark,\r\n-    dividerColor: Colors.black12,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.white)\r\n-        .copyWith(background: const Color(0xFF212121)),\r\n-  );\r\n+// class ThemeNotifier with ChangeNotifier {\r\n+//   final darkTheme = ThemeData(\r\n+//     primaryColor: Colors.black,\r\n+//     brightness: Brightness.dark,\r\n+//     dividerColor: Colors.black12,\r\n+//     colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+//         .copyWith(secondary: Colors.white)\r\n+//         .copyWith(background: const Color(0xFF212121)),\r\n+//   );\r\n \r\n-  final lightTheme = ThemeData(\r\n-    primaryColor: Colors.white,\r\n-    brightness: Brightness.light,\r\n-    dividerColor: Colors.white54,\r\n-    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n-        .copyWith(secondary: Colors.black)\r\n-        .copyWith(background: const Color(0xFFE5E5E5)),\r\n-  );\r\n+//   final lightTheme = ThemeData(\r\n+//     primaryColor: Colors.white,\r\n+//     brightness: Brightness.light,\r\n+//     dividerColor: Colors.white54,\r\n+//     colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n+//         .copyWith(secondary: Colors.black)\r\n+//         .copyWith(background: const Color(0xFFE5E5E5)),\r\n+//   );\r\n \r\n-  late ThemeData _themeData;\r\n-  ThemeData getTheme() => _themeData;\r\n+//   late ThemeData _themeData;\r\n+//   ThemeData getTheme() => _themeData;\r\n \r\n-  ThemeNotifier() {\r\n-    StorageManager.readData('themeMode').then((value) {\r\n-      print('value read from storage: $value');\r\n-      var themeMode = value ?? 'light';\r\n-      if (themeMode == 'light') {\r\n-        _themeData = lightTheme;\r\n-      } else {\r\n-        print('setting dark theme');\r\n-        _themeData = darkTheme;\r\n-      }\r\n-      notifyListeners();\r\n-    });\r\n-  }\r\n+//   ThemeNotifier() {\r\n+//     StorageManager.readData('themeMode').then((value) {\r\n+//       print('value read from storage: $value');\r\n+//       var themeMode = value ?? 'light';\r\n+//       if (themeMode == 'light') {\r\n+//         _themeData = lightTheme;\r\n+//       } else {\r\n+//         print('setting dark theme');\r\n+//         _themeData = darkTheme;\r\n+//       }\r\n+//       notifyListeners();\r\n+//     });\r\n+//   }\r\n \r\n-  void setDarkMode() async {\r\n-    _themeData = darkTheme;\r\n-    StorageManager.saveData('themeMode', 'dark');\r\n-    notifyListeners();\r\n-  }\r\n+//   void setDarkMode() async {\r\n+//     _themeData = darkTheme;\r\n+//     StorageManager.saveData('themeMode', 'dark');\r\n+//     notifyListeners();\r\n+//   }\r\n \r\n-  void setLightMode() async {\r\n-    _themeData = lightTheme;\r\n-    StorageManager.saveData('themeMode', 'light');\r\n-    notifyListeners();\r\n-  }\r\n-}\r\n+//   void setLightMode() async {\r\n+//     _themeData = lightTheme;\r\n+//     StorageManager.saveData('themeMode', 'light');\r\n+//     notifyListeners();\r\n+//   }\r\n+// }\r\n \r\n-void main() {\r\n-  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n-    create: (_) => ThemeNotifier(),\r\n-    child: const MyApp(),\r\n-  ));\r\n-}\r\n+// void main() {\r\n+//   return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n+//     create: (_) => ThemeNotifier(),\r\n+//     child: const MyApp(),\r\n+//   ));\r\n+// }\r\n \r\n-class MyApp extends StatelessWidget {\r\n-  const MyApp({super.key});\r\n+// class MyApp extends StatelessWidget {\r\n+//   const MyApp({super.key});\r\n \r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Consumer<ThemeNotifier>(\r\n-      builder: (context, theme, _) => MaterialApp(\r\n-        theme: theme.getTheme(),\r\n-        home: Scaffold(\r\n-          appBar: AppBar(\r\n-            title: const Text('Hybrid Theme'),\r\n-          ),\r\n-          body: Row(\r\n-            children: [\r\n-              Container(\r\n-                child: TextButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Light Theme'),\r\n-                    theme.setLightMode(),\r\n-                  },\r\n-                  child: const Text('Set Light Theme'),\r\n-                ),\r\n-              ),\r\n-              Container(\r\n-                child: TextButton(\r\n-                  onPressed: () => {\r\n-                    print('Set Dark theme'),\r\n-                    theme.setDarkMode(),\r\n-                  },\r\n-                  child: const Text('Set Dark theme'),\r\n-                ),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n+//   @override\r\n+//   Widget build(BuildContext context) {\r\n+//     return Consumer<ThemeNotifier>(\r\n+//       builder: (context, theme, _) => MaterialApp(\r\n+//         theme: theme.getTheme(),\r\n+//         home: Scaffold(\r\n+//           appBar: AppBar(\r\n+//             title: const Text('Hybrid Theme'),\r\n+//           ),\r\n+//           body: Row(\r\n+//             children: [\r\n+//               Container(\r\n+//                 child: TextButton(\r\n+//                   onPressed: () => {\r\n+//                     print('Set Light Theme'),\r\n+//                     theme.setLightMode(),\r\n+//                   },\r\n+//                   child: const Text('Set Light Theme'),\r\n+//                 ),\r\n+//               ),\r\n+//               Container(\r\n+//                 child: TextButton(\r\n+//                   onPressed: () => {\r\n+//                     print('Set Dark theme'),\r\n+//                     theme.setDarkMode(),\r\n+//                   },\r\n+//                   child: const Text('Set Dark theme'),\r\n+//                 ),\r\n+//               ),\r\n+//             ],\r\n+//           ),\r\n+//         ),\r\n+//       ),\r\n+//     );\r\n+//   }\r\n+// }\r\n \r\n"
                }
            ],
            "date": 1676825876894,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport '../services/storage_manager.dart';\r\n\r\nclass ThemeNotifier with ChangeNotifier {\r\n  final darkTheme = ThemeData(\r\n    primaryColor: Colors.black,\r\n    brightness: Brightness.dark,\r\n    backgroundColor: const Color(0xFF212121),\r\n    dividerColor: Colors.black12,\r\n    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n        .copyWith(secondary: Colors.white),\r\n  );\r\n\r\n  final lightTheme = ThemeData(\r\n    primaryColor: Colors.white,\r\n    brightness: Brightness.light,\r\n    backgroundColor: const Color(0xFFE5E5E5),\r\n    dividerColor: Colors.white54,\r\n    colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.grey)\r\n        .copyWith(secondary: Colors.black),\r\n  );\r\n\r\n  ThemeData _themeData;\r\n  ThemeData getTheme() => _themeData;\r\n\r\n  ThemeNotifier() {\r\n    StorageManager.readData('themeMode').then((value) {\r\n      print('value read from storage: $value');\r\n      var themeMode = value ?? 'light';\r\n      if (themeMode == 'light') {\r\n        _themeData = lightTheme;\r\n      } else {\r\n        print('setting dark theme');\r\n        _themeData = darkTheme;\r\n      }\r\n      notifyListeners();\r\n    });\r\n  }\r\n\r\n  void setDarkMode() async {\r\n    _themeData = darkTheme;\r\n    StorageManager.saveData('themeMode', 'dark');\r\n    notifyListeners();\r\n  }\r\n\r\n  void setLightMode() async {\r\n    _themeData = lightTheme;\r\n    StorageManager.saveData('themeMode', 'light');\r\n    notifyListeners();\r\n  }\r\n}\r\n\r\nvoid main() {\r\n  return runApp(ChangeNotifierProvider<ThemeNotifier>(\r\n    create: (_) => ThemeNotifier(),\r\n    child: MyApp(),\r\n  ));\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Consumer<ThemeNotifier>(\r\n      builder: (context, theme, _) => MaterialApp(\r\n        theme: theme.getTheme(),\r\n        home: Scaffold(\r\n          appBar: AppBar(\r\n            title: const Text('Hybrid Theme'),\r\n          ),\r\n          body: Row(\r\n            children: [\r\n              Container(\r\n                child: FlatButton(\r\n                  onPressed: () => {\r\n                    print('Set Light Theme'),\r\n                    theme.setLightMode(),\r\n                  },\r\n                  child: const Text('Set Light Theme'),\r\n                ),\r\n              ),\r\n              Container(\r\n                child: FlatButton(\r\n                  onPressed: () => {\r\n                    print('Set Dark theme'),\r\n                    theme.setDarkMode(),\r\n                  },\r\n                  child: const Text('Set Dark theme'),\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n//Source: https://stackoverflow.com/questions/60232070\r\n"
        }
    ]
}