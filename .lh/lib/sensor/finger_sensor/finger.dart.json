{
    "sourceFile": "lib/sensor/finger_sensor/finger.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1676829683713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1676829683713,
            "name": "Commit-0",
            "content": "import 'dart:async';\r\n\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter/services.dart';\r\nimport 'package:local_auth/local_auth.dart';\r\n\r\nclass Fingerprint extends StatefulWidget {\r\n  const Fingerprint({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<Fingerprint> createState() => _FingerprintState();\r\n}\r\n\r\nclass _FingerprintState extends State<Fingerprint> {\r\n  final LocalAuthentication auth = LocalAuthentication();\r\n  _SupportState _supportState = _SupportState.unknown;\r\n  bool? _canCheckBiometrics;\r\n  List<BiometricType>? _availableBiometrics;\r\n  String _authorized = 'Not Authorized';\r\n  bool _isAuthenticating = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    auth.isDeviceSupported().then(\r\n          (bool isSupported) => setState(() => _supportState = isSupported\r\n              ? _SupportState.supported\r\n              : _SupportState.unsupported),\r\n        );\r\n  }\r\n\r\n  Future<void> _checkBiometrics() async {\r\n    late bool canCheckBiometrics;\r\n    try {\r\n      canCheckBiometrics = await auth.canCheckBiometrics;\r\n    } on PlatformException catch (e) {\r\n      canCheckBiometrics = false;\r\n      print(e);\r\n    }\r\n    if (!mounted) {\r\n      return;\r\n    }\r\n\r\n    setState(() {\r\n      _canCheckBiometrics = canCheckBiometrics;\r\n    });\r\n  }\r\n\r\n  Future<void> _getAvailableBiometrics() async {\r\n    late List<BiometricType> availableBiometrics;\r\n    try {\r\n      availableBiometrics = await auth.getAvailableBiometrics();\r\n    } on PlatformException catch (e) {\r\n      availableBiometrics = <BiometricType>[];\r\n      print(e);\r\n    }\r\n    if (!mounted) {\r\n      return;\r\n    }\r\n\r\n    setState(() {\r\n      _availableBiometrics = availableBiometrics;\r\n    });\r\n  }\r\n\r\n  Future<void> _authenticate() async {\r\n    bool authenticated = false;\r\n    try {\r\n      setState(() {\r\n        _isAuthenticating = true;\r\n        _authorized = 'Authenticating';\r\n      });\r\n      authenticated = await auth.authenticate(\r\n        localizedReason: 'Let OS determine authentication method',\r\n        options: const AuthenticationOptions(\r\n          useErrorDialogs: true,\r\n          stickyAuth: true,\r\n        ),\r\n      );\r\n      setState(() {\r\n        _isAuthenticating = false;\r\n      });\r\n    } on PlatformException catch (e) {\r\n      print(e);\r\n      setState(() {\r\n        _isAuthenticating = false;\r\n        _authorized = 'Error - ${e.message}';\r\n      });\r\n      return;\r\n    }\r\n    if (!mounted) {\r\n      return;\r\n    }\r\n\r\n    setState(\r\n        () => _authorized = authenticated ? 'Authorized' : 'Not Authorized');\r\n  }\r\n\r\n  Future<void> _authenticateWithBiometrics() async {\r\n    bool authenticated = false;\r\n    try {\r\n      setState(() {\r\n        _isAuthenticating = true;\r\n        _authorized = 'Authenticating';\r\n      });\r\n      authenticated = await auth.authenticate(\r\n        localizedReason:\r\n            'Scan your fingerprint (or face or whatever) to authenticate',\r\n        options: const AuthenticationOptions(\r\n          useErrorDialogs: true,\r\n          stickyAuth: true,\r\n          biometricOnly: true,\r\n        ),\r\n      );\r\n      setState(() {\r\n        _isAuthenticating = false;\r\n        _authorized = 'Authenticating';\r\n      });\r\n    } on PlatformException catch (e) {\r\n      print(e);\r\n      setState(() {\r\n        _isAuthenticating = false;\r\n        _authorized = 'Error - ${e.message}';\r\n      });\r\n      return;\r\n    }\r\n    if (!mounted) {\r\n      return;\r\n    }\r\n\r\n    final String message = authenticated ? 'Authorized' : 'Not Authorized';\r\n    setState(() {\r\n      _authorized = message;\r\n    });\r\n  }\r\n\r\n  Future<void> _cancelAuthentication() async {\r\n    await auth.stopAuthentication();\r\n    setState(() => _isAuthenticating = false);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      home: Scaffold(\r\n        appBar: AppBar(\r\n          title: const Text('Plugin example app'),\r\n        ),\r\n        body: ListView(\r\n          padding: const EdgeInsets.only(top: 30),\r\n          children: <Widget>[\r\n            Column(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: <Widget>[\r\n                if (_supportState == _SupportState.unknown)\r\n                  const CircularProgressIndicator()\r\n                else if (_supportState == _SupportState.supported)\r\n                  const Text('This device is supported')\r\n                else\r\n                  const Text('This device is not supported'),\r\n                const Divider(height: 100),\r\n                Text('Can check biometrics: $_canCheckBiometrics\\n'),\r\n                ElevatedButton(\r\n                  onPressed: _checkBiometrics,\r\n                  child: const Text('Check biometrics'),\r\n                ),\r\n                const Divider(height: 100),\r\n                Text('Available biometrics: $_availableBiometrics\\n'),\r\n                ElevatedButton(\r\n                  onPressed: _getAvailableBiometrics,\r\n                  child: const Text('Get available biometrics'),\r\n                ),\r\n                const Divider(height: 100),\r\n                Text('Current State: $_authorized\\n'),\r\n                if (_isAuthenticating)\r\n                  ElevatedButton(\r\n                    onPressed: _cancelAuthentication,\r\n                    child: Row(\r\n                      mainAxisSize: MainAxisSize.min,\r\n                      children: const <Widget>[\r\n                        Text('Cancel Authentication'),\r\n                        Icon(Icons.cancel),\r\n                      ],\r\n                    ),\r\n                  )\r\n                else\r\n                  Column(\r\n                    children: <Widget>[\r\n                      ElevatedButton(\r\n                        onPressed: _authenticate,\r\n                        child: Row(\r\n                          mainAxisSize: MainAxisSize.min,\r\n                          children: const <Widget>[\r\n                            Text('Authenticate'),\r\n                            Icon(Icons.perm_device_information),\r\n                          ],\r\n                        ),\r\n                      ),\r\n                      ElevatedButton(\r\n                        onPressed: _authenticateWithBiometrics,\r\n                        child: Row(\r\n                          mainAxisSize: MainAxisSize.min,\r\n                          children: <Widget>[\r\n                            Text(_isAuthenticating\r\n                                ? 'Cancel'\r\n                                : 'Authenticate: biometrics only'),\r\n                            const Icon(Icons.fingerprint),\r\n                          ],\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n              ],\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nenum _SupportState {\r\n  unknown,\r\n  supported,\r\n  unsupported,\r\n}\r\n"
        }
    ]
}